
stm32grbl12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000510  20000000  0800b5dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001408  20000510  0800baec  00020510  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001918  0800baec  00021918  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002bab5  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00007a31  00000000  00000000  0004bfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000159a7  00000000  00000000  00053a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001220  00000000  00000000  000693c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003d88  00000000  00000000  0006a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000161d0  00000000  00000000  0006e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026c37  00000000  00000000  00084540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005dffe  00000000  00000000  000ab177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00109175  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003768  00000000  00000000  001091c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000510 	.word	0x20000510
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aee8 	.word	0x0800aee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000514 	.word	0x20000514
 800014c:	0800aee8 	.word	0x0800aee8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	3a01      	subs	r2, #1
 8000732:	bf28      	it	cs
 8000734:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000738:	d2ed      	bcs.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_fcmpun>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	d102      	bne.n	8000c34 <__aeabi_fcmpun+0x14>
 8000c2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c32:	d108      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c38:	d102      	bne.n	8000c40 <__aeabi_fcmpun+0x20>
 8000c3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_f2iz>:
 8000c4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c54:	d30f      	bcc.n	8000c76 <__aeabi_f2iz+0x2a>
 8000c56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_f2iz+0x30>
 8000c60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c70:	bf18      	it	ne
 8000c72:	4240      	negne	r0, r0
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2iz+0x3a>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d105      	bne.n	8000c92 <__aeabi_f2iz+0x46>
 8000c86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c8a:	bf08      	it	eq
 8000c8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2uiz>:
 8000c98:	0042      	lsls	r2, r0, #1
 8000c9a:	d20e      	bcs.n	8000cba <__aeabi_f2uiz+0x22>
 8000c9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ca0:	d30b      	bcc.n	8000cba <__aeabi_f2uiz+0x22>
 8000ca2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ca6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000caa:	d409      	bmi.n	8000cc0 <__aeabi_f2uiz+0x28>
 8000cac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb8:	4770      	bx	lr
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	4770      	bx	lr
 8000cc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cc4:	d101      	bne.n	8000cca <__aeabi_f2uiz+0x32>
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	d102      	bne.n	8000cd0 <__aeabi_f2uiz+0x38>
 8000cca:	f04f 30ff 	mov.w	r0, #4294967295
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <NVIC_PriorityGroupConfig+0x10>)
 8000cda:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000cde:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000ce2:	60d8      	str	r0, [r3, #12]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cec:	78c3      	ldrb	r3, [r0, #3]
 8000cee:	b1fb      	cbz	r3, 8000d30 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <NVIC_Init+0x5c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000cf2:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf4:	68d2      	ldr	r2, [r2, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cf6:	2101      	movs	r1, #1
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf8:	43d2      	mvns	r2, r2
{
 8000cfa:	b430      	push	{r4, r5}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cfc:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d00:	7844      	ldrb	r4, [r0, #1]
    tmppre = (0x4 - tmppriority);
 8000d02:	f1c2 0504 	rsb	r5, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8000d06:	fa23 f202 	lsr.w	r2, r3, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d0a:	7883      	ldrb	r3, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d0c:	40ac      	lsls	r4, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d0e:	4013      	ands	r3, r2
 8000d10:	4323      	orrs	r3, r4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d12:	7802      	ldrb	r2, [r0, #0]
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <NVIC_Init+0x60>)
    tmppriority = tmppriority << 0x04;
 8000d16:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d18:	f002 051f 	and.w	r5, r2, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d1c:	1884      	adds	r4, r0, r2
 8000d1e:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d20:	40a9      	lsls	r1, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d22:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d26:	0952      	lsrs	r2, r2, #5
 8000d28:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d2c:	bc30      	pop	{r4, r5}
 8000d2e:	4770      	bx	lr
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d30:	2101      	movs	r1, #1
 8000d32:	7803      	ldrb	r3, [r0, #0]
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <NVIC_Init+0x60>)
 8000d36:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d38:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3c:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d42:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000d50:	7983      	ldrb	r3, [r0, #6]
 8000d52:	b33b      	cbz	r3, 8000da4 <EXTI_Init+0x54>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <EXTI_Init+0x7c>)
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
{
 8000d5a:	b410      	push	{r4}
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d5c:	ea22 0201 	bic.w	r2, r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	ea22 0201 	bic.w	r2, r2, r1
 8000d68:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d6a:	7902      	ldrb	r2, [r0, #4]
 8000d6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d70:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d74:	6814      	ldr	r4, [r2, #0]
 8000d76:	4321      	orrs	r1, r4
 8000d78:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d7a:	6899      	ldr	r1, [r3, #8]
 8000d7c:	6802      	ldr	r2, [r0, #0]
 8000d7e:	ea21 0102 	bic.w	r1, r1, r2
 8000d82:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d84:	68d9      	ldr	r1, [r3, #12]
 8000d86:	ea21 0102 	bic.w	r1, r1, r2
 8000d8a:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000d8c:	7941      	ldrb	r1, [r0, #5]
 8000d8e:	2910      	cmp	r1, #16
 8000d90:	d013      	beq.n	8000dba <EXTI_Init+0x6a>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000d92:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000d96:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d9a:	6819      	ldr	r1, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000d9c:	bc10      	pop	{r4}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000da4:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000da6:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dac:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	ea22 0201 	bic.w	r2, r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dba:	6899      	ldr	r1, [r3, #8]
}
 8000dbc:	bc10      	pop	{r4}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000dc2:	68d9      	ldr	r1, [r3, #12]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	60da      	str	r2, [r3, #12]
}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000dd0:	4602      	mov	r2, r0
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <EXTI_GetITStatus+0x18>)
 8000dd4:	6819      	ldr	r1, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000dd6:	6958      	ldr	r0, [r3, #20]
 8000dd8:	4010      	ands	r0, r2
 8000dda:	d003      	beq.n	8000de4 <EXTI_GetITStatus+0x14>
 8000ddc:	4211      	tst	r1, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000dde:	bf14      	ite	ne
 8000de0:	2001      	movne	r0, #1
 8000de2:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40010400 	.word	0x40010400

08000dec <EXTI_ClearITPendingBit>:
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <EXTI_ClearITPendingBit+0x8>)
 8000dee:	6158      	str	r0, [r3, #20]
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40010400 	.word	0x40010400

08000df8 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <FLASH_Unlock+0xc>)
 8000dfa:	4903      	ldr	r1, [pc, #12]	; (8000e08 <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 8000dfe:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000e00:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000e02:	4770      	bx	lr
 8000e04:	40022000 	.word	0x40022000
 8000e08:	45670123 	.word	0x45670123
 8000e0c:	cdef89ab 	.word	0xcdef89ab

08000e10 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e10:	4a32      	ldr	r2, [pc, #200]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e12:	68d3      	ldr	r3, [r2, #12]
 8000e14:	07db      	lsls	r3, r3, #31
 8000e16:	d407      	bmi.n	8000e28 <FLASH_ErasePage+0x18>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e18:	68d3      	ldr	r3, [r2, #12]
 8000e1a:	0759      	lsls	r1, r3, #29
 8000e1c:	d448      	bmi.n	8000eb0 <FLASH_ErasePage+0xa0>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e1e:	68d3      	ldr	r3, [r2, #12]
 8000e20:	06db      	lsls	r3, r3, #27
 8000e22:	d519      	bpl.n	8000e58 <FLASH_ErasePage+0x48>
      {
        flashstatus = FLASH_ERROR_WRP;
 8000e24:	2003      	movs	r0, #3
 8000e26:	4770      	bx	lr
 8000e28:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e2c:	68d1      	ldr	r1, [r2, #12]
 8000e2e:	07c9      	lsls	r1, r1, #31
 8000e30:	d40c      	bmi.n	8000e4c <FLASH_ErasePage+0x3c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e32:	68d1      	ldr	r1, [r2, #12]
 8000e34:	0749      	lsls	r1, r1, #29
 8000e36:	d434      	bmi.n	8000ea2 <FLASH_ErasePage+0x92>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e38:	68d2      	ldr	r2, [r2, #12]
 8000e3a:	06d2      	lsls	r2, r2, #27
 8000e3c:	d50a      	bpl.n	8000e54 <FLASH_ErasePage+0x44>
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 8000e3e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000e40:	2b00      	cmp	r3, #0
        flashstatus = FLASH_ERROR_WRP;
 8000e42:	f04f 0003 	mov.w	r0, #3
    status = FLASH_TIMEOUT;
 8000e46:	bf08      	it	eq
 8000e48:	2005      	moveq	r0, #5
}
 8000e4a:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	d1ed      	bne.n	8000e2c <FLASH_ErasePage+0x1c>
    status = FLASH_TIMEOUT;
 8000e50:	2005      	movs	r0, #5
 8000e52:	4770      	bx	lr
  if(Timeout == 0x00 )
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d0fb      	beq.n	8000e50 <FLASH_ErasePage+0x40>
    FLASH->CR|= CR_PER_Set;
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e5a:	6913      	ldr	r3, [r2, #16]
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8000e62:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8000e64:	6913      	ldr	r3, [r2, #16]
 8000e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6a:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e6c:	68d3      	ldr	r3, [r2, #12]
 8000e6e:	07d9      	lsls	r1, r3, #31
 8000e70:	d520      	bpl.n	8000eb4 <FLASH_ErasePage+0xa4>
 8000e72:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8000e76:	68d1      	ldr	r1, [r2, #12]
 8000e78:	07c8      	lsls	r0, r1, #31
 8000e7a:	d425      	bmi.n	8000ec8 <FLASH_ErasePage+0xb8>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e7c:	68d1      	ldr	r1, [r2, #12]
 8000e7e:	0749      	lsls	r1, r1, #29
 8000e80:	d426      	bmi.n	8000ed0 <FLASH_ErasePage+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e82:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000e84:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e86:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000e88:	bf4c      	ite	mi
 8000e8a:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000e8c:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf08      	it	eq
 8000e92:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PER_Reset;
 8000e94:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e9a:	6913      	ldr	r3, [r2, #16]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	6113      	str	r3, [r2, #16]
 8000ea0:	4770      	bx	lr
    Timeout--;
 8000ea2:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000ea4:	2b00      	cmp	r3, #0
      flashstatus = FLASH_ERROR_PG;
 8000ea6:	f04f 0002 	mov.w	r0, #2
    status = FLASH_TIMEOUT;
 8000eaa:	bf08      	it	eq
 8000eac:	2005      	moveq	r0, #5
}
 8000eae:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000eb4:	68d3      	ldr	r3, [r2, #12]
 8000eb6:	075b      	lsls	r3, r3, #29
 8000eb8:	d40d      	bmi.n	8000ed6 <FLASH_ErasePage+0xc6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000eba:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000ebc:	f013 0f10 	tst.w	r3, #16
 8000ec0:	bf14      	ite	ne
 8000ec2:	2003      	movne	r0, #3
 8000ec4:	2004      	moveq	r0, #4
 8000ec6:	e7e5      	b.n	8000e94 <FLASH_ErasePage+0x84>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	d1d4      	bne.n	8000e76 <FLASH_ErasePage+0x66>
    status = FLASH_TIMEOUT;
 8000ecc:	2005      	movs	r0, #5
 8000ece:	e7e1      	b.n	8000e94 <FLASH_ErasePage+0x84>
      flashstatus = FLASH_ERROR_PG;
 8000ed0:	2002      	movs	r0, #2
    Timeout--;
 8000ed2:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000ed4:	e7db      	b.n	8000e8e <FLASH_ErasePage+0x7e>
      flashstatus = FLASH_ERROR_PG;
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	e7dc      	b.n	8000e94 <FLASH_ErasePage+0x84>
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <FLASH_ProgramHalfWord>:
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ee0:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
{
 8000ee2:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ee4:	68d3      	ldr	r3, [r2, #12]
 8000ee6:	07db      	lsls	r3, r3, #31
 8000ee8:	d408      	bmi.n	8000efc <FLASH_ProgramHalfWord+0x1c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000eea:	68d3      	ldr	r3, [r2, #12]
 8000eec:	075c      	lsls	r4, r3, #29
 8000eee:	d443      	bmi.n	8000f78 <FLASH_ProgramHalfWord+0x98>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000ef0:	68d3      	ldr	r3, [r2, #12]
 8000ef2:	06db      	lsls	r3, r3, #27
 8000ef4:	d51b      	bpl.n	8000f2e <FLASH_ProgramHalfWord+0x4e>
        flashstatus = FLASH_ERROR_WRP;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	bc10      	pop	{r4}
 8000efa:	4770      	bx	lr
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f00:	68d4      	ldr	r4, [r2, #12]
 8000f02:	07e4      	lsls	r4, r4, #31
 8000f04:	d40c      	bmi.n	8000f20 <FLASH_ProgramHalfWord+0x40>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f06:	68d4      	ldr	r4, [r2, #12]
 8000f08:	0764      	lsls	r4, r4, #29
 8000f0a:	d432      	bmi.n	8000f72 <FLASH_ProgramHalfWord+0x92>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f0c:	68d2      	ldr	r2, [r2, #12]
 8000f0e:	06d2      	lsls	r2, r2, #27
 8000f10:	d50b      	bpl.n	8000f2a <FLASH_ProgramHalfWord+0x4a>
        flashstatus = FLASH_ERROR_WRP;
 8000f12:	2003      	movs	r0, #3
    Timeout--;
 8000f14:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf08      	it	eq
 8000f1a:	2005      	moveq	r0, #5
}
 8000f1c:	bc10      	pop	{r4}
 8000f1e:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f20:	3b01      	subs	r3, #1
 8000f22:	d1ed      	bne.n	8000f00 <FLASH_ProgramHalfWord+0x20>
    status = FLASH_TIMEOUT;
 8000f24:	2005      	movs	r0, #5
}
 8000f26:	bc10      	pop	{r4}
 8000f28:	4770      	bx	lr
  if(Timeout == 0x00 )
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d0fa      	beq.n	8000f24 <FLASH_ProgramHalfWord+0x44>
    FLASH->CR |= CR_PG_Set;
 8000f2e:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
 8000f30:	6913      	ldr	r3, [r2, #16]
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8000f38:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f3a:	68d3      	ldr	r3, [r2, #12]
 8000f3c:	07db      	lsls	r3, r3, #31
 8000f3e:	d51e      	bpl.n	8000f7e <FLASH_ProgramHalfWord+0x9e>
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	68d1      	ldr	r1, [r2, #12]
 8000f46:	07c8      	lsls	r0, r1, #31
 8000f48:	d423      	bmi.n	8000f92 <FLASH_ProgramHalfWord+0xb2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f4a:	68d1      	ldr	r1, [r2, #12]
 8000f4c:	0749      	lsls	r1, r1, #29
 8000f4e:	d424      	bmi.n	8000f9a <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f50:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000f52:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f54:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000f56:	bf4c      	ite	mi
 8000f58:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000f5a:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PG_Reset;
 8000f62:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
}
 8000f68:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8000f6a:	6913      	ldr	r3, [r2, #16]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	6113      	str	r3, [r2, #16]
}
 8000f70:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000f72:	2002      	movs	r0, #2
    Timeout--;
 8000f74:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f76:	e7ce      	b.n	8000f16 <FLASH_ProgramHalfWord+0x36>
      flashstatus = FLASH_ERROR_PG;
 8000f78:	2002      	movs	r0, #2
}
 8000f7a:	bc10      	pop	{r4}
 8000f7c:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f7e:	68d3      	ldr	r3, [r2, #12]
 8000f80:	075c      	lsls	r4, r3, #29
 8000f82:	d40d      	bmi.n	8000fa0 <FLASH_ProgramHalfWord+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f84:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000f86:	f013 0f10 	tst.w	r3, #16
 8000f8a:	bf14      	ite	ne
 8000f8c:	2003      	movne	r0, #3
 8000f8e:	2004      	moveq	r0, #4
 8000f90:	e7e7      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f92:	3b01      	subs	r3, #1
 8000f94:	d1d6      	bne.n	8000f44 <FLASH_ProgramHalfWord+0x64>
    status = FLASH_TIMEOUT;
 8000f96:	2005      	movs	r0, #5
 8000f98:	e7e3      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
      flashstatus = FLASH_ERROR_PG;
 8000f9a:	2002      	movs	r0, #2
    Timeout--;
 8000f9c:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f9e:	e7dd      	b.n	8000f5c <FLASH_ProgramHalfWord+0x7c>
      flashstatus = FLASH_ERROR_PG;
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	e7de      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fa8:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000faa:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000fac:	06e3      	lsls	r3, r4, #27
 8000fae:	bf48      	it	mi
 8000fb0:	788b      	ldrbmi	r3, [r1, #2]
 8000fb2:	f004 050f 	and.w	r5, r4, #15
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000fb6:	bf48      	it	mi
 8000fb8:	431d      	orrmi	r5, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000fba:	880b      	ldrh	r3, [r1, #0]
 8000fbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000fc0:	d033      	beq.n	800102a <GPIO_Init+0x82>
  {
    tmpreg = GPIOx->CRL;
 8000fc2:	2c48      	cmp	r4, #72	; 0x48
 8000fc4:	6802      	ldr	r2, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fc6:	f000 80ad 	beq.w	8001124 <GPIO_Init+0x17c>
 8000fca:	2c28      	cmp	r4, #40	; 0x28
 8000fcc:	f000 8133 	beq.w	8001236 <GPIO_Init+0x28e>
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000fd0:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000fd2:	bf44      	itt	mi
 8000fd4:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fd8:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8000fda:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8000fdc:	bf44      	itt	mi
 8000fde:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000fe2:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8000fe6:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8000fe8:	bf44      	itt	mi
 8000fea:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000fee:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8000ff2:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8000ff4:	bf44      	itt	mi
 8000ff6:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8000ffa:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8000ffe:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001000:	bf44      	itt	mi
 8001002:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001006:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 800100a:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 800100c:	bf44      	itt	mi
 800100e:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001012:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 8001016:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001018:	bf44      	itt	mi
 800101a:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800101e:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 8001022:	0619      	lsls	r1, r3, #24
 8001024:	f100 8104 	bmi.w	8001230 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001028:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d948      	bls.n	80010c0 <GPIO_Init+0x118>
  {
    tmpreg = GPIOx->CRH;
 800102e:	2c48      	cmp	r4, #72	; 0x48
 8001030:	6842      	ldr	r2, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001032:	d147      	bne.n	80010c4 <GPIO_Init+0x11c>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8001034:	05d9      	lsls	r1, r3, #23
 8001036:	d505      	bpl.n	8001044 <GPIO_Init+0x9c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 800103c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001040:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001042:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001044:	059c      	lsls	r4, r3, #22
 8001046:	d506      	bpl.n	8001056 <GPIO_Init+0xae>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 800104c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001050:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001054:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001056:	0559      	lsls	r1, r3, #21
 8001058:	d506      	bpl.n	8001068 <GPIO_Init+0xc0>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 800105e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001062:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001066:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001068:	051c      	lsls	r4, r3, #20
 800106a:	d506      	bpl.n	800107a <GPIO_Init+0xd2>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001070:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001074:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001078:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800107a:	04d9      	lsls	r1, r3, #19
 800107c:	d506      	bpl.n	800108c <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001082:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001086:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800108a:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800108c:	049c      	lsls	r4, r3, #18
 800108e:	d506      	bpl.n	800109e <GPIO_Init+0xf6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001094:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001098:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800109c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800109e:	0459      	lsls	r1, r3, #17
 80010a0:	d506      	bpl.n	80010b0 <GPIO_Init+0x108>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80010a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80010aa:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010ae:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	d504      	bpl.n	80010be <GPIO_Init+0x116>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80010b8:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010bc:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80010be:	6042      	str	r2, [r0, #4]
  }
}
 80010c0:	bc30      	pop	{r4, r5}
 80010c2:	4770      	bx	lr
 80010c4:	2c28      	cmp	r4, #40	; 0x28
 80010c6:	d06c      	beq.n	80011a2 <GPIO_Init+0x1fa>
      if (currentpin == pos)
 80010c8:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 80010ca:	bf44      	itt	mi
 80010cc:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80010d0:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 80010d2:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 80010d4:	bf44      	itt	mi
 80010d6:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80010da:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 80010de:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80010e0:	bf44      	itt	mi
 80010e2:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80010e6:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 80010ea:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 80010ec:	bf44      	itt	mi
 80010ee:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80010f2:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 80010f6:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80010f8:	bf44      	itt	mi
 80010fa:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80010fe:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 8001102:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 8001104:	bf44      	itt	mi
 8001106:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800110a:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 800110e:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 8001110:	bf44      	itt	mi
 8001112:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001116:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 800111a:	041c      	lsls	r4, r3, #16
 800111c:	d5cf      	bpl.n	80010be <GPIO_Init+0x116>
        tmpreg |= (currentmode << pos);
 800111e:	f365 721f 	bfi	r2, r5, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001122:	e7cc      	b.n	80010be <GPIO_Init+0x116>
      if (currentpin == pos)
 8001124:	07d9      	lsls	r1, r3, #31
 8001126:	d504      	bpl.n	8001132 <GPIO_Init+0x18a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001128:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800112a:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800112e:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001130:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001132:	0799      	lsls	r1, r3, #30
 8001134:	d505      	bpl.n	8001142 <GPIO_Init+0x19a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001136:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800113c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001140:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001142:	0759      	lsls	r1, r3, #29
 8001144:	d505      	bpl.n	8001152 <GPIO_Init+0x1aa>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001146:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001148:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800114c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001150:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001152:	0719      	lsls	r1, r3, #28
 8001154:	d505      	bpl.n	8001162 <GPIO_Init+0x1ba>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001156:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001158:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800115c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001160:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001162:	06d9      	lsls	r1, r3, #27
 8001164:	d505      	bpl.n	8001172 <GPIO_Init+0x1ca>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001166:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001168:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800116c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001170:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001172:	0699      	lsls	r1, r3, #26
 8001174:	d505      	bpl.n	8001182 <GPIO_Init+0x1da>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001176:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 8001178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800117c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001180:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001182:	0659      	lsls	r1, r3, #25
 8001184:	d505      	bpl.n	8001192 <GPIO_Init+0x1ea>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001186:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 8001188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800118c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001190:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001192:	0619      	lsls	r1, r3, #24
 8001194:	f57f af48 	bpl.w	8001028 <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001198:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 800119a:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800119e:	6101      	str	r1, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011a0:	e742      	b.n	8001028 <GPIO_Init+0x80>
      if (currentpin == pos)
 80011a2:	05d9      	lsls	r1, r3, #23
 80011a4:	d505      	bpl.n	80011b2 <GPIO_Init+0x20a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80011aa:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80011ae:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011b0:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011b2:	059c      	lsls	r4, r3, #22
 80011b4:	d506      	bpl.n	80011c4 <GPIO_Init+0x21c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011b6:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80011ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80011be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011c4:	0559      	lsls	r1, r3, #21
 80011c6:	d506      	bpl.n	80011d6 <GPIO_Init+0x22e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80011cc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80011d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011d4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011d6:	051c      	lsls	r4, r3, #20
 80011d8:	d506      	bpl.n	80011e8 <GPIO_Init+0x240>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80011de:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80011e2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011e6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011e8:	04d9      	lsls	r1, r3, #19
 80011ea:	d506      	bpl.n	80011fa <GPIO_Init+0x252>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 80011f0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80011f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011f8:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011fa:	049c      	lsls	r4, r3, #18
 80011fc:	d506      	bpl.n	800120c <GPIO_Init+0x264>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001206:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800120a:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800120c:	0459      	lsls	r1, r3, #17
 800120e:	d506      	bpl.n	800121e <GPIO_Init+0x276>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001218:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800121c:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800121e:	041c      	lsls	r4, r3, #16
 8001220:	f57f af4d 	bpl.w	80010be <GPIO_Init+0x116>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8001228:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800122c:	6143      	str	r3, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800122e:	e746      	b.n	80010be <GPIO_Init+0x116>
        tmpreg |= (currentmode << pos);
 8001230:	f365 721f 	bfi	r2, r5, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001234:	e6f8      	b.n	8001028 <GPIO_Init+0x80>
      if (currentpin == pos)
 8001236:	07d9      	lsls	r1, r3, #31
 8001238:	d504      	bpl.n	8001244 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800123a:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800123c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001240:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001242:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001244:	0799      	lsls	r1, r3, #30
 8001246:	d505      	bpl.n	8001254 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001248:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800124a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800124e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001252:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001254:	0759      	lsls	r1, r3, #29
 8001256:	d505      	bpl.n	8001264 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001258:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800125a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800125e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001262:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001264:	0719      	lsls	r1, r3, #28
 8001266:	d505      	bpl.n	8001274 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001268:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800126a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800126e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001272:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001274:	06d9      	lsls	r1, r3, #27
 8001276:	d505      	bpl.n	8001284 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001278:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800127a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800127e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001282:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001284:	0699      	lsls	r1, r3, #26
 8001286:	d505      	bpl.n	8001294 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001288:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800128a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800128e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001292:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001294:	0659      	lsls	r1, r3, #25
 8001296:	d505      	bpl.n	80012a4 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001298:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800129a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800129e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012a2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80012a4:	0619      	lsls	r1, r3, #24
 80012a6:	f57f aebf 	bpl.w	8001028 <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012aa:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80012ac:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012b0:	6141      	str	r1, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012b2:	e6b9      	b.n	8001028 <GPIO_Init+0x80>

080012b4 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80012b4:	6880      	ldr	r0, [r0, #8]
}
 80012b6:	b280      	uxth	r0, r0
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80012bc:	68c0      	ldr	r0, [r0, #12]
}
 80012be:	b280      	uxth	r0, r0
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80012c4:	6101      	str	r1, [r0, #16]
}
 80012c6:	4770      	bx	lr

080012c8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80012c8:	6141      	str	r1, [r0, #20]
}
 80012ca:	4770      	bx	lr

080012cc <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80012cc:	b10a      	cbz	r2, 80012d2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ce:	6101      	str	r1, [r0, #16]
 80012d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80012d2:	6141      	str	r1, [r0, #20]
  }
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80012d8:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012dc:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80012e0:	bfb4      	ite	lt
 80012e2:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80012e4:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012e6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80012ea:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80012ec:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012ee:	d01f      	beq.n	8001330 <GPIO_PinRemapConfig+0x58>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80012f0:	02c2      	lsls	r2, r0, #11
 80012f2:	d514      	bpl.n	800131e <GPIO_PinRemapConfig+0x46>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012f4:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80012f6:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012fa:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80012fc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001300:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8001304:	b121      	cbz	r1, 8001310 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001306:	0d42      	lsrs	r2, r0, #21
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	fa04 f202 	lsl.w	r2, r4, r2
 800130e:	4313      	orrs	r3, r2
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001312:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 8001314:	bfb4      	ite	lt
 8001316:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001318:	6053      	strge	r3, [r2, #4]
  }  
}
 800131a:	bc30      	pop	{r4, r5}
 800131c:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800131e:	0d42      	lsrs	r2, r0, #21
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	fa04 f202 	lsl.w	r2, r4, r2
 8001326:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800132a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800132e:	e7e9      	b.n	8001304 <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001330:	4d03      	ldr	r5, [pc, #12]	; (8001340 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001332:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001336:	686a      	ldr	r2, [r5, #4]
 8001338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133c:	606a      	str	r2, [r5, #4]
 800133e:	e7e1      	b.n	8001304 <GPIO_PinRemapConfig+0x2c>
 8001340:	40010000 	.word	0x40010000

08001344 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001344:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001346:	240f      	movs	r4, #15
 8001348:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 800134c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001350:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001354:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001358:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800135a:	0089      	lsls	r1, r1, #2
 800135c:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800135e:	ea22 0204 	bic.w	r2, r2, r4
 8001362:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	fa00 f101 	lsl.w	r1, r0, r1
 800136a:	4311      	orrs	r1, r2
}
 800136c:	bc10      	pop	{r4}
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800136e:	6099      	str	r1, [r3, #8]
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop

08001374 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001374:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <RCC_GetClocksFreq+0x7c>)
{
 8001376:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001378:	6853      	ldr	r3, [r2, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800137e:	2b08      	cmp	r3, #8
 8001380:	d020      	beq.n	80013c4 <RCC_GetClocksFreq+0x50>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <RCC_GetClocksFreq+0x80>)
 8001384:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <RCC_GetClocksFreq+0x7c>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001388:	4c1b      	ldr	r4, [pc, #108]	; (80013f8 <RCC_GetClocksFreq+0x84>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800138a:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 800138c:	4d1b      	ldr	r5, [pc, #108]	; (80013fc <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
 800138e:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001392:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001394:	40cb      	lsrs	r3, r1
 8001396:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001398:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 800139a:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 800139e:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013a0:	fa23 f101 	lsr.w	r1, r3, r1
 80013a4:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80013a6:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 80013a8:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 80013ac:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013ae:	40cb      	lsrs	r3, r1
 80013b0:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80013b2:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 80013b4:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80013b8:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 80013ba:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80013bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80013c0:	6103      	str	r3, [r0, #16]
}
 80013c2:	4770      	bx	lr
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80013c4:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80013c6:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80013c8:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80013cc:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80013ce:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80013d2:	d507      	bpl.n	80013e4 <RCC_GetClocksFreq+0x70>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80013d4:	6852      	ldr	r2, [r2, #4]
 80013d6:	0392      	lsls	r2, r2, #14
 80013d8:	d404      	bmi.n	80013e4 <RCC_GetClocksFreq+0x70>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <RCC_GetClocksFreq+0x80>)
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	6003      	str	r3, [r0, #0]
 80013e2:	e7d0      	b.n	8001386 <RCC_GetClocksFreq+0x12>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <RCC_GetClocksFreq+0x8c>)
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	6003      	str	r3, [r0, #0]
 80013ec:	e7cb      	b.n	8001386 <RCC_GetClocksFreq+0x12>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000000 	.word	0x20000000
 8001400:	003d0900 	.word	0x003d0900

08001404 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <RCC_APB2PeriphClockCmd+0x14>)
 8001406:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8001408:	b111      	cbz	r1, 8001410 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 800140a:	4318      	orrs	r0, r3
 800140c:	6190      	str	r0, [r2, #24]
 800140e:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001410:	ea23 0000 	bic.w	r0, r3, r0
 8001414:	6190      	str	r0, [r2, #24]
  }
}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000

0800141c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 800141e:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001420:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 8001422:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001424:	d012      	beq.n	800144c <TIM_TimeBaseInit+0x30>
 8001426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800142a:	4290      	cmp	r0, r2
 800142c:	d00e      	beq.n	800144c <TIM_TimeBaseInit+0x30>
 800142e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001432:	d00b      	beq.n	800144c <TIM_TimeBaseInit+0x30>
 8001434:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001438:	4290      	cmp	r0, r2
 800143a:	d007      	beq.n	800144c <TIM_TimeBaseInit+0x30>
 800143c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001440:	4290      	cmp	r0, r2
 8001442:	d003      	beq.n	800144c <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001444:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001448:	4290      	cmp	r0, r2
 800144a:	d103      	bne.n	8001454 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800144c:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800144e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001452:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <TIM_TimeBaseInit+0xa4>)
 8001456:	4290      	cmp	r0, r2
 8001458:	d017      	beq.n	800148a <TIM_TimeBaseInit+0x6e>
 800145a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800145e:	4290      	cmp	r0, r2
 8001460:	d013      	beq.n	800148a <TIM_TimeBaseInit+0x6e>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001462:	88ca      	ldrh	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001468:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800146a:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <TIM_TimeBaseInit+0xa0>)
{
 800146e:	b430      	push	{r4, r5}
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001470:	888d      	ldrh	r5, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001472:	880c      	ldrh	r4, [r1, #0]
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001474:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8001476:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001478:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800147a:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800147c:	d10d      	bne.n	800149a <TIM_TimeBaseInit+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800147e:	7a0b      	ldrb	r3, [r1, #8]
 8001480:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001482:	2301      	movs	r3, #1
}
 8001484:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001486:	8283      	strh	r3, [r0, #20]
}
 8001488:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 800148a:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800148c:	888b      	ldrh	r3, [r1, #4]
 800148e:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001490:	880b      	ldrh	r3, [r1, #0]
 8001492:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001494:	2301      	movs	r3, #1
 8001496:	8283      	strh	r3, [r0, #20]
 8001498:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <TIM_TimeBaseInit+0xa8>)
 800149c:	4298      	cmp	r0, r3
 800149e:	d0ee      	beq.n	800147e <TIM_TimeBaseInit+0x62>
 80014a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d0ea      	beq.n	800147e <TIM_TimeBaseInit+0x62>
 80014a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ac:	4298      	cmp	r0, r3
 80014ae:	d0e6      	beq.n	800147e <TIM_TimeBaseInit+0x62>
 80014b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d0e2      	beq.n	800147e <TIM_TimeBaseInit+0x62>
 80014b8:	e7e3      	b.n	8001482 <TIM_TimeBaseInit+0x66>
 80014ba:	bf00      	nop
 80014bc:	40012c00 	.word	0x40012c00
 80014c0:	40001000 	.word	0x40001000
 80014c4:	40013400 	.word	0x40013400

080014c8 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80014c8:	8c02      	ldrh	r2, [r0, #32]
{
 80014ca:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	0412      	lsls	r2, r2, #16
 80014d2:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014d4:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80014d6:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 80014d8:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014da:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80014dc:	f023 0302 	bic.w	r3, r3, #2
  tmpcr2 =  TIMx->CR2;
 80014e0:	8882      	ldrh	r2, [r0, #4]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80014e2:	041b      	lsls	r3, r3, #16
  tmpccmrx = TIMx->CCMR1;
 80014e4:	8b04      	ldrh	r4, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014e6:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80014e8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014ea:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80014ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80014f0:	4d17      	ldr	r5, [pc, #92]	; (8001550 <TIM_OC1Init+0x88>)
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014f2:	880e      	ldrh	r6, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80014f4:	0424      	lsls	r4, r4, #16
 80014f6:	0c24      	lsrs	r4, r4, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80014f8:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014fa:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 80014fc:	b292      	uxth	r2, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014fe:	ea44 0406 	orr.w	r4, r4, r6
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001502:	d00f      	beq.n	8001524 <TIM_OC1Init+0x5c>
 8001504:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001508:	42a8      	cmp	r0, r5
 800150a:	d00b      	beq.n	8001524 <TIM_OC1Init+0x5c>
 800150c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001510:	42a8      	cmp	r0, r5
 8001512:	d007      	beq.n	8001524 <TIM_OC1Init+0x5c>
 8001514:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001518:	42a8      	cmp	r0, r5
 800151a:	d003      	beq.n	8001524 <TIM_OC1Init+0x5c>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800151c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001520:	42a8      	cmp	r0, r5
 8001522:	d10e      	bne.n	8001542 <TIM_OC1Init+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001524:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001526:	898d      	ldrh	r5, [r1, #12]
 8001528:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800152a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800152e:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001530:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001534:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001536:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001538:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800153c:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800153e:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001540:	b292      	uxth	r2, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001542:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 8001544:	8082      	strh	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001546:	8304      	strh	r4, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001548:	8681      	strh	r1, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCER = tmpccer;
 800154c:	8403      	strh	r3, [r0, #32]
}
 800154e:	4770      	bx	lr
 8001550:	40012c00 	.word	0x40012c00

08001554 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001554:	2300      	movs	r3, #0
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	6003      	str	r3, [r0, #0]
 800155c:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800155e:	7203      	strb	r3, [r0, #8]
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001564:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001566:	b121      	cbz	r1, 8001572 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8001568:	b29b      	uxth	r3, r3
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	8003      	strh	r3, [r0, #0]
 8001570:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	8003      	strh	r3, [r0, #0]
  }
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001580:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001584:	b139      	cbz	r1, 8001596 <TIM_CtrlPWMOutputs+0x16>
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800158a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800158e:	b29b      	uxth	r3, r3
 8001590:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001594:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001596:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800159a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }  
}
 800159e:	4770      	bx	lr

080015a0 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80015a0:	8983      	ldrh	r3, [r0, #12]
 80015a2:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 80015a4:	b112      	cbz	r2, 80015ac <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 80015a6:	4319      	orrs	r1, r3
 80015a8:	8181      	strh	r1, [r0, #12]
 80015aa:	4770      	bx	lr
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80015ac:	ea23 0101 	bic.w	r1, r3, r1
 80015b0:	8181      	strh	r1, [r0, #12]
  }
}
 80015b2:	4770      	bx	lr

080015b4 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80015b4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80015b6:	f023 0308 	bic.w	r3, r3, #8
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80015be:	430b      	orrs	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80015c0:	8303      	strh	r3, [r0, #24]
}
 80015c2:	4770      	bx	lr

080015c4 <TIM_ClearITPendingBit>:
 80015c4:	43c9      	mvns	r1, r1
 80015c6:	b289      	uxth	r1, r1
 80015c8:	8201      	strh	r1, [r0, #16]
 80015ca:	4770      	bx	lr

080015cc <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	460d      	mov	r5, r1
 80015d0:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015d2:	8a03      	ldrh	r3, [r0, #16]
 80015d4:	88ca      	ldrh	r2, [r1, #6]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015dc:	4313      	orrs	r3, r2
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 80015de:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80015e0:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015e2:	8982      	ldrh	r2, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015e4:	88ae      	ldrh	r6, [r5, #4]
 80015e6:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 80015ea:	f023 030c 	bic.w	r3, r3, #12
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	8928      	ldrh	r0, [r5, #8]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	896a      	ldrh	r2, [r5, #10]
 80015f6:	4333      	orrs	r3, r6
 80015f8:	4303      	orrs	r3, r0
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015fe:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001600:	8aa3      	ldrh	r3, [r4, #20]
{
 8001602:	b086      	sub	sp, #24
  tmpreg = USARTx->CR3;
 8001604:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800160a:	430b      	orrs	r3, r1
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800160c:	a801      	add	r0, sp, #4
  USARTx->CR3 = (uint16_t)tmpreg;
 800160e:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001610:	f7ff feb0 	bl	8001374 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001614:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
  if (usartxbase == USART1_BASE)
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <USART_Init+0xb4>)
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800161a:	89a2      	ldrh	r2, [r4, #12]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800161c:	4284      	cmp	r4, r0
 800161e:	bf08      	it	eq
 8001620:	460b      	moveq	r3, r1
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001622:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001626:	682a      	ldr	r2, [r5, #0]
 8001628:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800162c:	bf14      	ite	ne
 800162e:	0052      	lslne	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001630:	0092      	lsleq	r2, r2, #2
 8001632:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001636:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 800163a:	2264      	movs	r2, #100	; 0x64
 800163c:	4811      	ldr	r0, [pc, #68]	; (8001684 <USART_Init+0xb8>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800163e:	89a5      	ldrh	r5, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8001640:	fba0 6103 	umull	r6, r1, r0, r3
 8001644:	0949      	lsrs	r1, r1, #5
 8001646:	fb02 3311 	mls	r3, r2, r1, r3
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800164a:	042a      	lsls	r2, r5, #16
  tmpreg = (integerdivider / 100) << 4;
 800164c:	ea4f 1101 	mov.w	r1, r1, lsl #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001650:	d40a      	bmi.n	8001668 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	3332      	adds	r3, #50	; 0x32
 8001656:	fba0 2303 	umull	r2, r3, r0, r3
 800165a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800165e:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001660:	b29b      	uxth	r3, r3
 8001662:	8123      	strh	r3, [r4, #8]
}
 8001664:	b006      	add	sp, #24
 8001666:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	3332      	adds	r3, #50	; 0x32
 800166c:	fba0 2303 	umull	r2, r3, r0, r3
 8001670:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8001674:	ea42 0301 	orr.w	r3, r2, r1
  USARTx->BRR = (uint16_t)tmpreg;
 8001678:	b29b      	uxth	r3, r3
 800167a:	8123      	strh	r3, [r4, #8]
}
 800167c:	b006      	add	sp, #24
 800167e:	bd70      	pop	{r4, r5, r6, pc}
 8001680:	40013800 	.word	0x40013800
 8001684:	51eb851f 	.word	0x51eb851f

08001688 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001688:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800168a:	b121      	cbz	r1, 8001696 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 800168c:	b29b      	uxth	r3, r3
 800168e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001692:	8183      	strh	r3, [r0, #12]
 8001694:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	8183      	strh	r3, [r0, #12]
  }
}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop

080016a4 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 80016a4:	2301      	movs	r3, #1
{
 80016a6:	b410      	push	{r4}
  itpos = USART_IT & IT_Mask;
 80016a8:	f001 041f 	and.w	r4, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80016ac:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80016b0:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 80016b2:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80016b6:	d00f      	beq.n	80016d8 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80016b8:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 80016ba:	bf0c      	ite	eq
 80016bc:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80016be:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 80016c0:	b122      	cbz	r2, 80016cc <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80016c2:	6802      	ldr	r2, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80016c4:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase  |= itmask;
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6003      	str	r3, [r0, #0]
}
 80016ca:	4770      	bx	lr
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80016cc:	6802      	ldr	r2, [r0, #0]
}
 80016ce:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80016d0:	ea22 0303 	bic.w	r3, r2, r3
 80016d4:	6003      	str	r3, [r0, #0]
}
 80016d6:	4770      	bx	lr
    usartxbase += 0x0C;
 80016d8:	300c      	adds	r0, #12
 80016da:	e7f1      	b.n	80016c0 <USART_ITConfig+0x1c>

080016dc <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80016dc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80016e0:	8081      	strh	r1, [r0, #4]
}
 80016e2:	4770      	bx	lr

080016e4 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 80016e4:	b510      	push	{r4, lr}
    COOLANT_MIST_DDR |= (1 << COOLANT_MIST_BIT);
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 80016e6:	2101      	movs	r1, #1
{
 80016e8:	b082      	sub	sp, #8
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 80016ea:	4c0f      	ldr	r4, [pc, #60]	; (8001728 <coolant_init+0x44>)
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 80016ec:	2008      	movs	r0, #8
 80016ee:	f7ff fe89 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <coolant_init+0x48>)
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 80016f4:	4620      	mov	r0, r4
 80016f6:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 80016f8:	9301      	str	r3, [sp, #4]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 80016fa:	f7ff fc55 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 80016fe:	2101      	movs	r1, #1
 8001700:	2008      	movs	r0, #8
 8001702:	f7ff fe7f 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <coolant_init+0x4c>)
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001708:	4620      	mov	r0, r4
 800170a:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 800170c:	9301      	str	r3, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 800170e:	f7ff fc4b 	bl	8000fa8 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001712:	4620      	mov	r0, r4
 8001714:	2120      	movs	r1, #32
 8001716:	f7ff fdd7 	bl	80012c8 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 800171a:	4620      	mov	r0, r4
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	f7ff fdd3 	bl	80012c8 <GPIO_ResetBits>
}
 8001722:	b002      	add	sp, #8
 8001724:	bd10      	pop	{r4, pc}
 8001726:	bf00      	nop
 8001728:	40010c00 	.word	0x40010c00
 800172c:	10030020 	.word	0x10030020
 8001730:	10030040 	.word	0x10030040

08001734 <coolant_get_state>:
{
 8001734:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <coolant_get_state+0x20>)
 8001738:	f7ff fdc0 	bl	80012bc <GPIO_ReadOutputData>
 800173c:	4604      	mov	r4, r0
      if (bit_istrue(
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <coolant_get_state+0x20>)
 8001740:	f7ff fdbc 	bl	80012bc <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001744:	f3c4 1440 	ubfx	r4, r4, #5, #1
      if (bit_istrue(
 8001748:	0643      	lsls	r3, r0, #25
      cl_state |= COOLANT_STATE_MIST;
 800174a:	bf48      	it	mi
 800174c:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001750:	4620      	mov	r0, r4
 8001752:	bd10      	pop	{r4, pc}
 8001754:	40010c00 	.word	0x40010c00

08001758 <coolant_stop>:
{
 8001758:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800175a:	4c05      	ldr	r4, [pc, #20]	; (8001770 <coolant_stop+0x18>)
 800175c:	2120      	movs	r1, #32
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fdb2 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001764:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	f7ff bdac 	b.w	80012c8 <GPIO_ResetBits>
 8001770:	40010c00 	.word	0x40010c00

08001774 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001774:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001776:	4d10      	ldr	r5, [pc, #64]	; (80017b8 <coolant_set_state+0x44>)
 8001778:	786b      	ldrb	r3, [r5, #1]
 800177a:	b93b      	cbnz	r3, 800178c <coolant_set_state+0x18>
  
  if (mode == COOLANT_DISABLE) {
 800177c:	4604      	mov	r4, r0
 800177e:	b130      	cbz	r0, 800178e <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001780:	0642      	lsls	r2, r0, #25
 8001782:	d40d      	bmi.n	80017a0 <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001784:	0623      	lsls	r3, r4, #24
 8001786:	d411      	bmi.n	80017ac <coolant_set_state+0x38>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001788:	2300      	movs	r3, #0
 800178a:	732b      	strb	r3, [r5, #12]
}
 800178c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800178e:	2120      	movs	r1, #32
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <coolant_set_state+0x48>)
 8001792:	f7ff fd99 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <coolant_set_state+0x48>)
 800179a:	f7ff fd95 	bl	80012c8 <GPIO_ResetBits>
}
 800179e:	e7f3      	b.n	8001788 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80017a0:	2120      	movs	r1, #32
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <coolant_set_state+0x48>)
 80017a4:	f7ff fd8e 	bl	80012c4 <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE) {
 80017a8:	0623      	lsls	r3, r4, #24
 80017aa:	d5ed      	bpl.n	8001788 <coolant_set_state+0x14>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <coolant_set_state+0x48>)
 80017b0:	f7ff fd88 	bl	80012c4 <GPIO_SetBits>
 80017b4:	e7e8      	b.n	8001788 <coolant_set_state+0x14>
 80017b6:	bf00      	nop
 80017b8:	20001378 	.word	0x20001378
 80017bc:	40010c00 	.word	0x40010c00

080017c0 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 80017c2:	4d12      	ldr	r5, [pc, #72]	; (800180c <coolant_sync+0x4c>)
 80017c4:	782b      	ldrb	r3, [r5, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d00b      	beq.n	80017e2 <coolant_sync+0x22>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 80017ca:	4604      	mov	r4, r0
 80017cc:	f004 f84e 	bl	800586c <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 80017d0:	786b      	ldrb	r3, [r5, #1]
 80017d2:	b933      	cbnz	r3, 80017e2 <coolant_sync+0x22>
  if (mode == COOLANT_DISABLE) {
 80017d4:	b15c      	cbz	r4, 80017ee <coolant_sync+0x2e>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 80017d6:	0662      	lsls	r2, r4, #25
 80017d8:	d404      	bmi.n	80017e4 <coolant_sync+0x24>
      if (mode & COOLANT_MIST_ENABLE) {
 80017da:	0623      	lsls	r3, r4, #24
 80017dc:	d410      	bmi.n	8001800 <coolant_sync+0x40>
  sys.report_ovr_counter = 0; // Set to report change immediately
 80017de:	2300      	movs	r3, #0
 80017e0:	732b      	strb	r3, [r5, #12]
  coolant_set_state(mode);
}
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80017e4:	2120      	movs	r1, #32
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <coolant_sync+0x50>)
 80017e8:	f7ff fd6c 	bl	80012c4 <GPIO_SetBits>
 80017ec:	e7f5      	b.n	80017da <coolant_sync+0x1a>
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80017ee:	2120      	movs	r1, #32
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <coolant_sync+0x50>)
 80017f2:	f7ff fd69 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <coolant_sync+0x50>)
 80017fa:	f7ff fd65 	bl	80012c8 <GPIO_ResetBits>
}
 80017fe:	e7ee      	b.n	80017de <coolant_sync+0x1e>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <coolant_sync+0x50>)
 8001804:	f7ff fd5e 	bl	80012c4 <GPIO_SetBits>
 8001808:	e7e9      	b.n	80017de <coolant_sync+0x1e>
 800180a:	bf00      	nop
 800180c:	20001378 	.word	0x20001378
 8001810:	40010c00 	.word	0x40010c00

08001814 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001814:	b410      	push	{r4}
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;
 8001816:	4c0d      	ldr	r4, [pc, #52]	; (800184c <eeprom_init+0x38>)
 8001818:	4623      	mov	r3, r4
 800181a:	f1c4 6100 	rsb	r1, r4, #134217728	; 0x8000000
 800181e:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8001822:	f504 6080 	add.w	r0, r4, #1024	; 0x400

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001826:	185a      	adds	r2, r3, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	f803 2b01 	strb.w	r2, [r3], #1
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 800182e:	4283      	cmp	r3, r0
 8001830:	d1f9      	bne.n	8001826 <eeprom_init+0x12>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001832:	7823      	ldrb	r3, [r4, #0]
 8001834:	2b0a      	cmp	r3, #10
 8001836:	d006      	beq.n	8001846 <eeprom_init+0x32>
 8001838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183c:	21ff      	movs	r1, #255	; 0xff
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001840:	bc10      	pop	{r4}
 8001842:	f008 ba63 	b.w	8009d0c <memset>
 8001846:	bc10      	pop	{r4}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000e88 	.word	0x20000e88

08001850 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <eeprom_get_char+0x8>)
#endif
}
 8001852:	5c18      	ldrb	r0, [r3, r0]
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000e88 	.word	0x20000e88

0800185c <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 800185c:	4b01      	ldr	r3, [pc, #4]	; (8001864 <eeprom_put_char+0x8>)
 800185e:	5419      	strb	r1, [r3, r0]
#endif
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000e88 	.word	0x20000e88

08001868 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800186c:	4607      	mov	r7, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 800186e:	2a00      	cmp	r2, #0
 8001870:	d03c      	beq.n	80018ec <memcpy_to_eeprom_with_checksum+0x84>
  unsigned char checksum = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001900 <memcpy_to_eeprom_with_checksum+0x98>
 8001878:	1e44      	subs	r4, r0, #1
 800187a:	4444      	add	r4, r8
 800187c:	188e      	adds	r6, r1, r2
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
 800187e:	f811 5b01 	ldrb.w	r5, [r1], #1
    checksum = (checksum << 1) || (checksum >> 7);
 8001882:	bb63      	cbnz	r3, 80018de <memcpy_to_eeprom_with_checksum+0x76>
    checksum += *source;
 8001884:	eb05 13d3 	add.w	r3, r5, r3, lsr #7
  for(; size > 0; size--) { 
 8001888:	42b1      	cmp	r1, r6
    checksum += *source;
 800188a:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 800188c:	f804 5f01 	strb.w	r5, [r4, #1]!
  for(; size > 0; size--) { 
 8001890:	d1f5      	bne.n	800187e <memcpy_to_eeprom_with_checksum+0x16>
 8001892:	4417      	add	r7, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <memcpy_to_eeprom_with_checksum+0x8c>)
	EE_Buffer[addr] = new_value;
 8001896:	f808 3007 	strb.w	r3, [r8, r7]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 800189a:	f7ff fab9 	bl	8000e10 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 800189e:	2804      	cmp	r0, #4
 80018a0:	d11b      	bne.n	80018da <memcpy_to_eeprom_with_checksum+0x72>
		if (*pBuffer != 0xffff)
 80018a2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80018a6:	4c14      	ldr	r4, [pc, #80]	; (80018f8 <memcpy_to_eeprom_with_checksum+0x90>)
 80018a8:	4e14      	ldr	r6, [pc, #80]	; (80018fc <memcpy_to_eeprom_with_checksum+0x94>)
 80018aa:	1ea5      	subs	r5, r4, #2
 80018ac:	f504 6980 	add.w	r9, r4, #1024	; 0x400
 80018b0:	eba6 0608 	sub.w	r6, r6, r8
 80018b4:	f834 1c04 	ldrh.w	r1, [r4, #-4]
 80018b8:	1970      	adds	r0, r6, r5
 80018ba:	42b9      	cmp	r1, r7
 80018bc:	d001      	beq.n	80018c2 <memcpy_to_eeprom_with_checksum+0x5a>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 80018be:	f7ff fb0f 	bl	8000ee0 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 80018c2:	8829      	ldrh	r1, [r5, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 80018c4:	1930      	adds	r0, r6, r4
		if (*pBuffer != 0xffff)
 80018c6:	42b9      	cmp	r1, r7
 80018c8:	f105 0504 	add.w	r5, r5, #4
 80018cc:	f104 0404 	add.w	r4, r4, #4
 80018d0:	d001      	beq.n	80018d6 <memcpy_to_eeprom_with_checksum+0x6e>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 80018d2:	f7ff fb05 	bl	8000ee0 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 80018d6:	45a1      	cmp	r9, r4
 80018d8:	d1ec      	bne.n	80018b4 <memcpy_to_eeprom_with_checksum+0x4c>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
#endif
#endif
}
 80018da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    checksum += *source;
 80018de:	1c6b      	adds	r3, r5, #1
  for(; size > 0; size--) { 
 80018e0:	42b1      	cmp	r1, r6
	EE_Buffer[addr] = new_value;
 80018e2:	f804 5f01 	strb.w	r5, [r4, #1]!
    checksum += *source;
 80018e6:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 80018e8:	d1c9      	bne.n	800187e <memcpy_to_eeprom_with_checksum+0x16>
 80018ea:	e7d2      	b.n	8001892 <memcpy_to_eeprom_with_checksum+0x2a>
  unsigned char checksum = 0;
 80018ec:	4613      	mov	r3, r2
 80018ee:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8001900 <memcpy_to_eeprom_with_checksum+0x98>
 80018f2:	e7cf      	b.n	8001894 <memcpy_to_eeprom_with_checksum+0x2c>
 80018f4:	0801fc00 	.word	0x0801fc00
 80018f8:	20000e8c 	.word	0x20000e8c
 80018fc:	0801fbfe 	.word	0x0801fbfe
 8001900:	20000e88 	.word	0x20000e88

08001904 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001904:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001906:	b1f2      	cbz	r2, 8001946 <memcpy_from_eeprom_with_checksum+0x42>
  unsigned char data, checksum = 0;
 8001908:	2400      	movs	r4, #0
 800190a:	4f10      	ldr	r7, [pc, #64]	; (800194c <memcpy_from_eeprom_with_checksum+0x48>)
 800190c:	1e4d      	subs	r5, r1, #1
 800190e:	443d      	add	r5, r7
 8001910:	1886      	adds	r6, r0, r2
	return EE_Buffer[addr];
 8001912:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001916:	b974      	cbnz	r4, 8001936 <memcpy_from_eeprom_with_checksum+0x32>
    checksum += data;    
    *(destination++) = data; 
 8001918:	f800 3b01 	strb.w	r3, [r0], #1
    checksum += data;    
 800191c:	eb03 14d4 	add.w	r4, r3, r4, lsr #7
  for(; size > 0; size--) { 
 8001920:	42b0      	cmp	r0, r6
    checksum += data;    
 8001922:	b2e4      	uxtb	r4, r4
  for(; size > 0; size--) { 
 8001924:	d1f5      	bne.n	8001912 <memcpy_from_eeprom_with_checksum+0xe>
 8001926:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001928:	5c78      	ldrb	r0, [r7, r1]
}
 800192a:	1b00      	subs	r0, r0, r4
 800192c:	fab0 f080 	clz	r0, r0
 8001930:	bcf0      	pop	{r4, r5, r6, r7}
 8001932:	0940      	lsrs	r0, r0, #5
 8001934:	4770      	bx	lr
    *(destination++) = data; 
 8001936:	f800 3b01 	strb.w	r3, [r0], #1
  for(; size > 0; size--) { 
 800193a:	4286      	cmp	r6, r0
    checksum += data;    
 800193c:	f103 0301 	add.w	r3, r3, #1
 8001940:	b2dc      	uxtb	r4, r3
  for(; size > 0; size--) { 
 8001942:	d1e6      	bne.n	8001912 <memcpy_from_eeprom_with_checksum+0xe>
 8001944:	e7ef      	b.n	8001926 <memcpy_from_eeprom_with_checksum+0x22>
  unsigned char data, checksum = 0;
 8001946:	4614      	mov	r4, r2
 8001948:	4f00      	ldr	r7, [pc, #0]	; (800194c <memcpy_from_eeprom_with_checksum+0x48>)
 800194a:	e7ed      	b.n	8001928 <memcpy_from_eeprom_with_checksum+0x24>
 800194c:	20000e88 	.word	0x20000e88

08001950 <gc_init>:
#define FAIL(status) return(status);


void gc_init()
{
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001950:	2100      	movs	r1, #0
{
 8001952:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001954:	2244      	movs	r2, #68	; 0x44
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <gc_init+0x24>)
 8001958:	f008 f9d8 	bl	8009d0c <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 800195c:	2000      	movs	r0, #0
 800195e:	4906      	ldr	r1, [pc, #24]	; (8001978 <gc_init+0x28>)
 8001960:	f005 f936 	bl	8006bd0 <settings_read_coord_data>
 8001964:	b100      	cbz	r0, 8001968 <gc_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);

  }
}
 8001966:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001968:	2007      	movs	r0, #7
}
 800196a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 800196e:	f004 b87b 	b.w	8005a68 <report_status_message>
 8001972:	bf00      	nop
 8001974:	20001288 	.word	0x20001288
 8001978:	200012b0 	.word	0x200012b0

0800197c <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 800197c:	4901      	ldr	r1, [pc, #4]	; (8001984 <gc_sync_position+0x8>)
 800197e:	4802      	ldr	r0, [pc, #8]	; (8001988 <gc_sync_position+0xc>)
 8001980:	f006 bf30 	b.w	80087e4 <system_convert_array_steps_to_mpos>
 8001984:	2000139c 	.word	0x2000139c
 8001988:	200012a4 	.word	0x200012a4

0800198c <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	4606      	mov	r6, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001992:	4fd4      	ldr	r7, [pc, #848]	; (8001ce4 <gc_execute_line+0x358>)
 8001994:	2248      	movs	r2, #72	; 0x48
 8001996:	2100      	movs	r1, #0
 8001998:	4638      	mov	r0, r7
{
 800199a:	b099      	sub	sp, #100	; 0x64
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 800199c:	f008 f9b6 	bl	8009d0c <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 80019a0:	4bd1      	ldr	r3, [pc, #836]	; (8001ce8 <gc_execute_line+0x35c>)
 80019a2:	cb03      	ldmia	r3!, {r0, r1}
 80019a4:	881a      	ldrh	r2, [r3, #0]
 80019a6:	789b      	ldrb	r3, [r3, #2]
 80019a8:	f8c7 0001 	str.w	r0, [r7, #1]
 80019ac:	f8c7 1005 	str.w	r1, [r7, #5]
 80019b0:	f8a7 2009 	strh.w	r2, [r7, #9]
 80019b4:	72fb      	strb	r3, [r7, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 80019b6:	7834      	ldrb	r4, [r6, #0]
 80019b8:	2c24      	cmp	r4, #36	; 0x24
 80019ba:	f000 81cb 	beq.w	8001d54 <gc_execute_line+0x3c8>
 80019be:	2300      	movs	r3, #0
 80019c0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  uint32_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 80019c4:	2c00      	cmp	r4, #0
 80019c6:	f000 84c8 	beq.w	800235a <gc_execute_line+0x9ce>
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 80019ca:	9309      	str	r3, [sp, #36]	; 0x24
 80019cc:	f04f 0800 	mov.w	r8, #0
 80019d0:	4645      	mov	r5, r8
 80019d2:	e9cd 8807 	strd	r8, r8, [sp, #28]
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 80019d6:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8001cf0 <gc_execute_line+0x364>
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 80019da:	f8cd 8018 	str.w	r8, [sp, #24]
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 80019de:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	2a19      	cmp	r2, #25
 80019e6:	f200 838b 	bhi.w	8002100 <gc_execute_line+0x774>
    char_counter++;
 80019ea:	3301      	adds	r3, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80019ec:	4630      	mov	r0, r6
 80019ee:	aa11      	add	r2, sp, #68	; 0x44
 80019f0:	f10d 0143 	add.w	r1, sp, #67	; 0x43
    char_counter++;
 80019f4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80019f8:	f002 f9f6 	bl	8003de8 <read_float>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	f000 8399 	beq.w	8002134 <gc_execute_line+0x7a8>
    int_value = truncf(value);
 8001a02:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8001a06:	4658      	mov	r0, fp
 8001a08:	f7ff f946 	bl	8000c98 <__aeabi_f2uiz>
 8001a0c:	4682      	mov	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001a0e:	f7fe fee9 	bl	80007e4 <__aeabi_ui2f>
 8001a12:	4601      	mov	r1, r0
 8001a14:	4658      	mov	r0, fp
 8001a16:	f7fe fe33 	bl	8000680 <__aeabi_fsub>
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	f7fe ff3a 	bl	8000894 <__aeabi_fmul>
 8001a20:	f008 fa98 	bl	8009f54 <lroundf>
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 8001a24:	2c47      	cmp	r4, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001a26:	b282      	uxth	r2, r0
    switch(letter) {
 8001a28:	d072      	beq.n	8001b10 <gc_execute_line+0x184>
 8001a2a:	2c4d      	cmp	r4, #77	; 0x4d
 8001a2c:	d13b      	bne.n	8001aa6 <gc_execute_line+0x11a>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'M' command and its modal group
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	f040 8384 	bne.w	800213c <gc_execute_line+0x7b0>
        switch(int_value) {
 8001a34:	f1ba 0f1e 	cmp.w	sl, #30
 8001a38:	d830      	bhi.n	8001a9c <gc_execute_line+0x110>
 8001a3a:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001a3e:	017d      	.short	0x017d
 8001a40:	017d017d 	.word	0x017d017d
 8001a44:	016f016f 	.word	0x016f016f
 8001a48:	002f016f 	.word	0x002f016f
 8001a4c:	015b015b 	.word	0x015b015b
 8001a50:	002f015b 	.word	0x002f015b
 8001a54:	002f002f 	.word	0x002f002f
 8001a58:	002f002f 	.word	0x002f002f
 8001a5c:	002f002f 	.word	0x002f002f
 8001a60:	002f002f 	.word	0x002f002f
 8001a64:	002f002f 	.word	0x002f002f
 8001a68:	002f002f 	.word	0x002f002f
 8001a6c:	002f002f 	.word	0x002f002f
 8001a70:	002f002f 	.word	0x002f002f
 8001a74:	002f002f 	.word	0x002f002f
 8001a78:	017d002f 	.word	0x017d002f
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001a7c:	9b06      	ldr	r3, [sp, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 86b7 	bne.w	80027f2 <gc_execute_line+0xe66>
            if (int_value == 38){
 8001a84:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001a88:	f887 a001 	strb.w	sl, [r7, #1]
            if (int_value == 38){
 8001a8c:	f040 839c 	bne.w	80021c8 <gc_execute_line+0x83c>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001a90:	f1a2 0314 	sub.w	r3, r2, #20
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b1e      	cmp	r3, #30
 8001a98:	f240 8368 	bls.w	800216c <gc_execute_line+0x7e0>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8001a9c:	2314      	movs	r3, #20

  // TODO: % to denote start of program.

  return(STATUS_OK);

}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	b019      	add	sp, #100	; 0x64
 8001aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch(letter){
 8001aa6:	3c44      	subs	r4, #68	; 0x44
 8001aa8:	2c16      	cmp	r4, #22
 8001aaa:	d8f7      	bhi.n	8001a9c <gc_execute_line+0x110>
 8001aac:	a301      	add	r3, pc, #4	; (adr r3, 8001ab4 <gc_execute_line+0x128>)
 8001aae:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001e67 	.word	0x08001e67
 8001ab8:	08001a9d 	.word	0x08001a9d
 8001abc:	08001e75 	.word	0x08001e75
 8001ac0:	08001a9d 	.word	0x08001a9d
 8001ac4:	08001a9d 	.word	0x08001a9d
 8001ac8:	08001e97 	.word	0x08001e97
 8001acc:	08001eab 	.word	0x08001eab
 8001ad0:	08001ebf 	.word	0x08001ebf
 8001ad4:	08001ed3 	.word	0x08001ed3
 8001ad8:	08001a9d 	.word	0x08001a9d
 8001adc:	08001edd 	.word	0x08001edd
 8001ae0:	08001eeb 	.word	0x08001eeb
 8001ae4:	08001ef9 	.word	0x08001ef9
 8001ae8:	08001a9d 	.word	0x08001a9d
 8001aec:	08001f03 	.word	0x08001f03
 8001af0:	08001f0d 	.word	0x08001f0d
 8001af4:	08001f19 	.word	0x08001f19
 8001af8:	08001a9d 	.word	0x08001a9d
 8001afc:	08001a9d 	.word	0x08001a9d
 8001b00:	08001a9d 	.word	0x08001a9d
 8001b04:	08001f33 	.word	0x08001f33
 8001b08:	08001e31 	.word	0x08001e31
 8001b0c:	08001e53 	.word	0x08001e53
        switch(int_value) {
 8001b10:	f1ba 0f5e 	cmp.w	sl, #94	; 0x5e
 8001b14:	d8c2      	bhi.n	8001a9c <gc_execute_line+0x110>
 8001b16:	a301      	add	r3, pc, #4	; (adr r3, 8001b1c <gc_execute_line+0x190>)
 8001b18:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
 8001b1c:	08001a7d 	.word	0x08001a7d
 8001b20:	08001a7d 	.word	0x08001a7d
 8001b24:	08001a7d 	.word	0x08001a7d
 8001b28:	08001a7d 	.word	0x08001a7d
 8001b2c:	08001d77 	.word	0x08001d77
 8001b30:	08001a9d 	.word	0x08001a9d
 8001b34:	08001a9d 	.word	0x08001a9d
 8001b38:	08001a9d 	.word	0x08001a9d
 8001b3c:	08001a9d 	.word	0x08001a9d
 8001b40:	08001a9d 	.word	0x08001a9d
 8001b44:	08001d91 	.word	0x08001d91
 8001b48:	08001a9d 	.word	0x08001a9d
 8001b4c:	08001a9d 	.word	0x08001a9d
 8001b50:	08001a9d 	.word	0x08001a9d
 8001b54:	08001a9d 	.word	0x08001a9d
 8001b58:	08001a9d 	.word	0x08001a9d
 8001b5c:	08001a9d 	.word	0x08001a9d
 8001b60:	08001dc7 	.word	0x08001dc7
 8001b64:	08001dc7 	.word	0x08001dc7
 8001b68:	08001dc7 	.word	0x08001dc7
 8001b6c:	08001e03 	.word	0x08001e03
 8001b70:	08001e03 	.word	0x08001e03
 8001b74:	08001a9d 	.word	0x08001a9d
 8001b78:	08001a9d 	.word	0x08001a9d
 8001b7c:	08001a9d 	.word	0x08001a9d
 8001b80:	08001a9d 	.word	0x08001a9d
 8001b84:	08001a9d 	.word	0x08001a9d
 8001b88:	08001a9d 	.word	0x08001a9d
 8001b8c:	08001d91 	.word	0x08001d91
 8001b90:	08001a9d 	.word	0x08001a9d
 8001b94:	08001d91 	.word	0x08001d91
 8001b98:	08001a9d 	.word	0x08001a9d
 8001b9c:	08001a9d 	.word	0x08001a9d
 8001ba0:	08001a9d 	.word	0x08001a9d
 8001ba4:	08001a9d 	.word	0x08001a9d
 8001ba8:	08001a9d 	.word	0x08001a9d
 8001bac:	08001a9d 	.word	0x08001a9d
 8001bb0:	08001a9d 	.word	0x08001a9d
 8001bb4:	08001a7d 	.word	0x08001a7d
 8001bb8:	08001a9d 	.word	0x08001a9d
 8001bbc:	08001c99 	.word	0x08001c99
 8001bc0:	08001a9d 	.word	0x08001a9d
 8001bc4:	08001a9d 	.word	0x08001a9d
 8001bc8:	08001e0f 	.word	0x08001e0f
 8001bcc:	08001a9d 	.word	0x08001a9d
 8001bd0:	08001a9d 	.word	0x08001a9d
 8001bd4:	08001a9d 	.word	0x08001a9d
 8001bd8:	08001a9d 	.word	0x08001a9d
 8001bdc:	08001a9d 	.word	0x08001a9d
 8001be0:	08001e0f 	.word	0x08001e0f
 8001be4:	08001a9d 	.word	0x08001a9d
 8001be8:	08001a9d 	.word	0x08001a9d
 8001bec:	08001a9d 	.word	0x08001a9d
 8001bf0:	08001d77 	.word	0x08001d77
 8001bf4:	08001dd3 	.word	0x08001dd3
 8001bf8:	08001dd3 	.word	0x08001dd3
 8001bfc:	08001dd3 	.word	0x08001dd3
 8001c00:	08001dd3 	.word	0x08001dd3
 8001c04:	08001dd3 	.word	0x08001dd3
 8001c08:	08001dd3 	.word	0x08001dd3
 8001c0c:	08001a9d 	.word	0x08001a9d
 8001c10:	08001ddf 	.word	0x08001ddf
 8001c14:	08001a9d 	.word	0x08001a9d
 8001c18:	08001a9d 	.word	0x08001a9d
 8001c1c:	08001a9d 	.word	0x08001a9d
 8001c20:	08001a9d 	.word	0x08001a9d
 8001c24:	08001a9d 	.word	0x08001a9d
 8001c28:	08001a9d 	.word	0x08001a9d
 8001c2c:	08001a9d 	.word	0x08001a9d
 8001c30:	08001a9d 	.word	0x08001a9d
 8001c34:	08001a9d 	.word	0x08001a9d
 8001c38:	08001a9d 	.word	0x08001a9d
 8001c3c:	08001a9d 	.word	0x08001a9d
 8001c40:	08001a9d 	.word	0x08001a9d
 8001c44:	08001a9d 	.word	0x08001a9d
 8001c48:	08001a9d 	.word	0x08001a9d
 8001c4c:	08001a9d 	.word	0x08001a9d
 8001c50:	08001a9d 	.word	0x08001a9d
 8001c54:	08001a9d 	.word	0x08001a9d
 8001c58:	08001a9d 	.word	0x08001a9d
 8001c5c:	08001de9 	.word	0x08001de9
 8001c60:	08001a9d 	.word	0x08001a9d
 8001c64:	08001a9d 	.word	0x08001a9d
 8001c68:	08001a9d 	.word	0x08001a9d
 8001c6c:	08001a9d 	.word	0x08001a9d
 8001c70:	08001a9d 	.word	0x08001a9d
 8001c74:	08001a9d 	.word	0x08001a9d
 8001c78:	08001a9d 	.word	0x08001a9d
 8001c7c:	08001a9d 	.word	0x08001a9d
 8001c80:	08001a9d 	.word	0x08001a9d
 8001c84:	08001df1 	.word	0x08001df1
 8001c88:	08001df1 	.word	0x08001df1
 8001c8c:	08001d91 	.word	0x08001d91
 8001c90:	08001d6b 	.word	0x08001d6b
 8001c94:	08001d6b 	.word	0x08001d6b
    switch(letter) {
 8001c98:	2307      	movs	r3, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	f040 824e 	bne.w	800213c <gc_execute_line+0x7b0>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001ca0:	fa45 f203 	asr.w	r2, r5, r3
 8001ca4:	07d0      	lsls	r0, r2, #31
 8001ca6:	f100 8288 	bmi.w	80021ba <gc_execute_line+0x82e>
        command_words |= bit(word_bit);
 8001caa:	2201      	movs	r2, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	431d      	orrs	r5, r3
 8001cb2:	b2ad      	uxth	r5, r5
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001cb4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001cb8:	5cf4      	ldrb	r4, [r6, r3]
 8001cba:	2c00      	cmp	r4, #0
 8001cbc:	f47f ae8f 	bne.w	80019de <gc_execute_line+0x52>
  if (axis_words) {
 8001cc0:	9b07      	ldr	r3, [sp, #28]
 8001cc2:	b123      	cbz	r3, 8001cce <gc_execute_line+0x342>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001cc4:	9b06      	ldr	r3, [sp, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf08      	it	eq
 8001cca:	2302      	moveq	r3, #2
 8001ccc:	9306      	str	r3, [sp, #24]
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001cce:	f018 0f20 	tst.w	r8, #32
 8001cd2:	f000 813c 	beq.w	8001f4e <gc_execute_line+0x5c2>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <gc_execute_line+0x360>)
 8001cd8:	6a3a      	ldr	r2, [r7, #32]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	f340 8137 	ble.w	8001f4e <gc_execute_line+0x5c2>
 8001ce0:	231b      	movs	r3, #27
 8001ce2:	e6dc      	b.n	8001a9e <gc_execute_line+0x112>
 8001ce4:	200012cc 	.word	0x200012cc
 8001ce8:	20001288 	.word	0x20001288
 8001cec:	00989680 	.word	0x00989680
 8001cf0:	42c80000 	.word	0x42c80000
            switch(int_value) {
 8001cf4:	f1ba 0f08 	cmp.w	sl, #8
 8001cf8:	f000 8216 	beq.w	8002128 <gc_execute_line+0x79c>
 8001cfc:	f1ba 0f09 	cmp.w	sl, #9
 8001d00:	f040 820c 	bne.w	800211c <gc_execute_line+0x790>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0a:	727b      	strb	r3, [r7, #9]
 8001d0c:	230d      	movs	r3, #13
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001d0e:	fa45 f303 	asr.w	r3, r5, r3
 8001d12:	07d9      	lsls	r1, r3, #31
 8001d14:	f100 8251 	bmi.w	80021ba <gc_execute_line+0x82e>
        command_words |= bit(word_bit);
 8001d18:	4315      	orrs	r5, r2
        break;
 8001d1a:	e7cb      	b.n	8001cb4 <gc_execute_line+0x328>
            switch(int_value) {
 8001d1c:	f1ba 0f04 	cmp.w	sl, #4
 8001d20:	f000 81f6 	beq.w	8002110 <gc_execute_line+0x784>
 8001d24:	f1ba 0f05 	cmp.w	sl, #5
 8001d28:	f040 81ec 	bne.w	8002104 <gc_execute_line+0x778>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d32:	72bb      	strb	r3, [r7, #10]
 8001d34:	230c      	movs	r3, #12
 8001d36:	e7ea      	b.n	8001d0e <gc_execute_line+0x382>
            switch(int_value) {
 8001d38:	f1ba 0f00 	cmp.w	sl, #0
 8001d3c:	f000 81da 	beq.w	80020f4 <gc_execute_line+0x768>
 8001d40:	f1ba 0f01 	cmp.w	sl, #1
 8001d44:	f000 80ff 	beq.w	8001f46 <gc_execute_line+0x5ba>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	230b      	movs	r3, #11
 8001d4e:	f887 a008 	strb.w	sl, [r7, #8]
 8001d52:	e7dc      	b.n	8001d0e <gc_execute_line+0x382>
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001d54:	2300      	movs	r3, #0
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001d56:	2201      	movs	r2, #1
 8001d58:	78f4      	ldrb	r4, [r6, #3]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001d5a:	70bb      	strb	r3, [r7, #2]
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001d5c:	707a      	strb	r2, [r7, #1]
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8001d5e:	2303      	movs	r3, #3
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	f000 84e8 	beq.w	8002736 <gc_execute_line+0xdaa>
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001d66:	9209      	str	r2, [sp, #36]	; 0x24
 8001d68:	e630      	b.n	80019cc <gc_execute_line+0x40>
            gc_block.modal.feed_rate = 94 - int_value;
 8001d6a:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
            break;
 8001d6e:	2305      	movs	r3, #5
            gc_block.modal.feed_rate = 94 - int_value;
 8001d70:	f887 a002 	strb.w	sl, [r7, #2]
            break;
 8001d74:	e791      	b.n	8001c9a <gc_execute_line+0x30e>
            gc_block.non_modal_command = int_value;
 8001d76:	fa5f f38a 	uxtb.w	r3, sl
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001d7a:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8001d7e:	703b      	strb	r3, [r7, #0]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001d80:	f000 81b0 	beq.w	80020e4 <gc_execute_line+0x758>
 8001d84:	f1ba 0f1e 	cmp.w	sl, #30
 8001d88:	f000 81ad 	beq.w	80020e6 <gc_execute_line+0x75a>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e784      	b.n	8001c9a <gc_execute_line+0x30e>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	f040 81de 	bne.w	8002152 <gc_execute_line+0x7c6>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001d96:	9b06      	ldr	r3, [sp, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 852a 	bne.w	80027f2 <gc_execute_line+0xe66>
            gc_block.non_modal_command = int_value;
 8001d9e:	fa5f f38a 	uxtb.w	r3, sl
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001da2:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8001da6:	703b      	strb	r3, [r7, #0]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001da8:	f000 8203 	beq.w	80021b2 <gc_execute_line+0x826>
 8001dac:	f1ba 0f1e 	cmp.w	sl, #30
 8001db0:	d003      	beq.n	8001dba <gc_execute_line+0x42e>
 8001db2:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 8001db6:	f040 84e1 	bne.w	800277c <gc_execute_line+0xdf0>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	9206      	str	r2, [sp, #24]
              gc_block.non_modal_command += mantissa;
 8001dbe:	4418      	add	r0, r3
 8001dc0:	7038      	strb	r0, [r7, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e76c      	b.n	8001ca0 <gc_execute_line+0x314>
            gc_block.modal.plane_select = int_value - 17;
 8001dc6:	f1aa 0a11 	sub.w	sl, sl, #17
            break;
 8001dca:	2302      	movs	r3, #2
            gc_block.modal.plane_select = int_value - 17;
 8001dcc:	f887 a005 	strb.w	sl, [r7, #5]
            break;
 8001dd0:	e763      	b.n	8001c9a <gc_execute_line+0x30e>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001dd2:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
            break;
 8001dd6:	2309      	movs	r3, #9
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001dd8:	f887 a007 	strb.w	sl, [r7, #7]
            break;
 8001ddc:	e75d      	b.n	8001c9a <gc_execute_line+0x30e>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	f47f ae5c 	bne.w	8001a9c <gc_execute_line+0x110>
 8001de4:	230a      	movs	r3, #10
 8001de6:	e75b      	b.n	8001ca0 <gc_execute_line+0x314>
            gc_block.modal.motion = int_value;
 8001de8:	2350      	movs	r3, #80	; 0x50
 8001dea:	707b      	strb	r3, [r7, #1]
 8001dec:	2301      	movs	r3, #1
 8001dee:	e754      	b.n	8001c9a <gc_execute_line+0x30e>
            if (mantissa == 0) {
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	f040 81a5 	bne.w	8002140 <gc_execute_line+0x7b4>
              gc_block.modal.distance = int_value - 90;
 8001df6:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f887 a004 	strb.w	sl, [r7, #4]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001e00:	e74e      	b.n	8001ca0 <gc_execute_line+0x314>
            gc_block.modal.units = 21 - int_value;
 8001e02:	f1ca 0a15 	rsb	sl, sl, #21
            break;
 8001e06:	2306      	movs	r3, #6
            gc_block.modal.units = 21 - int_value;
 8001e08:	f887 a003 	strb.w	sl, [r7, #3]
            break;
 8001e0c:	e745      	b.n	8001c9a <gc_execute_line+0x30e>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8001e0e:	9b06      	ldr	r3, [sp, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 84ee 	bne.w	80027f2 <gc_execute_line+0xe66>
            if (int_value == 49) { // G49
 8001e16:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8001e1a:	f000 81d0 	beq.w	80021be <gc_execute_line+0x832>
            } else if (mantissa == 10) { // G43.1
 8001e1e:	2a0a      	cmp	r2, #10
 8001e20:	f47f ae3c 	bne.w	8001a9c <gc_execute_line+0x110>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001e24:	2201      	movs	r2, #1
 8001e26:	71ba      	strb	r2, [r7, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001e28:	2203      	movs	r2, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001e2a:	2308      	movs	r3, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001e2c:	9206      	str	r2, [sp, #24]
 8001e2e:	e737      	b.n	8001ca0 <gc_execute_line+0x314>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8001e30:	9b07      	ldr	r3, [sp, #28]
 8001e32:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	9307      	str	r3, [sp, #28]
 8001e3c:	230b      	movs	r3, #11
 8001e3e:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001e42:	fa48 f303 	asr.w	r3, r8, r3
 8001e46:	07db      	lsls	r3, r3, #31
 8001e48:	f100 8176 	bmi.w	8002138 <gc_execute_line+0x7ac>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8001e4c:	ea44 0808 	orr.w	r8, r4, r8
 8001e50:	e730      	b.n	8001cb4 <gc_execute_line+0x328>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8001e52:	9b07      	ldr	r3, [sp, #28]
 8001e54:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	9307      	str	r3, [sp, #28]
 8001e5e:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
 8001e62:	230c      	movs	r3, #12
 8001e64:	e7ed      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'D': word_bit = WORD_O; gc_block.values.o = int_value;  Motor_DC(int_value); break;
 8001e66:	4650      	mov	r0, sl
 8001e68:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 8001e6c:	f001 fce8 	bl	8003840 <Motor_DC>
        if ( bit(word_bit) & (bit(WORD_F)|bit(WORD_N)|bit(WORD_P)|bit(WORD_T)|bit(WORD_S)) ) {
 8001e70:	2400      	movs	r4, #0
 8001e72:	e7eb      	b.n	8001e4c <gc_execute_line+0x4c0>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8001e74:	2401      	movs	r4, #1
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 b00c 	str.w	fp, [r7, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001e7c:	fa48 f303 	asr.w	r3, r8, r3
 8001e80:	07d8      	lsls	r0, r3, #31
 8001e82:	f100 8159 	bmi.w	8002138 <gc_execute_line+0x7ac>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8001e86:	4658      	mov	r0, fp
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f7fe fea1 	bl	8000bd0 <__aeabi_fcmplt>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0dc      	beq.n	8001e4c <gc_execute_line+0x4c0>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e603      	b.n	8001a9e <gc_execute_line+0x112>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8001e96:	9b08      	ldr	r3, [sp, #32]
 8001e98:	2402      	movs	r4, #2
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	9308      	str	r3, [sp, #32]
 8001ea2:	f8c7 b010 	str.w	fp, [r7, #16]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e7cb      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8001eaa:	9b08      	ldr	r3, [sp, #32]
 8001eac:	2404      	movs	r4, #4
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	9308      	str	r3, [sp, #32]
 8001eb6:	f8c7 b014 	str.w	fp, [r7, #20]
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e7c1      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8001ebe:	9b08      	ldr	r3, [sp, #32]
 8001ec0:	2408      	movs	r4, #8
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	9308      	str	r3, [sp, #32]
 8001eca:	f8c7 b018 	str.w	fp, [r7, #24]
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e7b7      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8001ed2:	2410      	movs	r4, #16
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	f887 a01c 	strb.w	sl, [r7, #28]
 8001eda:	e7b2      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8001edc:	4658      	mov	r0, fp
 8001ede:	f7fe feb5 	bl	8000c4c <__aeabi_f2iz>
 8001ee2:	2420      	movs	r4, #32
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	6238      	str	r0, [r7, #32]
 8001ee8:	e7c8      	b.n	8001e7c <gc_execute_line+0x4f0>
          case 'O': word_bit = WORD_O; gc_block.values.o = int_value; satir_sayisi(1 , int_value);  break;
 8001eea:	4651      	mov	r1, sl
 8001eec:	2001      	movs	r0, #1
 8001eee:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 8001ef2:	f003 fcd7 	bl	80058a4 <satir_sayisi>
 8001ef6:	e7bb      	b.n	8001e70 <gc_execute_line+0x4e4>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8001ef8:	2440      	movs	r4, #64	; 0x40
 8001efa:	2306      	movs	r3, #6
 8001efc:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8001f00:	e7bc      	b.n	8001e7c <gc_execute_line+0x4f0>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8001f02:	2480      	movs	r4, #128	; 0x80
 8001f04:	2307      	movs	r3, #7
 8001f06:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 8001f0a:	e79a      	b.n	8001e42 <gc_execute_line+0x4b6>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8001f0c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001f10:	2308      	movs	r3, #8
 8001f12:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8001f16:	e7b1      	b.n	8001e7c <gc_execute_line+0x4f0>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8001f18:	4658      	mov	r0, fp
 8001f1a:	49bb      	ldr	r1, [pc, #748]	; (8002208 <gc_execute_line+0x87c>)
 8001f1c:	f7fe fe76 	bl	8000c0c <__aeabi_fcmpgt>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	f040 858f 	bne.w	8002a44 <gc_execute_line+0x10b8>
				break;
 8001f26:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001f2a:	2309      	movs	r3, #9
					gc_block.values.t = int_value;
 8001f2c:	f887 a038 	strb.w	sl, [r7, #56]	; 0x38
				break;
 8001f30:	e7a4      	b.n	8001e7c <gc_execute_line+0x4f0>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8001f32:	9b07      	ldr	r3, [sp, #28]
 8001f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	9307      	str	r3, [sp, #28]
 8001f3e:	f8c7 b03c 	str.w	fp, [r7, #60]	; 0x3c
 8001f42:	230a      	movs	r3, #10
 8001f44:	e77d      	b.n	8001e42 <gc_execute_line+0x4b6>
 8001f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f4a:	230b      	movs	r3, #11
 8001f4c:	e6df      	b.n	8001d0e <gc_execute_line+0x382>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 811b 	beq.w	800218c <gc_execute_line+0x800>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8001f56:	f018 0f01 	tst.w	r8, #1
 8001f5a:	f000 83ec 	beq.w	8002736 <gc_execute_line+0xdaa>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d104      	bne.n	8001f6e <gc_execute_line+0x5e2>
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	49a9      	ldr	r1, [pc, #676]	; (800220c <gc_execute_line+0x880>)
 8001f68:	f7fe fc94 	bl	8000894 <__aeabi_fmul>
 8001f6c:	60f8      	str	r0, [r7, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8001f6e:	f418 7f80 	tst.w	r8, #256	; 0x100
 8001f72:	d102      	bne.n	8001f7a <gc_execute_line+0x5ee>
 8001f74:	4ba6      	ldr	r3, [pc, #664]	; (8002210 <gc_execute_line+0x884>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8001f7a:	f897 9000 	ldrb.w	r9, [r7]
 8001f7e:	f1b9 0f04 	cmp.w	r9, #4
 8001f82:	f000 812e 	beq.w	80021e2 <gc_execute_line+0x856>
  switch (gc_block.modal.plane_select) {
 8001f86:	f897 a005 	ldrb.w	sl, [r7, #5]
 8001f8a:	f1ba 0f00 	cmp.w	sl, #0
 8001f8e:	f000 8167 	beq.w	8002260 <gc_execute_line+0x8d4>
 8001f92:	f1ba 0f01 	cmp.w	sl, #1
 8001f96:	f040 811b 	bne.w	80021d0 <gc_execute_line+0x844>
 8001f9a:	2400      	movs	r4, #0
 8001f9c:	f04f 0b02 	mov.w	fp, #2
 8001fa0:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8001fa4:	2605      	movs	r6, #5
 8001fa6:	46da      	mov	sl, fp
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f000 813e 	beq.w	800222c <gc_execute_line+0x8a0>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8001fb0:	9b06      	ldr	r3, [sp, #24]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f000 811e 	beq.w	80021f4 <gc_execute_line+0x868>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8001fb8:	4b96      	ldr	r3, [pc, #600]	; (8002214 <gc_execute_line+0x888>)
 8001fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fbe:	ab12      	add	r3, sp, #72	; 0x48
 8001fc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8001fc4:	05aa      	lsls	r2, r5, #22
 8001fc6:	d50f      	bpl.n	8001fe8 <gc_execute_line+0x65c>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8001fc8:	79f8      	ldrb	r0, [r7, #7]
 8001fca:	2806      	cmp	r0, #6
 8001fcc:	f200 81d7 	bhi.w	800237e <gc_execute_line+0x9f2>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <gc_execute_line+0x884>)
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	4283      	cmp	r3, r0
 8001fd6:	d007      	beq.n	8001fe8 <gc_execute_line+0x65c>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8001fd8:	a912      	add	r1, sp, #72	; 0x48
 8001fda:	f004 fdf9 	bl	8006bd0 <settings_read_coord_data>
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	f000 83f3 	beq.w	80027ca <gc_execute_line+0xe3e>
 8001fe4:	f897 9000 	ldrb.w	r9, [r7]
  switch (gc_block.non_modal_command) {
 8001fe8:	f1b9 0f0a 	cmp.w	r9, #10
 8001fec:	f000 8171 	beq.w	80022d2 <gc_execute_line+0x946>
 8001ff0:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8001ff4:	f000 813b 	beq.w	800226e <gc_execute_line+0x8e2>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 8001ff8:	9b06      	ldr	r3, [sp, #24]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d023      	beq.n	8002046 <gc_execute_line+0x6ba>
        if (axis_words) {
 8001ffe:	9a07      	ldr	r2, [sp, #28]
 8002000:	b30a      	cbz	r2, 8002046 <gc_execute_line+0x6ba>
 8002002:	793b      	ldrb	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8430 	beq.w	800286a <gc_execute_line+0xede>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800200a:	07d0      	lsls	r0, r2, #31
 800200c:	f140 84c0 	bpl.w	8002990 <gc_execute_line+0x1004>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002010:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002014:	f000 83dc 	beq.w	80027d0 <gc_execute_line+0xe44>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002018:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <gc_execute_line+0x884>)
 800201a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800201c:	69d8      	ldr	r0, [r3, #28]
 800201e:	f7fe fb31 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002022:	9b07      	ldr	r3, [sp, #28]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002024:	63f8      	str	r0, [r7, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002026:	079a      	lsls	r2, r3, #30
 8002028:	f100 84bb 	bmi.w	80029a2 <gc_execute_line+0x1016>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800202c:	4b78      	ldr	r3, [pc, #480]	; (8002210 <gc_execute_line+0x884>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	643b      	str	r3, [r7, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002032:	9b07      	ldr	r3, [sp, #28]
 8002034:	075a      	lsls	r2, r3, #29
 8002036:	f140 84be 	bpl.w	80029b6 <gc_execute_line+0x102a>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 800203a:	4b75      	ldr	r3, [pc, #468]	; (8002210 <gc_execute_line+0x884>)
 800203c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800203e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002040:	f7fe fb20 	bl	8000684 <__addsf3>
 8002044:	6478      	str	r0, [r7, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 8002046:	f1b9 0f1e 	cmp.w	r9, #30
 800204a:	f000 8445 	beq.w	80028d8 <gc_execute_line+0xf4c>
 800204e:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002052:	f000 83c5 	beq.w	80027e0 <gc_execute_line+0xe54>
 8002056:	f1b9 0f1c 	cmp.w	r9, #28
 800205a:	f000 83af 	beq.w	80027bc <gc_execute_line+0xe30>
 800205e:	f897 9001 	ldrb.w	r9, [r7, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8002062:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8002066:	f040 83c1 	bne.w	80027ec <gc_execute_line+0xe60>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 800206a:	9b07      	ldr	r3, [sp, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 84e2 	bne.w	8002a36 <gc_execute_line+0x10aa>
 8002072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002074:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002076:	2a00      	cmp	r2, #0
 8002078:	f000 8168 	beq.w	800234c <gc_execute_line+0x9c0>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 800207c:	f028 0821 	bic.w	r8, r8, #33	; 0x21
 8002080:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
 8002084:	9906      	ldr	r1, [sp, #24]
 8002086:	b119      	cbz	r1, 8002090 <gc_execute_line+0x704>
 8002088:	f423 58e0 	bic.w	r8, r3, #7168	; 0x1c00
 800208c:	fa1f f388 	uxth.w	r3, r8
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 816c 	bne.w	800236e <gc_execute_line+0x9e2>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8002096:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800209a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800209c:	2a00      	cmp	r2, #0
 800209e:	f000 817a 	beq.w	8002396 <gc_execute_line+0xa0a>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80020a2:	f025 0549 	bic.w	r5, r5, #73	; 0x49
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	f040 83dc 	bne.w	8002864 <gc_execute_line+0xed8>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 80020ac:	783b      	ldrb	r3, [r7, #0]
 80020ae:	2b35      	cmp	r3, #53	; 0x35
 80020b0:	d002      	beq.n	80020b8 <gc_execute_line+0x72c>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 83d6 	bne.w	8002864 <gc_execute_line+0xed8>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <gc_execute_line+0x884>)
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80020ba:	a815      	add	r0, sp, #84	; 0x54
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80020bc:	7a11      	ldrb	r1, [r2, #8]
 80020be:	7a53      	ldrb	r3, [r2, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 80020c0:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80020c2:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80020c4:	4954      	ldr	r1, [pc, #336]	; (8002218 <gc_execute_line+0x88c>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80020c6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      pl_data->spindle_speed = gc_state.spindle_speed;
 80020ca:	9216      	str	r2, [sp, #88]	; 0x58
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80020cc:	f000 fdf2 	bl	8002cb4 <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 80020d0:	4603      	mov	r3, r0
 80020d2:	2800      	cmp	r0, #0
 80020d4:	f47f ace3 	bne.w	8001a9e <gc_execute_line+0x112>
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <gc_execute_line+0x890>)
 80020da:	4c51      	ldr	r4, [pc, #324]	; (8002220 <gc_execute_line+0x894>)
 80020dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020e2:	e4dc      	b.n	8001a9e <gc_execute_line+0x112>
 80020e4:	4653      	mov	r3, sl
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	f43f ae69 	beq.w	8001dbe <gc_execute_line+0x432>
 80020ec:	2a0a      	cmp	r2, #10
 80020ee:	f43f ae66 	beq.w	8001dbe <gc_execute_line+0x432>
 80020f2:	e4d3      	b.n	8001a9c <gc_execute_line+0x110>
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 80020f4:	2303      	movs	r3, #3
 80020f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020fa:	723b      	strb	r3, [r7, #8]
 80020fc:	230b      	movs	r3, #11
 80020fe:	e606      	b.n	8001d0e <gc_execute_line+0x382>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002100:	2301      	movs	r3, #1
 8002102:	e4cc      	b.n	8001a9e <gc_execute_line+0x112>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8002104:	2310      	movs	r3, #16
 8002106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800210a:	72bb      	strb	r3, [r7, #10]
 800210c:	230c      	movs	r3, #12
 800210e:	e5fe      	b.n	8001d0e <gc_execute_line+0x382>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8002110:	2320      	movs	r3, #32
 8002112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002116:	72bb      	strb	r3, [r7, #10]
 8002118:	230c      	movs	r3, #12
 800211a:	e5f8      	b.n	8001d0e <gc_execute_line+0x382>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	727b      	strb	r3, [r7, #9]
 8002124:	230d      	movs	r3, #13
 8002126:	e5f2      	b.n	8001d0e <gc_execute_line+0x382>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	727b      	strb	r3, [r7, #9]
 8002130:	230d      	movs	r3, #13
 8002132:	e5ec      	b.n	8001d0e <gc_execute_line+0x382>
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8002134:	2302      	movs	r3, #2
 8002136:	e4b2      	b.n	8001a9e <gc_execute_line+0x112>
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002138:	2319      	movs	r3, #25
 800213a:	e4b0      	b.n	8001a9e <gc_execute_line+0x112>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 800213c:	2317      	movs	r3, #23
 800213e:	e4ae      	b.n	8001a9e <gc_execute_line+0x112>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8002140:	2a0a      	cmp	r2, #10
 8002142:	f47f acab 	bne.w	8001a9c <gc_execute_line+0x110>
 8002146:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 800214a:	f43f aca7 	beq.w	8001a9c <gc_execute_line+0x110>
 800214e:	2304      	movs	r3, #4
 8002150:	e5a6      	b.n	8001ca0 <gc_execute_line+0x314>
            gc_block.non_modal_command = int_value;
 8002152:	fa5f f38a 	uxtb.w	r3, sl
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002156:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 800215a:	703b      	strb	r3, [r7, #0]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800215c:	d027      	beq.n	80021ae <gc_execute_line+0x822>
 800215e:	f1ba 0f1e 	cmp.w	sl, #30
 8002162:	d0c3      	beq.n	80020ec <gc_execute_line+0x760>
 8002164:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 8002168:	d0c0      	beq.n	80020ec <gc_execute_line+0x760>
 800216a:	e60f      	b.n	8001d8c <gc_execute_line+0x400>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 800216c:	492d      	ldr	r1, [pc, #180]	; (8002224 <gc_execute_line+0x898>)
 800216e:	fa21 f303 	lsr.w	r3, r1, r3
 8002172:	07dc      	lsls	r4, r3, #31
 8002174:	f57f ac92 	bpl.w	8001a9c <gc_execute_line+0x110>
              gc_block.modal.motion += (mantissa/10)+100;
 8002178:	492b      	ldr	r1, [pc, #172]	; (8002228 <gc_execute_line+0x89c>)
 800217a:	2301      	movs	r3, #1
 800217c:	fba1 1202 	umull	r1, r2, r1, r2
 8002180:	08d2      	lsrs	r2, r2, #3
 8002182:	3a76      	subs	r2, #118	; 0x76
 8002184:	707a      	strb	r2, [r7, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002186:	2202      	movs	r2, #2
 8002188:	9206      	str	r2, [sp, #24]
 800218a:	e589      	b.n	8001ca0 <gc_execute_line+0x314>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 800218c:	78bb      	ldrb	r3, [r7, #2]
 800218e:	2b01      	cmp	r3, #1
 8002190:	f000 80f8 	beq.w	8002384 <gc_execute_line+0x9f8>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <gc_execute_line+0x884>)
 8002196:	7853      	ldrb	r3, [r2, #1]
 8002198:	9309      	str	r3, [sp, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80da 	bne.w	8002354 <gc_execute_line+0x9c8>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80021a0:	f018 0f01 	tst.w	r8, #1
 80021a4:	f47f aedb 	bne.w	8001f5e <gc_execute_line+0x5d2>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80021a8:	6913      	ldr	r3, [r2, #16]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e6df      	b.n	8001f6e <gc_execute_line+0x5e2>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021ae:	4653      	mov	r3, sl
 80021b0:	e79c      	b.n	80020ec <gc_execute_line+0x760>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80021b2:	2201      	movs	r2, #1
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021b4:	4653      	mov	r3, sl
              axis_command = AXIS_COMMAND_NON_MODAL;
 80021b6:	9206      	str	r2, [sp, #24]
 80021b8:	e601      	b.n	8001dbe <gc_execute_line+0x432>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80021ba:	2315      	movs	r3, #21
 80021bc:	e46f      	b.n	8001a9e <gc_execute_line+0x112>
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021be:	2203      	movs	r2, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80021c0:	71bb      	strb	r3, [r7, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021c2:	9206      	str	r2, [sp, #24]
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80021c4:	2308      	movs	r3, #8
 80021c6:	e56b      	b.n	8001ca0 <gc_execute_line+0x314>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 80021c8:	2102      	movs	r1, #2
 80021ca:	2301      	movs	r3, #1
 80021cc:	9106      	str	r1, [sp, #24]
 80021ce:	e564      	b.n	8001c9a <gc_execute_line+0x30e>
  switch (gc_block.modal.plane_select) {
 80021d0:	2402      	movs	r4, #2
 80021d2:	f04f 0b01 	mov.w	fp, #1
      axis_linear = X_AXIS;
 80021d6:	2300      	movs	r3, #0
      axis_0 = Y_AXIS;
 80021d8:	46da      	mov	sl, fp
  switch (gc_block.modal.plane_select) {
 80021da:	2606      	movs	r6, #6
      axis_1 = Z_AXIS;
 80021dc:	940a      	str	r4, [sp, #40]	; 0x28
      axis_linear = X_AXIS;
 80021de:	930b      	str	r3, [sp, #44]	; 0x2c
 80021e0:	e6e2      	b.n	8001fa8 <gc_execute_line+0x61c>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 80021e2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80021e6:	f000 81e1 	beq.w	80025ac <gc_execute_line+0xc20>
    bit_false(value_words,bit(WORD_P));
 80021ea:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 80021ee:	fa1f f888 	uxth.w	r8, r8
 80021f2:	e6c8      	b.n	8001f86 <gc_execute_line+0x5fa>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f47f aede 	bne.w	8001fb8 <gc_execute_line+0x62c>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 80021fc:	9b07      	ldr	r3, [sp, #28]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	f43f aeda 	beq.w	8001fb8 <gc_execute_line+0x62c>
 8002204:	2325      	movs	r3, #37	; 0x25
 8002206:	e44a      	b.n	8001a9e <gc_execute_line+0x112>
 8002208:	437f0000 	.word	0x437f0000
 800220c:	41cb3333 	.word	0x41cb3333
 8002210:	20001288 	.word	0x20001288
 8002214:	200012b0 	.word	0x200012b0
 8002218:	200012cc 	.word	0x200012cc
 800221c:	20001308 	.word	0x20001308
 8002220:	200012a4 	.word	0x200012a4
 8002224:	40100401 	.word	0x40100401
 8002228:	cccccccd 	.word	0xcccccccd
      if (bit_istrue(axis_words,bit(idx)) ) {
 800222c:	9b07      	ldr	r3, [sp, #28]
 800222e:	07db      	lsls	r3, r3, #31
 8002230:	d504      	bpl.n	800223c <gc_execute_line+0x8b0>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002232:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002234:	4997      	ldr	r1, [pc, #604]	; (8002494 <gc_execute_line+0xb08>)
 8002236:	f7fe fb2d 	bl	8000894 <__aeabi_fmul>
 800223a:	63f8      	str	r0, [r7, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 800223c:	9b07      	ldr	r3, [sp, #28]
 800223e:	0798      	lsls	r0, r3, #30
 8002240:	d504      	bpl.n	800224c <gc_execute_line+0x8c0>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002242:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002244:	4993      	ldr	r1, [pc, #588]	; (8002494 <gc_execute_line+0xb08>)
 8002246:	f7fe fb25 	bl	8000894 <__aeabi_fmul>
 800224a:	6438      	str	r0, [r7, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 800224c:	9b07      	ldr	r3, [sp, #28]
 800224e:	0759      	lsls	r1, r3, #29
 8002250:	f57f aeae 	bpl.w	8001fb0 <gc_execute_line+0x624>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002254:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002256:	498f      	ldr	r1, [pc, #572]	; (8002494 <gc_execute_line+0xb08>)
 8002258:	f7fe fb1c 	bl	8000894 <__aeabi_fmul>
 800225c:	6478      	str	r0, [r7, #68]	; 0x44
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 800225e:	e6a7      	b.n	8001fb0 <gc_execute_line+0x624>
  switch (gc_block.modal.plane_select) {
 8002260:	2401      	movs	r4, #1
      axis_linear = Z_AXIS;
 8002262:	2302      	movs	r3, #2
  switch (gc_block.modal.plane_select) {
 8002264:	2603      	movs	r6, #3
 8002266:	46d3      	mov	fp, sl
      axis_1 = Y_AXIS;
 8002268:	940a      	str	r4, [sp, #40]	; 0x28
      axis_linear = Z_AXIS;
 800226a:	930b      	str	r3, [sp, #44]	; 0x2c
 800226c:	e69c      	b.n	8001fa8 <gc_execute_line+0x61c>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800226e:	9b07      	ldr	r3, [sp, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8198 	beq.w	80025a6 <gc_execute_line+0xc1a>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002276:	07d9      	lsls	r1, r3, #31
 8002278:	f100 8260 	bmi.w	800273c <gc_execute_line+0xdb0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <gc_execute_line+0xb0c>)
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002282:	9b07      	ldr	r3, [sp, #28]
 8002284:	079a      	lsls	r2, r3, #30
 8002286:	f100 827e 	bmi.w	8002786 <gc_execute_line+0xdfa>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800228a:	4b83      	ldr	r3, [pc, #524]	; (8002498 <gc_execute_line+0xb0c>)
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002290:	9b07      	ldr	r3, [sp, #28]
 8002292:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8002296:	075b      	lsls	r3, r3, #29
 8002298:	d56c      	bpl.n	8002374 <gc_execute_line+0x9e8>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800229a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800229c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800229e:	f7fe f9f1 	bl	8000684 <__addsf3>
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <gc_execute_line+0xb0c>)
 80022a4:	4601      	mov	r1, r0
 80022a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022a8:	f7fe f9ea 	bl	8000680 <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <gc_execute_line+0xb0c>)
 80022ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022b0:	f7fe f9e6 	bl	8000680 <__aeabi_fsub>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80022b4:	2300      	movs	r3, #0
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80022b6:	6478      	str	r0, [r7, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80022b8:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80022ba:	f897 9001 	ldrb.w	r9, [r7, #1]
 80022be:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80022c2:	f000 83b8 	beq.w	8002a36 <gc_execute_line+0x10aa>
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 80022c6:	9b06      	ldr	r3, [sp, #24]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	f000 8172 	beq.w	80025b2 <gc_execute_line+0xc26>
      switch (gc_block.modal.motion) {
 80022ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022d0:	e6d1      	b.n	8002076 <gc_execute_line+0x6ea>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80022d2:	9b07      	ldr	r3, [sp, #28]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8166 	beq.w	80025a6 <gc_execute_line+0xc1a>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 80022da:	f018 0f50 	tst.w	r8, #80	; 0x50
 80022de:	f000 8165 	beq.w	80025ac <gc_execute_line+0xc20>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 80022e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022e4:	f7fe fcd8 	bl	8000c98 <__aeabi_f2uiz>
 80022e8:	b2c3      	uxtb	r3, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d847      	bhi.n	800237e <gc_execute_line+0x9f2>
      if (gc_block.values.l != 20) {
 80022ee:	7f3a      	ldrb	r2, [r7, #28]
 80022f0:	2a14      	cmp	r2, #20
 80022f2:	d006      	beq.n	8002302 <gc_execute_line+0x976>
        if (gc_block.values.l == 2) {
 80022f4:	2a02      	cmp	r2, #2
 80022f6:	f47f abd1 	bne.w	8001a9c <gc_execute_line+0x110>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 80022fa:	f018 0f80 	tst.w	r8, #128	; 0x80
 80022fe:	f47f abcd 	bne.w	8001a9c <gc_execute_line+0x110>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8002302:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 8002306:	fa1f f888 	uxth.w	r8, r8
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 833c 	beq.w	8002988 <gc_execute_line+0xffc>
 8002310:	3b01      	subs	r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4618      	mov	r0, r3
 8002316:	930c      	str	r3, [sp, #48]	; 0x30
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 8002318:	4960      	ldr	r1, [pc, #384]	; (800249c <gc_execute_line+0xb10>)
 800231a:	f004 fc59 	bl	8006bd0 <settings_read_coord_data>
 800231e:	2800      	cmp	r0, #0
 8002320:	f000 8253 	beq.w	80027ca <gc_execute_line+0xe3e>
 8002324:	7f3b      	ldrb	r3, [r7, #28]
 8002326:	2b14      	cmp	r3, #20
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002328:	9b07      	ldr	r3, [sp, #28]
 800232a:	f000 83b5 	beq.w	8002a98 <gc_execute_line+0x110c>
 800232e:	07db      	lsls	r3, r3, #31
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002330:	bf44      	itt	mi
 8002332:	6bfb      	ldrmi	r3, [r7, #60]	; 0x3c
 8002334:	613b      	strmi	r3, [r7, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002336:	9b07      	ldr	r3, [sp, #28]
 8002338:	0798      	lsls	r0, r3, #30
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 800233a:	bf44      	itt	mi
 800233c:	6c3b      	ldrmi	r3, [r7, #64]	; 0x40
 800233e:	617b      	strmi	r3, [r7, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002340:	9b07      	ldr	r3, [sp, #28]
 8002342:	0759      	lsls	r1, r3, #29
 8002344:	d5b9      	bpl.n	80022ba <gc_execute_line+0x92e>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	61bb      	str	r3, [r7, #24]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 800234a:	e7b6      	b.n	80022ba <gc_execute_line+0x92e>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <gc_execute_line+0xb14>)
 800234e:	ea08 0303 	and.w	r3, r8, r3
 8002352:	e697      	b.n	8002084 <gc_execute_line+0x6f8>
 8002354:	2300      	movs	r3, #0
 8002356:	9309      	str	r3, [sp, #36]	; 0x24
 8002358:	e609      	b.n	8001f6e <gc_execute_line+0x5e2>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	2b01      	cmp	r3, #1
 800235e:	f000 827c 	beq.w	800285a <gc_execute_line+0xece>
 8002362:	4625      	mov	r5, r4
 8002364:	46a0      	mov	r8, r4
 8002366:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800236a:	9408      	str	r4, [sp, #32]
 800236c:	e712      	b.n	8002194 <gc_execute_line+0x808>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 800236e:	2324      	movs	r3, #36	; 0x24
 8002370:	f7ff bb95 	b.w	8001a9e <gc_execute_line+0x112>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <gc_execute_line+0xb0c>)
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002376:	920c      	str	r2, [sp, #48]	; 0x30
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 800237c:	e79d      	b.n	80022ba <gc_execute_line+0x92e>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800237e:	231d      	movs	r3, #29
 8002380:	f7ff bb8d 	b.w	8001a9e <gc_execute_line+0x112>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002384:	9b06      	ldr	r3, [sp, #24]
 8002386:	2b02      	cmp	r3, #2
 8002388:	f000 81ca 	beq.w	8002720 <gc_execute_line+0xd94>
 800238c:	9c08      	ldr	r4, [sp, #32]
 800238e:	2300      	movs	r3, #0
 8002390:	9408      	str	r4, [sp, #32]
 8002392:	9309      	str	r3, [sp, #36]	; 0x24
 8002394:	e5eb      	b.n	8001f6e <gc_execute_line+0x5e2>
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <gc_execute_line+0xb18>)
 8002398:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800239c:	079b      	lsls	r3, r3, #30
 800239e:	f100 823a 	bmi.w	8002816 <gc_execute_line+0xe8a>
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <gc_execute_line+0xb0c>)
 80023a4:	7a5c      	ldrb	r4, [r3, #9]
 80023a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a8:	f003 0540 	and.w	r5, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 80023ac:	493a      	ldr	r1, [pc, #232]	; (8002498 <gc_execute_line+0xb0c>)
 80023ae:	6a3a      	ldr	r2, [r7, #32]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 80023b0:	78bb      	ldrb	r3, [r7, #2]
  gc_state.line_number = gc_block.values.n;
 80023b2:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 80023b4:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 80023b6:	b113      	cbz	r3, 80023be <gc_execute_line+0xa32>
 80023b8:	2308      	movs	r3, #8
 80023ba:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 80023be:	4a36      	ldr	r2, [pc, #216]	; (8002498 <gc_execute_line+0xb0c>)
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80023c0:	68fb      	ldr	r3, [r7, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 80023c2:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80023c6:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 80023ca:	4640      	mov	r0, r8
 80023cc:	4649      	mov	r1, r9
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80023ce:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 80023d0:	9315      	str	r3, [sp, #84]	; 0x54
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 80023d2:	f7fe fbf3 	bl	8000bbc <__aeabi_fcmpeq>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	f000 81bb 	beq.w	8002752 <gc_execute_line+0xdc6>
 80023dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023de:	0699      	lsls	r1, r3, #26
 80023e0:	f100 81b7 	bmi.w	8002752 <gc_execute_line+0xdc6>
 80023e4:	46c1      	mov	r9, r8
 80023e6:	b2ee      	uxtb	r6, r5
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	f000 8211 	beq.w	8002810 <gc_execute_line+0xe84>
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80023ee:	7ab8      	ldrb	r0, [r7, #10]
  gc_state.tool = gc_block.values.t;
 80023f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023f4:	4d28      	ldr	r5, [pc, #160]	; (8002498 <gc_execute_line+0xb0c>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80023f6:	42a0      	cmp	r0, r4
  gc_state.tool = gc_block.values.t;
 80023f8:	752b      	strb	r3, [r5, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80023fa:	d004      	beq.n	8002406 <gc_execute_line+0xa7a>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80023fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80023fe:	f004 fef5 	bl	80071ec <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 8002402:	7abc      	ldrb	r4, [r7, #10]
 8002404:	726c      	strb	r4, [r5, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <gc_execute_line+0xb0c>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002408:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 800240c:	7a1b      	ldrb	r3, [r3, #8]
 800240e:	7a78      	ldrb	r0, [r7, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002410:	4314      	orrs	r4, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002412:	4283      	cmp	r3, r0
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002414:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002418:	f040 8214 	bne.w	8002844 <gc_execute_line+0xeb8>
 800241c:	431c      	orrs	r4, r3
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800241e:	783b      	ldrb	r3, [r7, #0]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002420:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002424:	2b04      	cmp	r3, #4
 8002426:	f000 8310 	beq.w	8002a4a <gc_execute_line+0x10be>
  gc_state.modal.units = gc_block.modal.units;
 800242a:	78fb      	ldrb	r3, [r7, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 800242c:	491a      	ldr	r1, [pc, #104]	; (8002498 <gc_execute_line+0xb0c>)
 800242e:	797a      	ldrb	r2, [r7, #5]
  gc_state.modal.units = gc_block.modal.units;
 8002430:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002432:	9b06      	ldr	r3, [sp, #24]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002434:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002436:	2b03      	cmp	r3, #3
 8002438:	f000 8266 	beq.w	8002908 <gc_execute_line+0xf7c>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 800243c:	4c16      	ldr	r4, [pc, #88]	; (8002498 <gc_execute_line+0xb0c>)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	79a2      	ldrb	r2, [r4, #6]
 8002442:	429a      	cmp	r2, r3
 8002444:	d008      	beq.n	8002458 <gc_execute_line+0xacc>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002446:	aa12      	add	r2, sp, #72	; 0x48
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002448:	71a3      	strb	r3, [r4, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 800244a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800244e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002450:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    system_flag_wco_change();
 8002454:	f006 f9bc 	bl	80087d0 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002458:	783b      	ldrb	r3, [r7, #0]
  gc_state.modal.distance = gc_block.modal.distance;
 800245a:	793a      	ldrb	r2, [r7, #4]
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <gc_execute_line+0xb0c>)
  switch(gc_block.non_modal_command) {
 800245e:	2b28      	cmp	r3, #40	; 0x28
  gc_state.modal.distance = gc_block.modal.distance;
 8002460:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002462:	d821      	bhi.n	80024a8 <gc_execute_line+0xb1c>
 8002464:	2b09      	cmp	r3, #9
 8002466:	d92d      	bls.n	80024c4 <gc_execute_line+0xb38>
 8002468:	3b0a      	subs	r3, #10
 800246a:	2b1e      	cmp	r3, #30
 800246c:	d82a      	bhi.n	80024c4 <gc_execute_line+0xb38>
 800246e:	e8df f003 	tbb	[pc, r3]
 8002472:	2988      	.short	0x2988
 8002474:	29292929 	.word	0x29292929
 8002478:	29292929 	.word	0x29292929
 800247c:	29292929 	.word	0x29292929
 8002480:	29292929 	.word	0x29292929
 8002484:	29732973 	.word	0x29732973
 8002488:	29292929 	.word	0x29292929
 800248c:	296e2929 	.word	0x296e2929
 8002490:	69          	.byte	0x69
 8002491:	00          	.byte	0x00
 8002492:	bf00      	nop
 8002494:	41cb3333 	.word	0x41cb3333
 8002498:	20001288 	.word	0x20001288
 800249c:	200012dc 	.word	0x200012dc
 80024a0:	fffffcde 	.word	0xfffffcde
 80024a4:	20001834 	.word	0x20001834
 80024a8:	2b5c      	cmp	r3, #92	; 0x5c
 80024aa:	f000 82e9 	beq.w	8002a80 <gc_execute_line+0x10f4>
 80024ae:	2b66      	cmp	r3, #102	; 0x66
 80024b0:	d108      	bne.n	80024c4 <gc_execute_line+0xb38>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 80024b2:	2300      	movs	r3, #0
 80024b4:	4ab9      	ldr	r2, [pc, #740]	; (800279c <gc_execute_line+0xe10>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80024bc:	f1a2 0134 	sub.w	r1, r2, #52	; 0x34
      system_flag_wco_change();
 80024c0:	f006 f986 	bl	80087d0 <system_flag_wco_change>
  gc_state.modal.motion = gc_block.modal.motion;
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	4ab6      	ldr	r2, [pc, #728]	; (80027a0 <gc_execute_line+0xe14>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 80024c8:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 80024ca:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 80024cc:	d003      	beq.n	80024d6 <gc_execute_line+0xb4a>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80024ce:	9a06      	ldr	r2, [sp, #24]
 80024d0:	2a02      	cmp	r2, #2
 80024d2:	f000 8291 	beq.w	80029f8 <gc_execute_line+0x106c>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 80024d6:	7a3b      	ldrb	r3, [r7, #8]
 80024d8:	4ab1      	ldr	r2, [pc, #708]	; (80027a0 <gc_execute_line+0xe14>)
 80024da:	71d3      	strb	r3, [r2, #7]
  if (gc_state.modal.program_flow) {
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f43f aade 	beq.w	8001a9e <gc_execute_line+0x112>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 80024e2:	f003 f9c3 	bl	800586c <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 80024e6:	4bae      	ldr	r3, [pc, #696]	; (80027a0 <gc_execute_line+0xe14>)
 80024e8:	79db      	ldrb	r3, [r3, #7]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	f000 8319 	beq.w	8002b22 <gc_execute_line+0x1196>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 80024f0:	2201      	movs	r2, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 80024f2:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80024f4:	f246 4064 	movw	r0, #25700	; 0x6464
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80024f8:	2164      	movs	r1, #100	; 0x64
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 80024fa:	4da9      	ldr	r5, [pc, #676]	; (80027a0 <gc_execute_line+0xe14>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80024fc:	4ba9      	ldr	r3, [pc, #676]	; (80027a4 <gc_execute_line+0xe18>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 80024fe:	802a      	strh	r2, [r5, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002500:	781a      	ldrb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002502:	712c      	strb	r4, [r5, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002504:	2a02      	cmp	r2, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8002506:	70ec      	strb	r4, [r5, #3]
      gc_state.modal.coord_select = 0; // G54
 8002508:	71ac      	strb	r4, [r5, #6]
      gc_state.modal.coolant = COOLANT_DISABLE;
 800250a:	812c      	strh	r4, [r5, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 800250c:	8118      	strh	r0, [r3, #8]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 800250e:	7299      	strb	r1, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002510:	d010      	beq.n	8002534 <gc_execute_line+0xba8>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002512:	4620      	mov	r0, r4
 8002514:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002518:	f004 fb5a 	bl	8006bd0 <settings_read_coord_data>
 800251c:	2800      	cmp	r0, #0
 800251e:	f000 8154 	beq.w	80027ca <gc_execute_line+0xe3e>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8002522:	f006 f955 	bl	80087d0 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8002526:	4620      	mov	r0, r4
 8002528:	2100      	movs	r1, #0
 800252a:	f004 fdd3 	bl	80070d4 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff f920 	bl	8001774 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 8002534:	2008      	movs	r0, #8
 8002536:	f003 fad3 	bl	8005ae0 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 800253a:	2300      	movs	r3, #0
 800253c:	4a98      	ldr	r2, [pc, #608]	; (80027a0 <gc_execute_line+0xe14>)
 800253e:	71d3      	strb	r3, [r2, #7]
 8002540:	f7ff baad 	b.w	8001a9e <gc_execute_line+0x112>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002544:	2007      	movs	r0, #7
 8002546:	4998      	ldr	r1, [pc, #608]	; (80027a8 <gc_execute_line+0xe1c>)
 8002548:	f004 fa6e 	bl	8006a28 <settings_write_coord_data>
      break;
 800254c:	e7ba      	b.n	80024c4 <gc_execute_line+0xb38>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 800254e:	2006      	movs	r0, #6
 8002550:	4995      	ldr	r1, [pc, #596]	; (80027a8 <gc_execute_line+0xe1c>)
 8002552:	f004 fa69 	bl	8006a28 <settings_write_coord_data>
      break;
 8002556:	e7b5      	b.n	80024c4 <gc_execute_line+0xb38>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002558:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002564:	9b06      	ldr	r3, [sp, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 82f3 	bne.w	8002b52 <gc_execute_line+0x11c6>
      mc_line(gc_block.values.ijk, pl_data);
 800256c:	4d8f      	ldr	r5, [pc, #572]	; (80027ac <gc_execute_line+0xe20>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 800256e:	4c8e      	ldr	r4, [pc, #568]	; (80027a8 <gc_execute_line+0xe1c>)
      mc_line(gc_block.values.ijk, pl_data);
 8002570:	4628      	mov	r0, r5
 8002572:	a915      	add	r1, sp, #84	; 0x54
 8002574:	f001 f98a 	bl	800388c <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800257c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8002580:	e7a0      	b.n	80024c4 <gc_execute_line+0xb38>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002584:	4c89      	ldr	r4, [pc, #548]	; (80027ac <gc_execute_line+0xe20>)
 8002586:	4628      	mov	r0, r5
 8002588:	4621      	mov	r1, r4
 800258a:	f004 fa4d 	bl	8006a28 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 800258e:	4b84      	ldr	r3, [pc, #528]	; (80027a0 <gc_execute_line+0xe14>)
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	42ab      	cmp	r3, r5
 8002594:	d196      	bne.n	80024c4 <gc_execute_line+0xb38>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002596:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800259a:	4b85      	ldr	r3, [pc, #532]	; (80027b0 <gc_execute_line+0xe24>)
 800259c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        system_flag_wco_change();
 80025a0:	f006 f916 	bl	80087d0 <system_flag_wco_change>
 80025a4:	e78e      	b.n	80024c4 <gc_execute_line+0xb38>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80025a6:	231a      	movs	r3, #26
 80025a8:	f7ff ba79 	b.w	8001a9e <gc_execute_line+0x112>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 80025ac:	231c      	movs	r3, #28
 80025ae:	f7ff ba76 	b.w	8001a9e <gc_execute_line+0x112>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 80025b2:	f1b9 0f00 	cmp.w	r9, #0
 80025b6:	f000 819e 	beq.w	80028f6 <gc_execute_line+0xf6a>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80025ba:	2100      	movs	r1, #0
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7fe fafd 	bl	8000bbc <__aeabi_fcmpeq>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	f040 80b7 	bne.w	8002736 <gc_execute_line+0xdaa>
      switch (gc_block.modal.motion) {
 80025c8:	f1b9 0f03 	cmp.w	r9, #3
 80025cc:	d00d      	beq.n	80025ea <gc_execute_line+0xc5e>
 80025ce:	f200 81ae 	bhi.w	800292e <gc_execute_line+0xfa2>
 80025d2:	f1b9 0f01 	cmp.w	r9, #1
 80025d6:	f000 818e 	beq.w	80028f6 <gc_execute_line+0xf6a>
 80025da:	f1b9 0f02 	cmp.w	r9, #2
 80025de:	f47f ae76 	bne.w	80022ce <gc_execute_line+0x942>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 80025e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80025ea:	9b07      	ldr	r3, [sp, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0da      	beq.n	80025a6 <gc_execute_line+0xc1a>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 80025f0:	4233      	tst	r3, r6
 80025f2:	f000 832a 	beq.w	8002c4a <gc_execute_line+0x12be>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 80025f6:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <gc_execute_line+0xe14>)
 80025f8:	eb07 028b 	add.w	r2, r7, fp, lsl #2
 80025fc:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8002600:	69d9      	ldr	r1, [r3, #28]
 8002602:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8002604:	f7fe f83c 	bl	8000680 <__aeabi_fsub>
 8002608:	4684      	mov	ip, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <gc_execute_line+0xe14>)
 800260c:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 8002610:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002614:	69d9      	ldr	r1, [r3, #28]
 8002616:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002618:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 800261c:	f7fe f830 	bl	8000680 <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002620:	f018 0380 	ands.w	r3, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002624:	4681      	mov	r9, r0
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002626:	f000 8299 	beq.w	8002b5c <gc_execute_line+0x11d0>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800262a:	220c      	movs	r2, #12
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <gc_execute_line+0xe28>)
 800262e:	485e      	ldr	r0, [pc, #376]	; (80027a8 <gc_execute_line+0xe1c>)
 8002630:	f007 fb5e 	bl	8009cf0 <memcmp>
 8002634:	2800      	cmp	r0, #0
 8002636:	f000 82d4 	beq.w	8002be2 <gc_execute_line+0x1256>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d104      	bne.n	800264a <gc_execute_line+0xcbe>
 8002640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002642:	495d      	ldr	r1, [pc, #372]	; (80027b8 <gc_execute_line+0xe2c>)
 8002644:	f7fe f926 	bl	8000894 <__aeabi_fmul>
 8002648:	62b8      	str	r0, [r7, #40]	; 0x28
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 800264a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800264c:	4608      	mov	r0, r1
 800264e:	f7fe f921 	bl	8000894 <__aeabi_fmul>
 8002652:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002656:	f7fe f91d 	bl	8000894 <__aeabi_fmul>
 800265a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800265c:	4606      	mov	r6, r0
 800265e:	4608      	mov	r0, r1
 8002660:	f7fe f918 	bl	8000894 <__aeabi_fmul>
 8002664:	4649      	mov	r1, r9
 8002666:	9008      	str	r0, [sp, #32]
 8002668:	4648      	mov	r0, r9
 800266a:	f7fe f913 	bl	8000894 <__aeabi_fmul>
 800266e:	9b08      	ldr	r3, [sp, #32]
 8002670:	4601      	mov	r1, r0
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe f806 	bl	8000684 <__addsf3>
 8002678:	4601      	mov	r1, r0
 800267a:	4630      	mov	r0, r6
 800267c:	f7fe f800 	bl	8000680 <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002680:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002682:	4606      	mov	r6, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002684:	f7fe faa4 	bl	8000bd0 <__aeabi_fcmplt>
 8002688:	2800      	cmp	r0, #0
 800268a:	f040 82e1 	bne.w	8002c50 <gc_execute_line+0x12c4>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 800268e:	4630      	mov	r0, r6
 8002690:	f007 fcc4 	bl	800a01c <sqrtf>
 8002694:	4649      	mov	r1, r9
 8002696:	4606      	mov	r6, r0
 8002698:	980d      	ldr	r0, [sp, #52]	; 0x34
 800269a:	f001 fc81 	bl	8003fa0 <hypot_f>
 800269e:	4601      	mov	r1, r0
 80026a0:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80026a4:	f7fe f9aa 	bl	80009fc <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 80026a8:	787b      	ldrb	r3, [r7, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 80026aa:	4606      	mov	r6, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 80026ac:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 80026b0:	bf08      	it	eq
 80026b2:	f100 4600 	addeq.w	r6, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	9308      	str	r3, [sp, #32]
 80026bc:	f7fe fa88 	bl	8000bd0 <__aeabi_fcmplt>
 80026c0:	b128      	cbz	r0, 80026ce <gc_execute_line+0xd42>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 80026c2:	9b08      	ldr	r3, [sp, #32]
                h_x2_div_d = -h_x2_div_d;
 80026c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 80026c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 80026ce:	f10b 0302 	add.w	r3, fp, #2
 80026d2:	4649      	mov	r1, r9
 80026d4:	4630      	mov	r0, r6
 80026d6:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 80026da:	f7fe f8db 	bl	8000894 <__aeabi_fmul>
 80026de:	4601      	mov	r1, r0
 80026e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80026e2:	f7fd ffcd 	bl	8000680 <__aeabi_fsub>
 80026e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026ea:	f7fe f8d3 	bl	8000894 <__aeabi_fmul>
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026ee:	990d      	ldr	r1, [sp, #52]	; 0x34
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 80026f0:	f8cb 0008 	str.w	r0, [fp, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026f4:	4630      	mov	r0, r6
 80026f6:	f7fe f8cd 	bl	8000894 <__aeabi_fmul>
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd ffc2 	bl	8000684 <__addsf3>
 8002700:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002704:	f7fe f8c6 	bl	8000894 <__aeabi_fmul>
 8002708:	3402      	adds	r4, #2
 800270a:	9b09      	ldr	r3, [sp, #36]	; 0x24
            bit_false(value_words,bit(WORD_R));
 800270c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002710:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            bit_false(value_words,bit(WORD_R));
 8002714:	fa1f f888 	uxth.w	r8, r8
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002718:	f003 0201 	and.w	r2, r3, #1
 800271c:	60a0      	str	r0, [r4, #8]
 800271e:	e4aa      	b.n	8002076 <gc_execute_line+0x6ea>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b50      	cmp	r3, #80	; 0x50
 8002724:	f43f ac23 	beq.w	8001f6e <gc_execute_line+0x5e2>
 8002728:	2b00      	cmp	r3, #0
 800272a:	f43f ac20 	beq.w	8001f6e <gc_execute_line+0x5e2>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 800272e:	f018 0f01 	tst.w	r8, #1
 8002732:	f47f ac1c 	bne.w	8001f6e <gc_execute_line+0x5e2>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8002736:	2316      	movs	r3, #22
 8002738:	f7ff b9b1 	b.w	8001a9e <gc_execute_line+0x112>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800273c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800273e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002740:	f7fd ffa0 	bl	8000684 <__addsf3>
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <gc_execute_line+0xe14>)
 8002746:	4601      	mov	r1, r0
 8002748:	69d8      	ldr	r0, [r3, #28]
 800274a:	f7fd ff99 	bl	8000680 <__aeabi_fsub>
 800274e:	63f8      	str	r0, [r7, #60]	; 0x3c
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002750:	e597      	b.n	8002282 <gc_execute_line+0x8f6>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8002752:	2c00      	cmp	r4, #0
 8002754:	d050      	beq.n	80027f8 <gc_execute_line+0xe6c>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	d44d      	bmi.n	80027f8 <gc_execute_line+0xe6c>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800275c:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 8002760:	2d00      	cmp	r5, #0
 8002762:	d04b      	beq.n	80027fc <gc_execute_line+0xe70>
            spindle_sync(gc_state.modal.spindle, 0.0);
 8002764:	4620      	mov	r0, r4
 8002766:	2100      	movs	r1, #0
 8002768:	f004 fd40 	bl	80071ec <spindle_sync>
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <gc_execute_line+0xe14>)
 800276e:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8002772:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <gc_execute_line+0xe14>)
 8002776:	f8c3 900c 	str.w	r9, [r3, #12]
 800277a:	e635      	b.n	80023e8 <gc_execute_line+0xa5c>
              axis_command = AXIS_COMMAND_NON_MODAL;
 800277c:	2201      	movs	r2, #1
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800277e:	9b06      	ldr	r3, [sp, #24]
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002780:	9206      	str	r2, [sp, #24]
 8002782:	f7ff ba8d 	b.w	8001ca0 <gc_execute_line+0x314>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002786:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002788:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800278a:	f7fd ff7b 	bl	8000684 <__addsf3>
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <gc_execute_line+0xe14>)
 8002790:	4601      	mov	r1, r0
 8002792:	6a18      	ldr	r0, [r3, #32]
 8002794:	f7fd ff74 	bl	8000680 <__aeabi_fsub>
 8002798:	6438      	str	r0, [r7, #64]	; 0x40
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 800279a:	e579      	b.n	8002290 <gc_execute_line+0x904>
 800279c:	200012bc 	.word	0x200012bc
 80027a0:	20001288 	.word	0x20001288
 80027a4:	20001378 	.word	0x20001378
 80027a8:	200012a4 	.word	0x200012a4
 80027ac:	200012dc 	.word	0x200012dc
 80027b0:	200012b0 	.word	0x200012b0
 80027b4:	20001308 	.word	0x20001308
 80027b8:	41cb3333 	.word	0x41cb3333
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027bc:	2006      	movs	r0, #6
 80027be:	49ac      	ldr	r1, [pc, #688]	; (8002a70 <gc_execute_line+0x10e4>)
 80027c0:	f004 fa06 	bl	8006bd0 <settings_read_coord_data>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f040 808e 	bne.w	80028e6 <gc_execute_line+0xf5a>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027ca:	2307      	movs	r3, #7
 80027cc:	f7ff b967 	b.w	8001a9e <gc_execute_line+0x112>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80027d0:	9b07      	ldr	r3, [sp, #28]
 80027d2:	079b      	lsls	r3, r3, #30
 80027d4:	f140 8140 	bpl.w	8002a58 <gc_execute_line+0x10cc>
 80027d8:	9b07      	ldr	r3, [sp, #28]
 80027da:	0759      	lsls	r1, r3, #29
 80027dc:	f140 80eb 	bpl.w	80029b6 <gc_execute_line+0x102a>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 80027e0:	f897 9001 	ldrb.w	r9, [r7, #1]
 80027e4:	f1b9 0f01 	cmp.w	r9, #1
 80027e8:	f200 8133 	bhi.w	8002a52 <gc_execute_line+0x10c6>
  switch (gc_block.modal.plane_select) {
 80027ec:	2300      	movs	r3, #0
 80027ee:	930c      	str	r3, [sp, #48]	; 0x30
 80027f0:	e569      	b.n	80022c6 <gc_execute_line+0x93a>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80027f2:	2318      	movs	r3, #24
 80027f4:	f7ff b953 	b.w	8001a9e <gc_execute_line+0x112>
 80027f8:	b2ee      	uxtb	r6, r5
 80027fa:	e7bb      	b.n	8002774 <gc_execute_line+0xde8>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 80027fc:	4649      	mov	r1, r9
 80027fe:	4620      	mov	r0, r4
 8002800:	f004 fcf4 	bl	80071ec <spindle_sync>
 8002804:	4b9b      	ldr	r3, [pc, #620]	; (8002a74 <gc_execute_line+0x10e8>)
 8002806:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800280a:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 800280c:	f8c3 900c 	str.w	r9, [r3, #12]
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
 8002810:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8002814:	e5eb      	b.n	80023ee <gc_execute_line+0xa62>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8002816:	787b      	ldrb	r3, [r7, #1]
 8002818:	3b01      	subs	r3, #1
 800281a:	2b02      	cmp	r3, #2
 800281c:	d903      	bls.n	8002826 <gc_execute_line+0xe9a>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 800281e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002824:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 8002826:	9b07      	ldr	r3, [sp, #28]
 8002828:	b11b      	cbz	r3, 8002832 <gc_execute_line+0xea6>
 800282a:	9b06      	ldr	r3, [sp, #24]
 800282c:	2b02      	cmp	r3, #2
 800282e:	f000 8183 	beq.w	8002b38 <gc_execute_line+0x11ac>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 8002832:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <gc_execute_line+0x10e8>)
 8002834:	7a5c      	ldrb	r4, [r3, #9]
 8002836:	2c10      	cmp	r4, #16
 8002838:	f000 815e 	beq.w	8002af8 <gc_execute_line+0x116c>
 800283c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800283e:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002842:	e5b3      	b.n	80023ac <gc_execute_line+0xa20>
    coolant_sync(gc_block.modal.coolant);
 8002844:	f7fe ffbc 	bl	80017c0 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 8002848:	7a7b      	ldrb	r3, [r7, #9]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 80b8 	bne.w	80029c0 <gc_execute_line+0x1034>
 8002850:	4a88      	ldr	r2, [pc, #544]	; (8002a74 <gc_execute_line+0x10e8>)
 8002852:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8002856:	7213      	strb	r3, [r2, #8]
 8002858:	e5e1      	b.n	800241e <gc_execute_line+0xa92>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 800285a:	4625      	mov	r5, r4
 800285c:	46a0      	mov	r8, r4
 800285e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002862:	e594      	b.n	800238e <gc_execute_line+0xa02>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8002864:	2310      	movs	r3, #16
 8002866:	f7ff b91a 	b.w	8001a9e <gc_execute_line+0x112>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800286a:	07d1      	lsls	r1, r2, #31
 800286c:	f140 8155 	bpl.w	8002b1a <gc_execute_line+0x118e>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002870:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002874:	d008      	beq.n	8002888 <gc_execute_line+0xefc>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002878:	9812      	ldr	r0, [sp, #72]	; 0x48
 800287a:	f7fd ff03 	bl	8000684 <__addsf3>
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <gc_execute_line+0x10e8>)
 8002880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002882:	f7fd feff 	bl	8000684 <__addsf3>
 8002886:	63f8      	str	r0, [r7, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002888:	9b07      	ldr	r3, [sp, #28]
 800288a:	079a      	lsls	r2, r3, #30
 800288c:	f140 8100 	bpl.w	8002a90 <gc_execute_line+0x1104>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002890:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002894:	d008      	beq.n	80028a8 <gc_execute_line+0xf1c>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002898:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800289a:	f7fd fef3 	bl	8000684 <__addsf3>
 800289e:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <gc_execute_line+0x10e8>)
 80028a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028a2:	f7fd feef 	bl	8000684 <__addsf3>
 80028a6:	6438      	str	r0, [r7, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028a8:	9b07      	ldr	r3, [sp, #28]
 80028aa:	075b      	lsls	r3, r3, #29
 80028ac:	f140 8083 	bpl.w	80029b6 <gc_execute_line+0x102a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80028b0:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 80028b4:	d094      	beq.n	80027e0 <gc_execute_line+0xe54>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80028b6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80028b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028ba:	f7fd fee3 	bl	8000684 <__addsf3>
 80028be:	4b6d      	ldr	r3, [pc, #436]	; (8002a74 <gc_execute_line+0x10e8>)
 80028c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028c2:	f7fd fedf 	bl	8000684 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80028c6:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <gc_execute_line+0x10e8>)
 80028c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028ca:	f7fd fedb 	bl	8000684 <__addsf3>
 80028ce:	f1b9 0f1e 	cmp.w	r9, #30
 80028d2:	6478      	str	r0, [r7, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 80028d4:	f47f abbf 	bne.w	8002056 <gc_execute_line+0x6ca>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80028d8:	2007      	movs	r0, #7
 80028da:	4965      	ldr	r1, [pc, #404]	; (8002a70 <gc_execute_line+0x10e4>)
 80028dc:	f004 f978 	bl	8006bd0 <settings_read_coord_data>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	f43f af72 	beq.w	80027ca <gc_execute_line+0xe3e>
          if (axis_words) {
 80028e6:	9b07      	ldr	r3, [sp, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d171      	bne.n	80029d0 <gc_execute_line+0x1044>
 80028ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80028ee:	930c      	str	r3, [sp, #48]	; 0x30
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 80028f0:	9306      	str	r3, [sp, #24]
 80028f2:	f7ff bbc0 	b.w	8002076 <gc_execute_line+0x6ea>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 80028f6:	9b07      	ldr	r3, [sp, #28]
 80028f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	9b06      	ldr	r3, [sp, #24]
 80028fe:	bf08      	it	eq
 8002900:	2300      	moveq	r3, #0
 8002902:	9306      	str	r3, [sp, #24]
 8002904:	f7ff bbb7 	b.w	8002076 <gc_execute_line+0x6ea>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002908:	79bb      	ldrb	r3, [r7, #6]
 800290a:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8095 	beq.w	8002a3c <gc_execute_line+0x10b0>
 8002912:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002914:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <gc_execute_line+0x10e8>)
 8002916:	4621      	mov	r1, r4
 8002918:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800291a:	f7fe f94f 	bl	8000bbc <__aeabi_fcmpeq>
 800291e:	2800      	cmp	r0, #0
 8002920:	f47f ad8c 	bne.w	800243c <gc_execute_line+0xab0>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <gc_execute_line+0x10e8>)
 8002926:	641c      	str	r4, [r3, #64]	; 0x40
      system_flag_wco_change();
 8002928:	f005 ff52 	bl	80087d0 <system_flag_wco_change>
 800292c:	e586      	b.n	800243c <gc_execute_line+0xab0>
      switch (gc_block.modal.motion) {
 800292e:	f109 0374 	add.w	r3, r9, #116	; 0x74
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b03      	cmp	r3, #3
 8002936:	f63f acca 	bhi.w	80022ce <gc_execute_line+0x942>
 800293a:	f1a9 038c 	sub.w	r3, r9, #140	; 0x8c
 800293e:	2b03      	cmp	r3, #3
 8002940:	f63f acc5 	bhi.w	80022ce <gc_execute_line+0x942>
 8002944:	e8df f003 	tbb	[pc, r3]
 8002948:	02060206 	.word	0x02060206
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 800294c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002954:	f109 0372 	add.w	r3, r9, #114	; 0x72
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d803      	bhi.n	8002966 <gc_execute_line+0xfda>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 800295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002966:	9b07      	ldr	r3, [sp, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f43f ae1c 	beq.w	80025a6 <gc_execute_line+0xc1a>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800296e:	220c      	movs	r2, #12
 8002970:	4941      	ldr	r1, [pc, #260]	; (8002a78 <gc_execute_line+0x10ec>)
 8002972:	4842      	ldr	r0, [pc, #264]	; (8002a7c <gc_execute_line+0x10f0>)
 8002974:	f007 f9bc 	bl	8009cf0 <memcmp>
 8002978:	2800      	cmp	r0, #0
 800297a:	f000 8132 	beq.w	8002be2 <gc_execute_line+0x1256>
 800297e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002980:	f003 0201 	and.w	r2, r3, #1
 8002984:	f7ff bb77 	b.w	8002076 <gc_execute_line+0x6ea>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	4618      	mov	r0, r3
 800298c:	930c      	str	r3, [sp, #48]	; 0x30
 800298e:	e4c3      	b.n	8002318 <gc_execute_line+0x98c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <gc_execute_line+0x10e8>)
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002992:	0791      	lsls	r1, r2, #30
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002998:	d55e      	bpl.n	8002a58 <gc_execute_line+0x10cc>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800299a:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 800299e:	f43f af1b 	beq.w	80027d8 <gc_execute_line+0xe4c>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <gc_execute_line+0x10e8>)
 80029a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029a6:	6a18      	ldr	r0, [r3, #32]
 80029a8:	f7fd fe6c 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029ac:	9b07      	ldr	r3, [sp, #28]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80029ae:	6438      	str	r0, [r7, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029b0:	0758      	lsls	r0, r3, #29
 80029b2:	f53f ab42 	bmi.w	800203a <gc_execute_line+0x6ae>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <gc_execute_line+0x10e8>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
 80029bc:	f7ff bb43 	b.w	8002046 <gc_execute_line+0x6ba>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80029c0:	492c      	ldr	r1, [pc, #176]	; (8002a74 <gc_execute_line+0x10e8>)
 80029c2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80029c6:	7a0c      	ldrb	r4, [r1, #8]
 80029c8:	431c      	orrs	r4, r3
 80029ca:	720c      	strb	r4, [r1, #8]
 80029cc:	4314      	orrs	r4, r2
 80029ce:	e526      	b.n	800241e <gc_execute_line+0xa92>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80029d0:	07d8      	lsls	r0, r3, #31
 80029d2:	d402      	bmi.n	80029da <gc_execute_line+0x104e>
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <gc_execute_line+0x10e8>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	9b07      	ldr	r3, [sp, #28]
 80029dc:	0799      	lsls	r1, r3, #30
 80029de:	d402      	bmi.n	80029e6 <gc_execute_line+0x105a>
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <gc_execute_line+0x10e8>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	9b07      	ldr	r3, [sp, #28]
 80029e8:	075a      	lsls	r2, r3, #29
 80029ea:	d402      	bmi.n	80029f2 <gc_execute_line+0x1066>
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <gc_execute_line+0x10e8>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	61bb      	str	r3, [r7, #24]
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80029f2:	2300      	movs	r3, #0
 80029f4:	930c      	str	r3, [sp, #48]	; 0x30
 80029f6:	e460      	b.n	80022ba <gc_execute_line+0x92e>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f000 811f 	beq.w	8002c3c <gc_execute_line+0x12b0>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 810f 	beq.w	8002c22 <gc_execute_line+0x1296>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002a04:	3b02      	subs	r3, #2
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f240 80f6 	bls.w	8002bf8 <gc_execute_line+0x126c>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a0c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a10:	4d19      	ldr	r5, [pc, #100]	; (8002a78 <gc_execute_line+0x10ec>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a12:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a16:	4628      	mov	r0, r5
 8002a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a1a:	a915      	add	r1, sp, #84	; 0x54
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002a1c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002a20:	f001 f94a 	bl	8003cb8 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002a24:	2800      	cmp	r0, #0
 8002a26:	f040 80df 	bne.w	8002be8 <gc_execute_line+0x125c>
 8002a2a:	4c14      	ldr	r4, [pc, #80]	; (8002a7c <gc_execute_line+0x10f0>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002a2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a34:	e54f      	b.n	80024d6 <gc_execute_line+0xb4a>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002a36:	231f      	movs	r3, #31
 8002a38:	f7ff b831 	b.w	8001a9e <gc_execute_line+0x112>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	461c      	mov	r4, r3
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	e767      	b.n	8002914 <gc_execute_line+0xf88>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002a44:	2326      	movs	r3, #38	; 0x26
 8002a46:	f7ff b82a 	b.w	8001a9e <gc_execute_line+0x112>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a4c:	f001 f900 	bl	8003c50 <mc_dwell>
 8002a50:	e4eb      	b.n	800242a <gc_execute_line+0xa9e>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8002a52:	231e      	movs	r3, #30
 8002a54:	f7ff b823 	b.w	8001a9e <gc_execute_line+0x112>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <gc_execute_line+0x10e8>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002a5e:	9b07      	ldr	r3, [sp, #28]
 8002a60:	075b      	lsls	r3, r3, #29
 8002a62:	d5a8      	bpl.n	80029b6 <gc_execute_line+0x102a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002a64:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002a68:	f47f aae7 	bne.w	800203a <gc_execute_line+0x6ae>
 8002a6c:	e6b8      	b.n	80027e0 <gc_execute_line+0xe54>
 8002a6e:	bf00      	nop
 8002a70:	200012dc 	.word	0x200012dc
 8002a74:	20001288 	.word	0x20001288
 8002a78:	20001308 	.word	0x20001308
 8002a7c:	200012a4 	.word	0x200012a4
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002a80:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <gc_execute_line+0x1300>)
 8002a82:	4a83      	ldr	r2, [pc, #524]	; (8002c90 <gc_execute_line+0x1304>)
 8002a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      system_flag_wco_change();
 8002a8a:	f005 fea1 	bl	80087d0 <system_flag_wco_change>
      break;
 8002a8e:	e519      	b.n	80024c4 <gc_execute_line+0xb38>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002a90:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <gc_execute_line+0x1308>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
 8002a96:	e707      	b.n	80028a8 <gc_execute_line+0xf1c>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002a98:	07da      	lsls	r2, r3, #31
 8002a9a:	d50a      	bpl.n	8002ab2 <gc_execute_line+0x1126>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <gc_execute_line+0x1308>)
 8002a9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa2:	f7fd fdef 	bl	8000684 <__addsf3>
 8002aa6:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <gc_execute_line+0x1308>)
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	69d8      	ldr	r0, [r3, #28]
 8002aac:	f7fd fde8 	bl	8000680 <__aeabi_fsub>
 8002ab0:	6138      	str	r0, [r7, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002ab2:	9b07      	ldr	r3, [sp, #28]
 8002ab4:	079b      	lsls	r3, r3, #30
 8002ab6:	d50a      	bpl.n	8002ace <gc_execute_line+0x1142>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002ab8:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <gc_execute_line+0x1308>)
 8002aba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002abc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002abe:	f7fd fde1 	bl	8000684 <__addsf3>
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <gc_execute_line+0x1308>)
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	6a18      	ldr	r0, [r3, #32]
 8002ac8:	f7fd fdda 	bl	8000680 <__aeabi_fsub>
 8002acc:	6178      	str	r0, [r7, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002ace:	9b07      	ldr	r3, [sp, #28]
 8002ad0:	0758      	lsls	r0, r3, #29
 8002ad2:	f57f abf2 	bpl.w	80022ba <gc_execute_line+0x92e>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002ad6:	4b6f      	ldr	r3, [pc, #444]	; (8002c94 <gc_execute_line+0x1308>)
 8002ad8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ada:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002adc:	f7fd fdd2 	bl	8000684 <__addsf3>
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <gc_execute_line+0x1308>)
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ae6:	f7fd fdcb 	bl	8000680 <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002aea:	4b6a      	ldr	r3, [pc, #424]	; (8002c94 <gc_execute_line+0x1308>)
 8002aec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aee:	f7fd fdc7 	bl	8000680 <__aeabi_fsub>
 8002af2:	61b8      	str	r0, [r7, #24]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002af4:	f7ff bbe1 	b.w	80022ba <gc_execute_line+0x92e>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <gc_execute_line+0x1308>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002afc:	3b01      	subs	r3, #1
 8002afe:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b02:	f003 0540 	and.w	r5, r3, #64	; 0x40
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002b06:	d820      	bhi.n	8002b4a <gc_execute_line+0x11be>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b08:	065e      	lsls	r6, r3, #25
 8002b0a:	f57f ac4f 	bpl.w	80023ac <gc_execute_line+0xa20>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	9309      	str	r3, [sp, #36]	; 0x24
 8002b14:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002b18:	e448      	b.n	80023ac <gc_execute_line+0xa20>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002b1a:	4b5e      	ldr	r3, [pc, #376]	; (8002c94 <gc_execute_line+0x1308>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b20:	e6b2      	b.n	8002888 <gc_execute_line+0xefc>
      if (sys.state != STATE_CHECK_MODE) {
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <gc_execute_line+0x130c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	f43f ad07 	beq.w	800253a <gc_execute_line+0xbae>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002b2c:	2008      	movs	r0, #8
 8002b2e:	f005 fea3 	bl	8008878 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002b32:	f002 fdd3 	bl	80056dc <protocol_execute_realtime>
 8002b36:	e500      	b.n	800253a <gc_execute_line+0xbae>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b40:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <gc_execute_line+0x1308>)
 8002b46:	7a5c      	ldrb	r4, [r3, #9]
 8002b48:	e430      	b.n	80023ac <gc_execute_line+0xa20>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b4a:	0658      	lsls	r0, r3, #25
 8002b4c:	f53f ac2e 	bmi.w	80023ac <gc_execute_line+0xa20>
 8002b50:	e7dd      	b.n	8002b0e <gc_execute_line+0x1182>
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002b52:	484f      	ldr	r0, [pc, #316]	; (8002c90 <gc_execute_line+0x1304>)
 8002b54:	a915      	add	r1, sp, #84	; 0x54
 8002b56:	f000 fe99 	bl	800388c <mc_line>
 8002b5a:	e507      	b.n	800256c <gc_execute_line+0xbe0>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002b5c:	9a08      	ldr	r2, [sp, #32]
 8002b5e:	4232      	tst	r2, r6
 8002b60:	f000 8091 	beq.w	8002c86 <gc_execute_line+0x12fa>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002b64:	78fa      	ldrb	r2, [r7, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002b66:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002b6a:	2a01      	cmp	r2, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002b6c:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002b70:	d071      	beq.n	8002c56 <gc_execute_line+0x12ca>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002b72:	3402      	adds	r4, #2
 8002b74:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 8002b78:	68b1      	ldr	r1, [r6, #8]
 8002b7a:	4648      	mov	r0, r9
 8002b7c:	f7fd fd80 	bl	8000680 <__aeabi_fsub>
 8002b80:	4681      	mov	r9, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002b82:	f10b 0402 	add.w	r4, fp, #2
 8002b86:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8002b8a:	68a1      	ldr	r1, [r4, #8]
 8002b8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002b8e:	f7fd fd77 	bl	8000680 <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002b92:	4649      	mov	r1, r9
 8002b94:	f001 fa04 	bl	8003fa0 <hypot_f>
 8002b98:	4603      	mov	r3, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002b9a:	68b1      	ldr	r1, [r6, #8]
 8002b9c:	68a0      	ldr	r0, [r4, #8]
            float target_r = hypot_f(x,y);
 8002b9e:	461c      	mov	r4, r3
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002ba0:	f001 f9fe 	bl	8003fa0 <hypot_f>
 8002ba4:	4606      	mov	r6, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4631      	mov	r1, r6
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002baa:	62be      	str	r6, [r7, #40]	; 0x28
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002bac:	f7fd fd68 	bl	8000680 <__aeabi_fsub>
 8002bb0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4939      	ldr	r1, [pc, #228]	; (8002c9c <gc_execute_line+0x1310>)
 8002bb8:	f7fe f828 	bl	8000c0c <__aeabi_fcmpgt>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f43f aede 	beq.w	800297e <gc_execute_line+0xff2>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002bc2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7fe f820 	bl	8000c0c <__aeabi_fcmpgt>
 8002bcc:	b948      	cbnz	r0, 8002be2 <gc_execute_line+0x1256>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002bce:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <gc_execute_line+0x1314>)
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f7fd fe5f 	bl	8000894 <__aeabi_fmul>
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	f7fd fffa 	bl	8000bd0 <__aeabi_fcmplt>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f43f aece 	beq.w	800297e <gc_execute_line+0xff2>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002be2:	2321      	movs	r3, #33	; 0x21
 8002be4:	f7fe bf5b 	b.w	8001a9e <gc_execute_line+0x112>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002be8:	2801      	cmp	r0, #1
 8002bea:	f47f ac74 	bne.w	80024d6 <gc_execute_line+0xb4a>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002bee:	492d      	ldr	r1, [pc, #180]	; (8002ca4 <gc_execute_line+0x1318>)
 8002bf0:	482d      	ldr	r0, [pc, #180]	; (8002ca8 <gc_execute_line+0x131c>)
 8002bf2:	f005 fdf7 	bl	80087e4 <system_convert_array_steps_to_mpos>
}
 8002bf6:	e46e      	b.n	80024d6 <gc_execute_line+0xb4a>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bfa:	4d25      	ldr	r5, [pc, #148]	; (8002c90 <gc_execute_line+0x1304>)
 8002bfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c00:	9304      	str	r3, [sp, #16]
 8002c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c04:	4c28      	ldr	r4, [pc, #160]	; (8002ca8 <gc_execute_line+0x131c>)
 8002c06:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8002c08:	9303      	str	r3, [sp, #12]
 8002c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002c12:	4628      	mov	r0, r5
 8002c14:	a915      	add	r1, sp, #84	; 0x54
 8002c16:	f1a5 032c 	sub.w	r3, r5, #44	; 0x2c
 8002c1a:	9600      	str	r6, [sp, #0]
 8002c1c:	f000 fe6c 	bl	80038f8 <mc_arc>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002c20:	e704      	b.n	8002a2c <gc_execute_line+0x10a0>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002c22:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002c26:	4d1a      	ldr	r5, [pc, #104]	; (8002c90 <gc_execute_line+0x1304>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002c28:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	a915      	add	r1, sp, #84	; 0x54
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002c30:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002c34:	4c1c      	ldr	r4, [pc, #112]	; (8002ca8 <gc_execute_line+0x131c>)
 8002c36:	f000 fe29 	bl	800388c <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002c3a:	e6f7      	b.n	8002a2c <gc_execute_line+0x10a0>
        mc_line(gc_block.values.xyz, pl_data);
 8002c3c:	4d14      	ldr	r5, [pc, #80]	; (8002c90 <gc_execute_line+0x1304>)
 8002c3e:	a915      	add	r1, sp, #84	; 0x54
 8002c40:	4628      	mov	r0, r5
 8002c42:	f000 fe23 	bl	800388c <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002c46:	4c18      	ldr	r4, [pc, #96]	; (8002ca8 <gc_execute_line+0x131c>)
 8002c48:	e6f0      	b.n	8002a2c <gc_execute_line+0x10a0>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	f7fe bf27 	b.w	8001a9e <gc_execute_line+0x112>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c50:	2322      	movs	r3, #34	; 0x22
 8002c52:	f7fe bf24 	b.w	8001a9e <gc_execute_line+0x112>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002c56:	461e      	mov	r6, r3
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <gc_execute_line+0x1320>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002c5a:	940e      	str	r4, [sp, #56]	; 0x38
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <gc_execute_line+0x1324>)
 8002c60:	9b08      	ldr	r3, [sp, #32]
 8002c62:	4133      	asrs	r3, r6
 8002c64:	f013 0f01 	tst.w	r3, #1
 8002c68:	f106 0601 	add.w	r6, r6, #1
 8002c6c:	d005      	beq.n	8002c7a <gc_execute_line+0x12ee>
 8002c6e:	6920      	ldr	r0, [r4, #16]
 8002c70:	910f      	str	r1, [sp, #60]	; 0x3c
 8002c72:	f7fd fe0f 	bl	8000894 <__aeabi_fmul>
 8002c76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c78:	6120      	str	r0, [r4, #16]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002c7a:	2e03      	cmp	r6, #3
 8002c7c:	f104 0404 	add.w	r4, r4, #4
 8002c80:	d1ee      	bne.n	8002c60 <gc_execute_line+0x12d4>
 8002c82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002c84:	e775      	b.n	8002b72 <gc_execute_line+0x11e6>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002c86:	2323      	movs	r3, #35	; 0x23
 8002c88:	f7fe bf09 	b.w	8001a9e <gc_execute_line+0x112>
 8002c8c:	200012bc 	.word	0x200012bc
 8002c90:	20001308 	.word	0x20001308
 8002c94:	20001288 	.word	0x20001288
 8002c98:	20001378 	.word	0x20001378
 8002c9c:	3ba3d70a 	.word	0x3ba3d70a
 8002ca0:	3a83126f 	.word	0x3a83126f
 8002ca4:	2000139c 	.word	0x2000139c
 8002ca8:	200012a4 	.word	0x200012a4
 8002cac:	200012cc 	.word	0x200012cc
 8002cb0:	41cb3333 	.word	0x41cb3333

08002cb4 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	460b      	mov	r3, r1
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cba:	7a02      	ldrb	r2, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002cbc:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cbe:	f042 0204 	orr.w	r2, r2, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002cc2:	4913      	ldr	r1, [pc, #76]	; (8002d10 <jog_execute+0x5c>)
  pl_data->feed_rate = gc_block->values.f;
 8002cc4:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cc6:	722a      	strb	r2, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002cc8:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002ccc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002cd0:	0693      	lsls	r3, r2, #26
 8002cd2:	d503      	bpl.n	8002cdc <jog_execute+0x28>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f005 fda3 	bl	8008820 <system_check_travel_limits>
 8002cda:	b9a8      	cbnz	r0, 8002d08 <jog_execute+0x54>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
  if (sys.state == STATE_IDLE) {
 8002cdc:	4e0d      	ldr	r6, [pc, #52]	; (8002d14 <jog_execute+0x60>)
  mc_line(gc_block->values.xyz, pl_data);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f000 fdd3 	bl	800388c <mc_line>
  if (sys.state == STATE_IDLE) {
 8002ce6:	7834      	ldrb	r4, [r6, #0]
 8002ce8:	b114      	cbz	r4, 8002cf0 <jog_execute+0x3c>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 8002cea:	2400      	movs	r4, #0
}
 8002cec:	4620      	mov	r0, r4
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002cf0:	f001 fb3e 	bl	8004370 <plan_get_current_block>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d0f8      	beq.n	8002cea <jog_execute+0x36>
      sys.state = STATE_JOG;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002cfc:	f004 fe2e 	bl	800795c <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002d00:	f004 fb2c 	bl	800735c <st_wake_up>
}
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002d08:	240f      	movs	r4, #15
}
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	bf00      	nop
 8002d10:	20001834 	.word	0x20001834
 8002d14:	20001378 	.word	0x20001378

08002d18 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002d18:	b510      	push	{r4, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002d1a:	2101      	movs	r1, #1
{
 8002d1c:	b084      	sub	sp, #16
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002d1e:	2009      	movs	r0, #9
 8002d20:	f7fe fb70 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002d24:	4c1e      	ldr	r4, [pc, #120]	; (8002da0 <limits_init+0x88>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <limits_init+0x8c>)
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002d28:	4669      	mov	r1, sp
 8002d2a:	481f      	ldr	r0, [pc, #124]	; (8002da8 <limits_init+0x90>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002d2c:	9300      	str	r3, [sp, #0]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002d2e:	f7fe f93b 	bl	8000fa8 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002d32:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002d36:	071b      	lsls	r3, r3, #28
 8002d38:	d406      	bmi.n	8002d48 <limits_init+0x30>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <limits_init+0x94>)
 8002d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002d44:	b004      	add	sp, #16
 8002d46:	bd10      	pop	{r4, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8002d48:	2064      	movs	r0, #100	; 0x64
 8002d4a:	f001 f919 	bl	8003f80 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002d4e:	210c      	movs	r1, #12
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7fe faf7 	bl	8001344 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002d56:	210d      	movs	r1, #13
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7fe faf3 	bl	8001344 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002d5e:	210e      	movs	r1, #14
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fe faef 	bl	8001344 <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002d66:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002d6a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002d6e:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8002d72:	bf14      	ite	ne
 8002d74:	2408      	movne	r4, #8
 8002d76:	240c      	moveq	r4, #12
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002d78:	2200      	movs	r2, #0
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002d7a:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8002d7c:	a802      	add	r0, sp, #8
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002d7e:	9102      	str	r1, [sp, #8]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002d80:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002d84:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_Init(&EXTI_InitStructure);
 8002d88:	f88d 400d 	strb.w	r4, [sp, #13]
 8002d8c:	f7fd ffe0 	bl	8000d50 <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <limits_init+0x98>)
		NVIC_Init(&NVIC_InitStructure);
 8002d92:	a801      	add	r0, sp, #4
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002d94:	9301      	str	r3, [sp, #4]
		NVIC_Init(&NVIC_InitStructure);
 8002d96:	f7fd ffa9 	bl	8000cec <NVIC_Init>
}
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	bf00      	nop
 8002da0:	20001834 	.word	0x20001834
 8002da4:	48037000 	.word	0x48037000
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	01020228 	.word	0x01020228

08002db4 <limits_disable>:
 8002db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db8:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <limits_disable+0xc>)
 8002dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif
}
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8002dc4:	b508      	push	{r3, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002dc6:	4810      	ldr	r0, [pc, #64]	; (8002e08 <limits_get_state+0x44>)
 8002dc8:	f7fe fa74 	bl	80012b4 <GPIO_ReadInputData>
 8002dcc:	4603      	mov	r3, r0
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <limits_get_state+0x48>)
 8002dd0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8002dd4:	0652      	lsls	r2, r2, #25
 8002dd6:	bf5c      	itt	pl
 8002dd8:	f480 43e0 	eorpl.w	r3, r0, #28672	; 0x7000
 8002ddc:	b29b      	uxthpl	r3, r3
  if (pin) {
 8002dde:	b18b      	cbz	r3, 8002e04 <limits_get_state+0x40>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002de0:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <limits_get_state+0x4c>)
 8002de2:	8810      	ldrh	r0, [r2, #0]
 8002de4:	8851      	ldrh	r1, [r2, #2]
 8002de6:	4203      	tst	r3, r0
  uint8_t limit_state = 0;
 8002de8:	bf18      	it	ne
 8002dea:	2001      	movne	r0, #1
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002dec:	8892      	ldrh	r2, [r2, #4]
  uint8_t limit_state = 0;
 8002dee:	bf08      	it	eq
 8002df0:	2000      	moveq	r0, #0
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002df2:	420b      	tst	r3, r1
 8002df4:	bf18      	it	ne
 8002df6:	f040 0002 	orrne.w	r0, r0, #2
 8002dfa:	4213      	tst	r3, r2
 8002dfc:	d001      	beq.n	8002e02 <limits_get_state+0x3e>
 8002dfe:	f040 0004 	orr.w	r0, r0, #4
    }
  }
#endif
  return(limit_state);
}
 8002e02:	bd08      	pop	{r3, pc}
  uint8_t limit_state = 0;
 8002e04:	4618      	mov	r0, r3
}
 8002e06:	bd08      	pop	{r3, pc}
 8002e08:	40010c00 	.word	0x40010c00
 8002e0c:	20001834 	.word	0x20001834
 8002e10:	0800b124 	.word	0x0800b124

08002e14 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8002e14:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8002e16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e1a:	f7fd ffd9 	bl	8000dd0 <EXTI_GetITStatus>
 8002e1e:	bb38      	cbnz	r0, 8002e70 <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8002e20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e24:	f7fd ffd4 	bl	8000dd0 <EXTI_GetITStatus>
 8002e28:	b9e8      	cbnz	r0, 8002e66 <EXTI15_10_IRQHandler+0x52>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8002e2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e2e:	f7fd ffcf 	bl	8000dd0 <EXTI_GetITStatus>
 8002e32:	b998      	cbnz	r0, 8002e5c <EXTI15_10_IRQHandler+0x48>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8002e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e38:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <EXTI15_10_IRQHandler+0x68>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <EXTI15_10_IRQHandler+0x6c>)
 8002e3c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d002      	beq.n	8002e4c <EXTI15_10_IRQHandler+0x38>
    if (!(sys_rt_exec_alarm)) {
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <EXTI15_10_IRQHandler+0x70>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <EXTI15_10_IRQHandler+0x3a>
      mc_reset(); // Initiate system kill.
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8002e4c:	bd08      	pop	{r3, pc}
      mc_reset(); // Initiate system kill.
 8002e4e:	f000 ff9b 	bl	8003d88 <mc_reset>
}
 8002e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8002e56:	2001      	movs	r0, #1
 8002e58:	f005 bd22 	b.w	80088a0 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8002e5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e60:	f7fd ffc4 	bl	8000dec <EXTI_ClearITPendingBit>
 8002e64:	e7e6      	b.n	8002e34 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8002e66:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e6a:	f7fd ffbf 	bl	8000dec <EXTI_ClearITPendingBit>
 8002e6e:	e7dc      	b.n	8002e2a <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8002e70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e74:	f7fd ffba 	bl	8000dec <EXTI_ClearITPendingBit>
 8002e78:	e7d2      	b.n	8002e20 <EXTI15_10_IRQHandler+0xc>
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	20001378 	.word	0x20001378
 8002e84:	200016b0 	.word	0x200016b0

08002e88 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002e8c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8003150 <limits_go_home+0x2c8>
{
 8002e90:	b08f      	sub	sp, #60	; 0x3c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002e92:	f898 3001 	ldrb.w	r3, [r8, #1]
{
 8002e96:	9004      	str	r0, [sp, #16]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002e98:	b113      	cbz	r3, 8002ea0 <limits_go_home+0x18>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8002e9a:	b00f      	add	sp, #60	; 0x3c
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002ea0:	4604      	mov	r4, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002ea2:	2106      	movs	r1, #6
 8002ea4:	4aa1      	ldr	r2, [pc, #644]	; (800312c <limits_go_home+0x2a4>)
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002ea6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8002eaa:	6810      	ldr	r0, [r2, #0]
 8002eac:	8892      	ldrh	r2, [r2, #4]
 8002eae:	9308      	str	r3, [sp, #32]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002eb0:	f014 0301 	ands.w	r3, r4, #1
 8002eb4:	9006      	str	r0, [sp, #24]
 8002eb6:	f8ad 201c 	strh.w	r2, [sp, #28]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002ebe:	f004 0901 	and.w	r9, r4, #1
 8002ec2:	9305      	str	r3, [sp, #20]
 8002ec4:	f000 8199 	beq.w	80031fa <limits_go_home+0x372>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002ec8:	4f99      	ldr	r7, [pc, #612]	; (8003130 <limits_go_home+0x2a8>)
 8002eca:	499a      	ldr	r1, [pc, #616]	; (8003134 <limits_go_home+0x2ac>)
 8002ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ece:	f7fd fce1 	bl	8000894 <__aeabi_fmul>
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4682      	mov	sl, r0
 8002ed6:	f7fd fe8f 	bl	8000bf8 <__aeabi_fcmpge>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	f000 8195 	beq.w	800320a <limits_go_home+0x382>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002ee0:	9b04      	ldr	r3, [sp, #16]
 8002ee2:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002ee6:	0798      	lsls	r0, r3, #30
 8002ee8:	9202      	str	r2, [sp, #8]
 8002eea:	d50b      	bpl.n	8002f04 <limits_go_home+0x7c>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002eec:	4991      	ldr	r1, [pc, #580]	; (8003134 <limits_go_home+0x2ac>)
 8002eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef0:	f7fd fcd0 	bl	8000894 <__aeabi_fmul>
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	4650      	mov	r0, sl
 8002ef8:	4621      	mov	r1, r4
 8002efa:	f7fd fe7d 	bl	8000bf8 <__aeabi_fcmpge>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	f000 8181 	beq.w	8003206 <limits_go_home+0x37e>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002f04:	9b04      	ldr	r3, [sp, #16]
 8002f06:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8002f0a:	0759      	lsls	r1, r3, #29
 8002f0c:	9203      	str	r2, [sp, #12]
 8002f0e:	d50b      	bpl.n	8002f28 <limits_go_home+0xa0>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002f10:	4988      	ldr	r1, [pc, #544]	; (8003134 <limits_go_home+0x2ac>)
 8002f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f14:	f7fd fcbe 	bl	8000894 <__aeabi_fmul>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4650      	mov	r0, sl
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f7fd fe6b 	bl	8000bf8 <__aeabi_fcmpge>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	f000 816d 	beq.w	8003202 <limits_go_home+0x37a>
  float homing_rate = settings.homing_seek_rate;
 8002f28:	2204      	movs	r2, #4
 8002f2a:	f8d7 b050 	ldr.w	fp, [r7, #80]	; 0x50
 8002f2e:	fa5f f989 	uxtb.w	r9, r9
 8002f32:	4653      	mov	r3, sl
  bool approach = true;
 8002f34:	2501      	movs	r5, #1
 8002f36:	46da      	mov	sl, fp
 8002f38:	46cb      	mov	fp, r9
 8002f3a:	4691      	mov	r9, r2
 8002f3c:	4e7e      	ldr	r6, [pc, #504]	; (8003138 <limits_go_home+0x2b0>)
    system_convert_array_steps_to_mpos(target,sys_position);
 8002f3e:	497f      	ldr	r1, [pc, #508]	; (800313c <limits_go_home+0x2b4>)
 8002f40:	a80b      	add	r0, sp, #44	; 0x2c
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	f005 fc4e 	bl	80087e4 <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002f48:	9b01      	ldr	r3, [sp, #4]
 8002f4a:	f1bb 0f00 	cmp.w	fp, #0
 8002f4e:	f000 80e9 	beq.w	8003124 <limits_go_home+0x29c>
          sys_position[idx] = 0;
 8002f52:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f54:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002f58:	4878      	ldr	r0, [pc, #480]	; (800313c <limits_go_home+0x2b4>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f5a:	07d2      	lsls	r2, r2, #31
          sys_position[idx] = 0;
 8002f5c:	6001      	str	r1, [r0, #0]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f5e:	f140 813a 	bpl.w	80031d6 <limits_go_home+0x34e>
          if (approach) { target[idx] = -max_travel; }
 8002f62:	2d00      	cmp	r5, #0
 8002f64:	f040 813a 	bne.w	80031dc <limits_go_home+0x354>
          else { target[idx] = max_travel; }
 8002f68:	930b      	str	r3, [sp, #44]	; 0x2c
        n_active_axis++;
 8002f6a:	4658      	mov	r0, fp
        axislock |= step_pin[idx];
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002f72:	9902      	ldr	r1, [sp, #8]
 8002f74:	b181      	cbz	r1, 8002f98 <limits_go_home+0x110>
          sys_position[idx] = 0;
 8002f76:	2000      	movs	r0, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f78:	f8b7 c04a 	ldrh.w	ip, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002f7c:	496f      	ldr	r1, [pc, #444]	; (800313c <limits_go_home+0x2b4>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f7e:	f01c 0f02 	tst.w	ip, #2
          sys_position[idx] = 0;
 8002f82:	6048      	str	r0, [r1, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f84:	f000 812e 	beq.w	80031e4 <limits_go_home+0x35c>
          if (approach) { target[idx] = -max_travel; }
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	f040 812e 	bne.w	80031ea <limits_go_home+0x362>
          else { target[idx] = max_travel; }
 8002f8e:	930c      	str	r3, [sp, #48]	; 0x30
        n_active_axis++;
 8002f90:	4610      	mov	r0, r2
        axislock |= step_pin[idx];
 8002f92:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8002f96:	430c      	orrs	r4, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002f98:	9a03      	ldr	r2, [sp, #12]
 8002f9a:	b18a      	cbz	r2, 8002fc0 <limits_go_home+0x138>
          sys_position[idx] = 0;
 8002f9c:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002f9e:	f8b7 c04a 	ldrh.w	ip, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002fa2:	4a66      	ldr	r2, [pc, #408]	; (800313c <limits_go_home+0x2b4>)
        n_active_axis++;
 8002fa4:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002fa6:	f01c 0f04 	tst.w	ip, #4
        n_active_axis++;
 8002faa:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 8002fac:	6091      	str	r1, [r2, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002fae:	f040 810e 	bne.w	80031ce <limits_go_home+0x346>
          if (approach) { target[idx] = max_travel; }
 8002fb2:	b90d      	cbnz	r5, 8002fb8 <limits_go_home+0x130>
          if (approach) { target[idx] = -max_travel; }
 8002fb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fb8:	930d      	str	r3, [sp, #52]	; 0x34
        axislock |= step_pin[idx];
 8002fba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002fbe:	431c      	orrs	r4, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8002fc0:	f7fd fc10 	bl	80007e4 <__aeabi_ui2f>
 8002fc4:	f007 f82a 	bl	800a01c <sqrtf>
 8002fc8:	4651      	mov	r1, sl
    sys.homing_axis_lock = axislock;
 8002fca:	f8a8 4006 	strh.w	r4, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8002fce:	f7fd fc61 	bl	8000894 <__aeabi_fmul>
 8002fd2:	4603      	mov	r3, r0
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8002fd4:	a908      	add	r1, sp, #32
 8002fd6:	a80b      	add	r0, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8002fd8:	9308      	str	r3, [sp, #32]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8002fda:	f001 fabd 	bl	8004558 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8002fde:	2304      	movs	r3, #4
 8002fe0:	f888 3004 	strb.w	r3, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8002fe4:	f004 fcba 	bl	800795c <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8002fe8:	f004 f9b8 	bl	800735c <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002fec:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800314c <limits_go_home+0x2c4>
      if (approach) {
 8002ff0:	bb15      	cbnz	r5, 8003038 <limits_go_home+0x1b0>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8002ff2:	f004 fcb3 	bl	800795c <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8002ff6:	7833      	ldrb	r3, [r6, #0]
 8002ff8:	f013 0f34 	tst.w	r3, #52	; 0x34
 8002ffc:	d155      	bne.n	80030aa <limits_go_home+0x222>
    } while (STEP_MASK & axislock);
 8002ffe:	0763      	lsls	r3, r4, #29
 8003000:	d1f6      	bne.n	8002ff0 <limits_go_home+0x168>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8003002:	f004 fb85 	bl	8007710 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8003006:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800300a:	f000 ffb9 	bl	8003f80 <delay_ms>
    approach = !approach;
 800300e:	f085 0401 	eor.w	r4, r5, #1
    if (approach) {
 8003012:	2d00      	cmp	r5, #0
 8003014:	f040 809e 	bne.w	8003154 <limits_go_home+0x2cc>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003018:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 800301a:	4949      	ldr	r1, [pc, #292]	; (8003140 <limits_go_home+0x2b8>)
 800301c:	4628      	mov	r0, r5
 800301e:	f7fd fc39 	bl	8000894 <__aeabi_fmul>
 8003022:	f109 39ff 	add.w	r9, r9, #4294967295
  } while (n_cycle-- > 0);
 8003026:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 800302a:	4603      	mov	r3, r0
      homing_rate = settings.homing_feed_rate;
 800302c:	f8d7 a04c 	ldr.w	sl, [r7, #76]	; 0x4c
  } while (n_cycle-- > 0);
 8003030:	f000 809a 	beq.w	8003168 <limits_go_home+0x2e0>
    approach = !approach;
 8003034:	4625      	mov	r5, r4
 8003036:	e782      	b.n	8002f3e <limits_go_home+0xb6>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003038:	4650      	mov	r0, sl
 800303a:	f7fe f93b 	bl	80012b4 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 800303e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003042:	065b      	lsls	r3, r3, #25
 8003044:	bf5c      	itt	pl
 8003046:	f480 40e0 	eorpl.w	r0, r0, #28672	; 0x7000
 800304a:	b280      	uxthpl	r0, r0
  if (pin) {
 800304c:	b328      	cbz	r0, 800309a <limits_go_home+0x212>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <limits_go_home+0x2bc>)
 8003050:	8813      	ldrh	r3, [r2, #0]
 8003052:	8852      	ldrh	r2, [r2, #2]
 8003054:	4218      	tst	r0, r3
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	4210      	tst	r0, r2
 800305e:	4a39      	ldr	r2, [pc, #228]	; (8003144 <limits_go_home+0x2bc>)
 8003060:	bf18      	it	ne
 8003062:	f043 0302 	orrne.w	r3, r3, #2
 8003066:	8892      	ldrh	r2, [r2, #4]
 8003068:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 800306a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800306e:	bf18      	it	ne
 8003070:	f043 0304 	orrne.w	r3, r3, #4
          if (axislock & step_pin[idx]) {
 8003074:	4214      	tst	r4, r2
 8003076:	d002      	beq.n	800307e <limits_go_home+0x1f6>
            if (limit_state & (1 << idx)) {
 8003078:	07d8      	lsls	r0, r3, #31
                axislock &= ~(step_pin[idx]);
 800307a:	bf48      	it	mi
 800307c:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 800307e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8003082:	4214      	tst	r4, r2
 8003084:	d002      	beq.n	800308c <limits_go_home+0x204>
            if (limit_state & (1 << idx)) {
 8003086:	0799      	lsls	r1, r3, #30
                axislock &= ~(step_pin[idx]);
 8003088:	bf48      	it	mi
 800308a:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 800308c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003090:	4214      	tst	r4, r2
 8003092:	d002      	beq.n	800309a <limits_go_home+0x212>
            if (limit_state & (1 << idx)) {
 8003094:	089b      	lsrs	r3, r3, #2
                axislock &= ~(step_pin[idx]);
 8003096:	bf18      	it	ne
 8003098:	4394      	bicne	r4, r2
        sys.homing_axis_lock = axislock;
 800309a:	f8a8 4006 	strh.w	r4, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800309e:	f004 fc5d 	bl	800795c <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 80030a2:	7833      	ldrb	r3, [r6, #0]
 80030a4:	f013 0f34 	tst.w	r3, #52	; 0x34
 80030a8:	d0a9      	beq.n	8002ffe <limits_go_home+0x176>
        uint8_t rt_exec = sys_rt_exec_state;
 80030aa:	7833      	ldrb	r3, [r6, #0]
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80030ac:	06d8      	lsls	r0, r3, #27
        uint8_t rt_exec = sys_rt_exec_state;
 80030ae:	b2dc      	uxtb	r4, r3
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80030b0:	f100 809f 	bmi.w	80031f2 <limits_go_home+0x36a>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80030b4:	06a1      	lsls	r1, r4, #26
 80030b6:	d40c      	bmi.n	80030d2 <limits_go_home+0x24a>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80030b8:	b185      	cbz	r5, 80030dc <limits_go_home+0x254>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80030ba:	0763      	lsls	r3, r4, #29
 80030bc:	f100 80c5 	bmi.w	800324a <limits_go_home+0x3c2>
        if (sys_rt_exec_alarm) {
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <limits_go_home+0x2c0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 80c4 	bne.w	8003252 <limits_go_home+0x3ca>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80030ca:	2004      	movs	r0, #4
 80030cc:	f005 fbde 	bl	800888c <system_clear_exec_state_flag>
          break;
 80030d0:	e797      	b.n	8003002 <limits_go_home+0x17a>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80030d2:	2007      	movs	r0, #7
 80030d4:	f005 fbe4 	bl	80088a0 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80030d8:	2d00      	cmp	r5, #0
 80030da:	d1ee      	bne.n	80030ba <limits_go_home+0x232>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80030dc:	481b      	ldr	r0, [pc, #108]	; (800314c <limits_go_home+0x2c4>)
 80030de:	f7fe f8e9 	bl	80012b4 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80030e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80030e6:	065a      	lsls	r2, r3, #25
 80030e8:	bf5c      	itt	pl
 80030ea:	f480 40e0 	eorpl.w	r0, r0, #28672	; 0x7000
 80030ee:	b280      	uxthpl	r0, r0
  if (pin) {
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d0e5      	beq.n	80030c0 <limits_go_home+0x238>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <limits_go_home+0x2bc>)
 80030f6:	8813      	ldrh	r3, [r2, #0]
 80030f8:	8852      	ldrh	r2, [r2, #2]
 80030fa:	4218      	tst	r0, r3
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	4210      	tst	r0, r2
 8003104:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <limits_go_home+0x2bc>)
 8003106:	bf18      	it	ne
 8003108:	f043 0302 	orrne.w	r3, r3, #2
 800310c:	8892      	ldrh	r2, [r2, #4]
 800310e:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003110:	9a04      	ldr	r2, [sp, #16]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003112:	bf18      	it	ne
 8003114:	f043 0304 	orrne.w	r3, r3, #4
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003118:	421a      	tst	r2, r3
 800311a:	d0d1      	beq.n	80030c0 <limits_go_home+0x238>
 800311c:	2008      	movs	r0, #8
 800311e:	f005 fbbf 	bl	80088a0 <system_set_exec_alarm>
 8003122:	e7cd      	b.n	80030c0 <limits_go_home+0x238>
    n_active_axis = 0;
 8003124:	4658      	mov	r0, fp
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003126:	2201      	movs	r2, #1
    axislock = 0;
 8003128:	465c      	mov	r4, fp
 800312a:	e722      	b.n	8002f72 <limits_go_home+0xea>
 800312c:	0800b12c 	.word	0x0800b12c
 8003130:	20001834 	.word	0x20001834
 8003134:	bfc00000 	.word	0xbfc00000
 8003138:	2000138d 	.word	0x2000138d
 800313c:	2000139c 	.word	0x2000139c
 8003140:	40a00000 	.word	0x40a00000
 8003144:	0800b124 	.word	0x0800b124
 8003148:	200016b0 	.word	0x200016b0
 800314c:	40010c00 	.word	0x40010c00
 8003150:	20001378 	.word	0x20001378
      max_travel = settings.homing_pulloff;
 8003154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
      homing_rate = settings.homing_seek_rate;
 8003156:	f109 39ff 	add.w	r9, r9, #4294967295
  } while (n_cycle-- > 0);
 800315a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      homing_rate = settings.homing_seek_rate;
 800315e:	461d      	mov	r5, r3
 8003160:	f8d7 a050 	ldr.w	sl, [r7, #80]	; 0x50
  } while (n_cycle-- > 0);
 8003164:	f47f af66 	bne.w	8003034 <limits_go_home+0x1ac>
    if (cycle_mask & bit(idx)) {
 8003168:	9b05      	ldr	r3, [sp, #20]
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800316a:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
    if (cycle_mask & bit(idx)) {
 800316e:	b15b      	cbz	r3, 8003188 <limits_go_home+0x300>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003170:	07e0      	lsls	r0, r4, #31
 8003172:	d460      	bmi.n	8003236 <limits_go_home+0x3ae>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003174:	4628      	mov	r0, r5
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	f7fd fb8c 	bl	8000894 <__aeabi_fmul>
 800317c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003180:	f006 fee8 	bl	8009f54 <lroundf>
        sys_position[idx] = set_axis_position;
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <limits_go_home+0x3d4>)
 8003186:	6018      	str	r0, [r3, #0]
    if (cycle_mask & bit(idx)) {
 8003188:	9b02      	ldr	r3, [sp, #8]
 800318a:	b15b      	cbz	r3, 80031a4 <limits_go_home+0x31c>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800318c:	07a1      	lsls	r1, r4, #30
 800318e:	d448      	bmi.n	8003222 <limits_go_home+0x39a>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003190:	4628      	mov	r0, r5
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	f7fd fb7e 	bl	8000894 <__aeabi_fmul>
 8003198:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800319c:	f006 feda 	bl	8009f54 <lroundf>
        sys_position[idx] = set_axis_position;
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <limits_go_home+0x3d4>)
 80031a2:	6058      	str	r0, [r3, #4]
    if (cycle_mask & bit(idx)) {
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	b163      	cbz	r3, 80031c2 <limits_go_home+0x33a>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	d531      	bpl.n	8003210 <limits_go_home+0x388>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80031ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7fd fa68 	bl	8000684 <__addsf3>
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	f7fd fb6d 	bl	8000894 <__aeabi_fmul>
 80031ba:	f006 fecb 	bl	8009f54 <lroundf>
        sys_position[idx] = set_axis_position;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <limits_go_home+0x3d4>)
 80031c0:	6098      	str	r0, [r3, #8]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 80031c2:	2300      	movs	r3, #0
 80031c4:	f888 3004 	strb.w	r3, [r8, #4]
}
 80031c8:	b00f      	add	sp, #60	; 0x3c
 80031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (approach) { target[idx] = -max_travel; }
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	f47f aef0 	bne.w	8002fb4 <limits_go_home+0x12c>
 80031d4:	e6f0      	b.n	8002fb8 <limits_go_home+0x130>
          if (approach) { target[idx] = max_travel; }
 80031d6:	2d00      	cmp	r5, #0
 80031d8:	f47f aec6 	bne.w	8002f68 <limits_go_home+0xe0>
          if (approach) { target[idx] = -max_travel; }
 80031dc:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80031e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80031e2:	e6c2      	b.n	8002f6a <limits_go_home+0xe2>
          if (approach) { target[idx] = max_travel; }
 80031e4:	2d00      	cmp	r5, #0
 80031e6:	f47f aed2 	bne.w	8002f8e <limits_go_home+0x106>
          if (approach) { target[idx] = -max_travel; }
 80031ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80031ee:	910c      	str	r1, [sp, #48]	; 0x30
 80031f0:	e6ce      	b.n	8002f90 <limits_go_home+0x108>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80031f2:	2006      	movs	r0, #6
 80031f4:	f005 fb54 	bl	80088a0 <system_set_exec_alarm>
 80031f8:	e75c      	b.n	80030b4 <limits_go_home+0x22c>
  float max_travel = 0.0f;
 80031fa:	f04f 0a00 	mov.w	sl, #0
 80031fe:	4f18      	ldr	r7, [pc, #96]	; (8003260 <limits_go_home+0x3d8>)
 8003200:	e66e      	b.n	8002ee0 <limits_go_home+0x58>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003202:	46a2      	mov	sl, r4
 8003204:	e690      	b.n	8002f28 <limits_go_home+0xa0>
 8003206:	46a2      	mov	sl, r4
 8003208:	e67c      	b.n	8002f04 <limits_go_home+0x7c>
 800320a:	f04f 0a00 	mov.w	sl, #0
 800320e:	e667      	b.n	8002ee0 <limits_go_home+0x58>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003210:	4628      	mov	r0, r5
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	f7fd fb3e 	bl	8000894 <__aeabi_fmul>
 8003218:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800321c:	f006 fe9a 	bl	8009f54 <lroundf>
 8003220:	e7cd      	b.n	80031be <limits_go_home+0x336>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003224:	4628      	mov	r0, r5
 8003226:	f7fd fa2d 	bl	8000684 <__addsf3>
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	f7fd fb32 	bl	8000894 <__aeabi_fmul>
 8003230:	f006 fe90 	bl	8009f54 <lroundf>
 8003234:	e7b4      	b.n	80031a0 <limits_go_home+0x318>
 8003236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003238:	4628      	mov	r0, r5
 800323a:	f7fd fa23 	bl	8000684 <__addsf3>
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	f7fd fb28 	bl	8000894 <__aeabi_fmul>
 8003244:	f006 fe86 	bl	8009f54 <lroundf>
 8003248:	e79c      	b.n	8003184 <limits_go_home+0x2fc>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800324a:	2009      	movs	r0, #9
 800324c:	f005 fb28 	bl	80088a0 <system_set_exec_alarm>
 8003250:	e736      	b.n	80030c0 <limits_go_home+0x238>
          mc_reset(); // Stop motors, if they are running.
 8003252:	f000 fd99 	bl	8003d88 <mc_reset>
          protocol_execute_realtime();
 8003256:	f002 fa41 	bl	80056dc <protocol_execute_realtime>
          return;
 800325a:	e61e      	b.n	8002e9a <limits_go_home+0x12>
 800325c:	2000139c 	.word	0x2000139c
 8003260:	20001834 	.word	0x20001834

08003264 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003264:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003266:	f005 fadb 	bl	8008820 <system_check_travel_limits>
 800326a:	b178      	cbz	r0, 800328c <limits_soft_check+0x28>
    sys.soft_limit = true;
 800326c:	2301      	movs	r3, #1
 800326e:	4c0c      	ldr	r4, [pc, #48]	; (80032a0 <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003270:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003272:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003274:	2808      	cmp	r0, #8
 8003276:	d10a      	bne.n	800328e <limits_soft_check+0x2a>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8003278:	f005 fafe 	bl	8008878 <system_set_exec_state_flag>
 800327c:	e001      	b.n	8003282 <limits_soft_check+0x1e>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
 800327e:	7823      	ldrb	r3, [r4, #0]
 8003280:	b12b      	cbz	r3, 800328e <limits_soft_check+0x2a>
        protocol_execute_realtime();
 8003282:	f002 fa2b 	bl	80056dc <protocol_execute_realtime>
        if (sys.abort) { return; }
 8003286:	7863      	ldrb	r3, [r4, #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f8      	beq.n	800327e <limits_soft_check+0x1a>
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 800328c:	bd10      	pop	{r4, pc}
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800328e:	f000 fd7b 	bl	8003d88 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003292:	2002      	movs	r0, #2
 8003294:	f005 fb04 	bl	80088a0 <system_set_exec_alarm>
}
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800329c:	f002 ba1e 	b.w	80056dc <protocol_execute_realtime>
 80032a0:	20001378 	.word	0x20001378

080032a4 <USART1_Configuration>:
#include "usb_pwr.h"
#endif
#include "stm32eeprom.h"
#ifndef aUSEUSB
#include "stm32f10x_usart.h"
void USART1_Configuration(u32 BaudRate) {
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4606      	mov	r6, r0
 80032a8:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80032aa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80032ae:	f7fd fd13 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80032b2:	2501      	movs	r5, #1
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80032b4:	2325      	movs	r3, #37	; 0x25
	NVIC_Init(&NVIC_InitStructure);
 80032b6:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80032b8:	f8ad 3004 	strh.w	r3, [sp, #4]
			ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032bc:	4c1c      	ldr	r4, [pc, #112]	; (8003330 <USART1_Configuration+0x8c>)
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80032be:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80032c2:	f7fd fd13 	bl	8000cec <NVIC_Init>
	RCC_APB2PeriphClockCmd(
 80032c6:	4629      	mov	r1, r5
 80032c8:	f244 0005 	movw	r0, #16389	; 0x4005
 80032cc:	f7fe f89a 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <USART1_Configuration+0x90>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032d2:	4620      	mov	r0, r4
 80032d4:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80032d6:	9300      	str	r3, [sp, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032d8:	f7fd fe66 	bl	8000fa8 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80032dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80032e0:	2304      	movs	r3, #4
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032e2:	4669      	mov	r1, sp
 80032e4:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80032e6:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80032ea:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032ee:	f7fd fe5b 	bl	8000fa8 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = BaudRate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
 80032f2:	2300      	movs	r3, #0
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80032f4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80032f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
			USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80032fc:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
	USART_InitStructure.USART_HardwareFlowControl =
 8003300:	f8ad 3014 	strh.w	r3, [sp, #20]
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003304:	89a3      	ldrh	r3, [r4, #12]
	USART_Init(USART1, &USART_InitStructure);
 8003306:	4620      	mov	r0, r4
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003308:	b29b      	uxth	r3, r3
 800330a:	f043 030c 	orr.w	r3, r3, #12
	USART_InitStructure.USART_BaudRate = BaudRate;
 800330e:	9602      	str	r6, [sp, #8]
	USART_Init(USART1, &USART_InitStructure);
 8003310:	a902      	add	r1, sp, #8
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003312:	81a3      	strh	r3, [r4, #12]
	USART_Init(USART1, &USART_InitStructure);
 8003314:	f7fe f95a 	bl	80015cc <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003318:	462a      	mov	r2, r5
 800331a:	4620      	mov	r0, r4
 800331c:	f240 5125 	movw	r1, #1317	; 0x525
 8003320:	f7fe f9c0 	bl	80016a4 <USART_ITConfig>
	USART_Cmd(USART1, ENABLE);
 8003324:	4629      	mov	r1, r5
 8003326:	4620      	mov	r0, r4
 8003328:	f7fe f9ae 	bl	8001688 <USART_Cmd>
}
 800332c:	b006      	add	sp, #24
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	40010800 	.word	0x40010800
 8003334:	18030200 	.word	0x18030200

08003338 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
	//GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800333c:	2101      	movs	r1, #1
{
 800333e:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003340:	2010      	movs	r0, #16
 8003342:	f7fe f85f 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <main+0x114>)
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003348:	4841      	ldr	r0, [pc, #260]	; (8003450 <main+0x118>)
 800334a:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800334c:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800334e:	f7fd fe2b 	bl	8000fa8 <GPIO_Init>

#endif

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003352:	2101      	movs	r1, #1
 8003354:	2010      	movs	r0, #16
 8003356:	f7fe f855 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <main+0x11c>)
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800335c:	483c      	ldr	r0, [pc, #240]	; (8003450 <main+0x118>)
 800335e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8003360:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003362:	f7fd fe21 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003366:	2101      	movs	r1, #1
 8003368:	2008      	movs	r0, #8
 800336a:	f7fe f84b 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <main+0x120>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003370:	483a      	ldr	r0, [pc, #232]	; (800345c <main+0x124>)
 8003372:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8003374:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003376:	f7fd fe17 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800337a:	2101      	movs	r1, #1
 800337c:	2008      	movs	r0, #8
 800337e:	f7fe f841 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <main+0x128>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003384:	a901      	add	r1, sp, #4
 8003386:	4835      	ldr	r0, [pc, #212]	; (800345c <main+0x124>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8003388:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800338a:	f7fd fe0d 	bl	8000fa8 <GPIO_Init>

	//Set_System();
#ifndef aUSEUSB
	USART1_Configuration(115200);
 800338e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003392:	f7ff ff87 	bl	80032a4 <USART1_Configuration>
	USB_Interrupts_Config();
	USB_Init();
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 8003396:	f7fd fd2f 	bl	8000df8 <FLASH_Unlock>
	eeprom_init();
 800339a:	f7fe fa3b 	bl	8001814 <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 800339e:	4931      	ldr	r1, [pc, #196]	; (8003464 <main+0x12c>)
	// Initialize system state.
#ifdef FORCE_INITIALIZATION_ALARM
    // Force Grbl into an ALARM state upon a power-cycle or hard reset.
    sys.state = STATE_ALARM;
  #else
	sys.state = STATE_IDLE;
 80033a0:	4e31      	ldr	r6, [pc, #196]	; (8003468 <main+0x130>)
	SysTick->CTRL &= 0xfffffffb;
 80033a2:	680a      	ldr	r2, [r1, #0]
	// will return to this loop to be cleanly re-initialized.
	for (;;) {

		// Reset system variables.
		uint8_t prior_state = sys.state;
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80033a4:	2400      	movs	r4, #0
	SysTick->CTRL &= 0xfffffffb;
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	600a      	str	r2, [r1, #0]
	serial_init();   // Setup serial baud rate and interrupts
 80033ac:	f003 fa1a 	bl	80067e4 <serial_init>
	settings_init(); // Load Grbl settings from EEPROM
 80033b0:	f003 fd86 	bl	8006ec0 <settings_init>
	stepper_init();  // Configure stepper pins and interrupt timers
 80033b4:	f004 fa1a 	bl	80077ec <stepper_init>
	system_init();   // Configure pinout pins and pin-change interrupt
 80033b8:	f004 ffbc 	bl	8008334 <system_init>
	memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80033bc:	2200      	movs	r2, #0
	if (bit_istrue(settings.flags, BITFLAG_HOMING_ENABLE)) {
 80033be:	482b      	ldr	r0, [pc, #172]	; (800346c <main+0x134>)
	memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80033c0:	492b      	ldr	r1, [pc, #172]	; (8003470 <main+0x138>)
	if (bit_istrue(settings.flags, BITFLAG_HOMING_ENABLE)) {
 80033c2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
	sys.state = STATE_IDLE;
 80033c6:	7032      	strb	r2, [r6, #0]
	if (bit_istrue(settings.flags, BITFLAG_HOMING_ENABLE)) {
 80033c8:	06c3      	lsls	r3, r0, #27
	memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80033ca:	e9c1 2200 	strd	r2, r2, [r1]
 80033ce:	608a      	str	r2, [r1, #8]
		sys.state = STATE_ALARM;
 80033d0:	bf48      	it	mi
 80033d2:	2201      	movmi	r2, #1
		sys.state = prior_state;
		sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80033d4:	f246 4b64 	movw	fp, #25700	; 0x6464
		sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
		sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 80033d8:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80033dc:	4d25      	ldr	r5, [pc, #148]	; (8003474 <main+0x13c>)
 80033de:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003484 <main+0x14c>
 80033e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003488 <main+0x150>
 80033e6:	4f24      	ldr	r7, [pc, #144]	; (8003478 <main+0x140>)
		sys.state = STATE_ALARM;
 80033e8:	bf48      	it	mi
 80033ea:	7032      	strbmi	r2, [r6, #0]
		memset(sys_probe_position, 0, sizeof(sys_probe_position)); // Clear probe position.
		sys_probe_state = 0;
		sys_rt_exec_state = 0;
		sys_rt_exec_alarm = 0;
		sys_rt_exec_motion_override = 0;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <main+0x144>)
		uint8_t prior_state = sys.state;
 80033ee:	7831      	ldrb	r1, [r6, #0]
		sys_probe_state = 0;
 80033f0:	f889 4000 	strb.w	r4, [r9]
		sys_rt_exec_state = 0;
 80033f4:	f888 4000 	strb.w	r4, [r8]
		sys_rt_exec_alarm = 0;
 80033f8:	703c      	strb	r4, [r7, #0]
		sys_rt_exec_motion_override = 0;
 80033fa:	701c      	strb	r4, [r3, #0]
		sys_rt_exec_accessory_override = 0;
 80033fc:	4b20      	ldr	r3, [pc, #128]	; (8003480 <main+0x148>)
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80033fe:	60b4      	str	r4, [r6, #8]
		sys_rt_exec_accessory_override = 0;
 8003400:	701c      	strb	r4, [r3, #0]
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003402:	6034      	str	r4, [r6, #0]
		memset(sys_probe_position, 0, sizeof(sys_probe_position)); // Clear probe position.
 8003404:	e9c5 4400 	strd	r4, r4, [r5]
		sys.state = prior_state;
 8003408:	7031      	strb	r1, [r6, #0]
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800340a:	6074      	str	r4, [r6, #4]
 800340c:	60f4      	str	r4, [r6, #12]
 800340e:	6134      	str	r4, [r6, #16]
		sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003410:	f8a6 b008 	strh.w	fp, [r6, #8]
		sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8003414:	f886 a00a 	strb.w	sl, [r6, #10]
		memset(sys_probe_position, 0, sizeof(sys_probe_position)); // Clear probe position.
 8003418:	60ac      	str	r4, [r5, #8]

		// Reset Grbl primary systems.
		serial_reset_read_buffer(); // Clear serial read buffer
 800341a:	f003 fae3 	bl	80069e4 <serial_reset_read_buffer>
		gc_init(); // Set g-code parser to default state
 800341e:	f7fe fa97 	bl	8001950 <gc_init>
		spindle_init();
 8003422:	f003 fd67 	bl	8006ef4 <spindle_init>
		coolant_init();
 8003426:	f7fe f95d 	bl	80016e4 <coolant_init>
		limits_init();
 800342a:	f7ff fc75 	bl	8002d18 <limits_init>
		probe_init();
 800342e:	f001 fdd1 	bl	8004fd4 <probe_init>
		plan_reset(); // Clear block buffer and planner variables
 8003432:	f000 ff55 	bl	80042e0 <plan_reset>
		st_reset(); // Clear stepper subsystem variables.
 8003436:	f004 f96b 	bl	8007710 <st_reset>

		// Sync cleared gcode and planner positions to current system position.
		plan_sync_position();
 800343a:	f001 fab3 	bl	80049a4 <plan_sync_position>
		gc_sync_position();
 800343e:	f7fe fa9d 	bl	800197c <gc_sync_position>

		// Print welcome message. Indicates an initialization has occured at power-up or with a reset.
		report_init_message();
 8003442:	f002 fbab 	bl	8005b9c <report_init_message>

		// Start Grbl main loop. Processes program inputs and executes them.
		protocol_main_loop();
 8003446:	f002 f957 	bl	80056f8 <protocol_main_loop>
	for (;;) {
 800344a:	e7cf      	b.n	80033ec <main+0xb4>
 800344c:	10022000 	.word	0x10022000
 8003450:	40011000 	.word	0x40011000
 8003454:	10024000 	.word	0x10024000
 8003458:	10020080 	.word	0x10020080
 800345c:	40010c00 	.word	0x40010c00
 8003460:	10020100 	.word	0x10020100
 8003464:	e000e010 	.word	0xe000e010
 8003468:	20001378 	.word	0x20001378
 800346c:	20001834 	.word	0x20001834
 8003470:	2000139c 	.word	0x2000139c
 8003474:	20001390 	.word	0x20001390
 8003478:	200016b0 	.word	0x200016b0
 800347c:	20001374 	.word	0x20001374
 8003480:	2000138c 	.word	0x2000138c
 8003484:	2000138e 	.word	0x2000138e
 8003488:	2000138d 	.word	0x2000138d

0800348c <_delay_ms>:
	return 0; /* Never reached */
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x) {
	u32 temp;
	SysTick->LOAD = (u32) 72000000 / 8000 * x;                   // Loading time
 800348c:	f242 3128 	movw	r1, #9000	; 0x2328
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <_delay_ms+0x2c>)
void _delay_ms(uint32_t x) {
 8003492:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                    // Empty the counter
 8003494:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                   // Start from bottom
 8003496:	2401      	movs	r4, #1
	do {
		temp = SysTick->CTRL;
 8003498:	461a      	mov	r2, r3
	SysTick->LOAD = (u32) 72000000 / 8000 * x;                   // Loading time
 800349a:	fb01 f100 	mul.w	r1, r1, r0
 800349e:	6059      	str	r1, [r3, #4]
	SysTick->VAL = 0x00;                                    // Empty the counter
 80034a0:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                   // Start from bottom
 80034a2:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 80034a4:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp & (1 << 16)));          // Wait time arrive
 80034a6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d0fa      	beq.n	80034a4 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                   // Close the counter
	SysTick->VAL = 0X00;                                    // Empty the counter
}
 80034ae:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                   // Close the counter
 80034b0:	2300      	movs	r3, #0
 80034b2:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                    // Empty the counter
 80034b4:	6093      	str	r3, [r2, #8]
}
 80034b6:	4770      	bx	lr
 80034b8:	e000e010 	.word	0xe000e010

080034bc <LedBlink>:

int red_v = 0, blue_v = 0, green_v = 0;

void LedBlink(void) {
 80034bc:	b510      	push	{r4, lr}

	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80034be:	4c06      	ldr	r4, [pc, #24]	; (80034d8 <LedBlink+0x1c>)
 80034c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c4:	7822      	ldrb	r2, [r4, #0]
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <LedBlink+0x20>)
 80034c8:	f7fd ff00 	bl	80012cc <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 80034cc:	7823      	ldrb	r3, [r4, #0]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	bf18      	it	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	7023      	strb	r3, [r4, #0]


}
 80034d6:	bd10      	pop	{r4, pc}
 80034d8:	20000014 	.word	0x20000014
 80034dc:	40011000 	.word	0x40011000

080034e0 <RGB_Write>:

int dizi[24], sonuc, kalan;
bool RGB_Data[24][8];

void RGB_Write(int R_Value, int G_Value, int B_Value, int l_row) {
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	for (int i = 0; i < 8; i++) {
		sonuc = G_Value / 2;
 80034e4:	eb01 7ad1 	add.w	sl, r1, r1, lsr #31
 80034e8:	ea4f 7bda 	mov.w	fp, sl, lsr #31
 80034ec:	eb0b 0b6a 	add.w	fp, fp, sl, asr #1
 80034f0:	ea4f 79db 	mov.w	r9, fp, lsr #31
 80034f4:	eb09 096b 	add.w	r9, r9, fp, asr #1
 80034f8:	ea4f 75d9 	mov.w	r5, r9, lsr #31
 80034fc:	eb05 0569 	add.w	r5, r5, r9, asr #1
 8003500:	0fec      	lsrs	r4, r5, #31
 8003502:	eb04 0465 	add.w	r4, r4, r5, asr #1
 8003506:	0fe6      	lsrs	r6, r4, #31
 8003508:	eb06 0664 	add.w	r6, r6, r4, asr #1
 800350c:	0ff7      	lsrs	r7, r6, #31
 800350e:	eb07 0766 	add.w	r7, r7, r6, asr #1
		kalan = G_Value % 2;
 8003512:	ea5f 0867 	movs.w	r8, r7, asr #1
 8003516:	f008 0801 	and.w	r8, r8, #1
 800351a:	bf48      	it	mi
 800351c:	f1c8 0800 	rsbmi	r8, r8, #0
 8003520:	ea5f 0c66 	movs.w	ip, r6, asr #1
 8003524:	f00c 0c01 	and.w	ip, ip, #1
 8003528:	bf48      	it	mi
 800352a:	f1cc 0c00 	rsbmi	ip, ip, #0
 800352e:	1067      	asrs	r7, r4, #1
 8003530:	f007 0701 	and.w	r7, r7, #1
 8003534:	bf48      	it	mi
 8003536:	427f      	negmi	r7, r7
 8003538:	106e      	asrs	r6, r5, #1
 800353a:	f006 0601 	and.w	r6, r6, #1
 800353e:	bf48      	it	mi
 8003540:	4276      	negmi	r6, r6
 8003542:	ea5f 0969 	movs.w	r9, r9, asr #1
void RGB_Write(int R_Value, int G_Value, int B_Value, int l_row) {
 8003546:	b08d      	sub	sp, #52	; 0x34
		kalan = G_Value % 2;
 8003548:	f009 0901 	and.w	r9, r9, #1
 800354c:	9601      	str	r6, [sp, #4]
 800354e:	464e      	mov	r6, r9
 8003550:	bf48      	it	mi
 8003552:	f1c9 0600 	rsbmi	r6, r9, #0
 8003556:	ea5f 0b6b 	movs.w	fp, fp, asr #1
 800355a:	f00b 0b01 	and.w	fp, fp, #1
 800355e:	bf48      	it	mi
 8003560:	f1cb 0b00 	rsbmi	fp, fp, #0
 8003564:	ea5f 0a6a 	movs.w	sl, sl, asr #1
 8003568:	f8cd b00c 	str.w	fp, [sp, #12]
 800356c:	f00a 0b01 	and.w	fp, sl, #1
 8003570:	bf48      	it	mi
 8003572:	f1cb 0b00 	rsbmi	fp, fp, #0
 8003576:	f8cd b010 	str.w	fp, [sp, #16]
 800357a:	f001 0b01 	and.w	fp, r1, #1
 800357e:	2900      	cmp	r1, #0
 8003580:	4659      	mov	r1, fp
			a--;
		}
	}

	for (int i = 0; i < 8; i++) {
		sonuc = R_Value / 2;
 8003582:	eb00 7ed0 	add.w	lr, r0, r0, lsr #31
 8003586:	ea4f 74de 	mov.w	r4, lr, lsr #31
 800358a:	eb04 046e 	add.w	r4, r4, lr, asr #1
 800358e:	ea4f 75d4 	mov.w	r5, r4, lsr #31
 8003592:	eb05 0564 	add.w	r5, r5, r4, asr #1
 8003596:	ea4f 79d5 	mov.w	r9, r5, lsr #31
 800359a:	eb09 0965 	add.w	r9, r9, r5, asr #1
 800359e:	ea4f 7ad9 	mov.w	sl, r9, lsr #31
 80035a2:	eb0a 0a69 	add.w	sl, sl, r9, asr #1
		kalan = G_Value % 2;
 80035a6:	bfb8      	it	lt
 80035a8:	f1cb 0100 	rsblt	r1, fp, #0
 80035ac:	9105      	str	r1, [sp, #20]
		sonuc = R_Value / 2;
 80035ae:	ea4f 71da 	mov.w	r1, sl, lsr #31
 80035b2:	eb01 016a 	add.w	r1, r1, sl, asr #1
 80035b6:	ea4f 7bd1 	mov.w	fp, r1, lsr #31
 80035ba:	eb0b 0b61 	add.w	fp, fp, r1, asr #1
		kalan = R_Value % 2;
 80035be:	ea5f 0b6b 	movs.w	fp, fp, asr #1
 80035c2:	f00b 0b01 	and.w	fp, fp, #1
 80035c6:	bf48      	it	mi
 80035c8:	f1cb 0b00 	rsbmi	fp, fp, #0
 80035cc:	1049      	asrs	r1, r1, #1
 80035ce:	f001 0101 	and.w	r1, r1, #1
 80035d2:	bf48      	it	mi
 80035d4:	4249      	negmi	r1, r1
 80035d6:	9107      	str	r1, [sp, #28]
 80035d8:	ea5f 016a 	movs.w	r1, sl, asr #1
 80035dc:	f001 0101 	and.w	r1, r1, #1
 80035e0:	bf48      	it	mi
 80035e2:	4249      	negmi	r1, r1
 80035e4:	9108      	str	r1, [sp, #32]
 80035e6:	ea5f 0169 	movs.w	r1, r9, asr #1
 80035ea:	f001 0101 	and.w	r1, r1, #1
 80035ee:	bf48      	it	mi
 80035f0:	4249      	negmi	r1, r1
 80035f2:	9109      	str	r1, [sp, #36]	; 0x24
 80035f4:	1069      	asrs	r1, r5, #1
 80035f6:	f001 0101 	and.w	r1, r1, #1
 80035fa:	460d      	mov	r5, r1
 80035fc:	bf48      	it	mi
 80035fe:	424d      	negmi	r5, r1
 8003600:	950a      	str	r5, [sp, #40]	; 0x28
 8003602:	1065      	asrs	r5, r4, #1
 8003604:	f005 0501 	and.w	r5, r5, #1
 8003608:	bf48      	it	mi
 800360a:	426d      	negmi	r5, r5
 800360c:	ea5f 046e 	movs.w	r4, lr, asr #1
 8003610:	f004 0401 	and.w	r4, r4, #1
 8003614:	f000 0e01 	and.w	lr, r0, #1
 8003618:	bf48      	it	mi
 800361a:	4264      	negmi	r4, r4
 800361c:	2800      	cmp	r0, #0
 800361e:	f8cd b018 	str.w	fp, [sp, #24]
 8003622:	bfb8      	it	lt
 8003624:	f1ce 0e00 	rsblt	lr, lr, #0
		}
	}

	for (int i = 0; i < 8; i++) {
		sonuc = B_Value / 2;
		kalan = B_Value % 2;
 8003628:	f002 0b01 	and.w	fp, r2, #1
 800362c:	2a00      	cmp	r2, #0
		sonuc = B_Value / 2;
 800362e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003632:	ea4f 71d2 	mov.w	r1, r2, lsr #31
		kalan = B_Value % 2;
 8003636:	bfb8      	it	lt
 8003638:	f1cb 0b00 	rsblt	fp, fp, #0
		sonuc = B_Value / 2;
 800363c:	eb01 0162 	add.w	r1, r1, r2, asr #1
		kalan = B_Value % 2;
 8003640:	1052      	asrs	r2, r2, #1
 8003642:	f002 0001 	and.w	r0, r2, #1
 8003646:	4a5f      	ldr	r2, [pc, #380]	; (80037c4 <RGB_Write+0x2e4>)
		sonuc = B_Value / 2;
 8003648:	ea4f 7ad1 	mov.w	sl, r1, lsr #31
 800364c:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
 8003650:	f103 0808 	add.w	r8, r3, #8
 8003654:	f842 c028 	str.w	ip, [r2, r8, lsl #2]
		kalan = B_Value % 2;
 8003658:	bf48      	it	mi
 800365a:	4240      	negmi	r0, r0
		sonuc = B_Value / 2;
 800365c:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 8003660:	f103 0c10 	add.w	ip, r3, #16
		kalan = B_Value % 2;
 8003664:	1049      	asrs	r1, r1, #1
 8003666:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
		kalan = G_Value % 2;
 800366a:	9602      	str	r6, [sp, #8]
		kalan = B_Value % 2;
 800366c:	f001 0101 	and.w	r1, r1, #1
 8003670:	9e01      	ldr	r6, [sp, #4]
		sonuc = B_Value / 2;
 8003672:	ea4f 77da 	mov.w	r7, sl, lsr #31
		kalan = B_Value % 2;
 8003676:	bf48      	it	mi
 8003678:	4249      	negmi	r1, r1
 800367a:	ea5f 096a 	movs.w	r9, sl, asr #1
		sonuc = B_Value / 2;
 800367e:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
 8003682:	f103 0718 	add.w	r7, r3, #24
 8003686:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
 800368a:	9f02      	ldr	r7, [sp, #8]
		kalan = R_Value % 2;
 800368c:	940b      	str	r4, [sp, #44]	; 0x2c
 800368e:	f103 0620 	add.w	r6, r3, #32
 8003692:	9c03      	ldr	r4, [sp, #12]
 8003694:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
 8003698:	f103 0728 	add.w	r7, r3, #40	; 0x28
 800369c:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
		kalan = B_Value % 2;
 80036a0:	f009 0901 	and.w	r9, r9, #1
 80036a4:	9c04      	ldr	r4, [sp, #16]
		sonuc = B_Value / 2;
 80036a6:	ea4f 77da 	mov.w	r7, sl, lsr #31
		kalan = B_Value % 2;
 80036aa:	bf48      	it	mi
 80036ac:	f1c9 0900 	rsbmi	r9, r9, #0
 80036b0:	ea5f 066a 	movs.w	r6, sl, asr #1
		sonuc = B_Value / 2;
 80036b4:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
 80036b8:	f103 0730 	add.w	r7, r3, #48	; 0x30
 80036bc:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
 80036c0:	9c05      	ldr	r4, [sp, #20]
 80036c2:	f103 0738 	add.w	r7, r3, #56	; 0x38
 80036c6:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
	for (int i = 0; i < 8; i++) {
 80036ca:	9c06      	ldr	r4, [sp, #24]
 80036cc:	f103 0c40 	add.w	ip, r3, #64	; 0x40
 80036d0:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
		kalan = B_Value % 2;
 80036d4:	f006 0601 	and.w	r6, r6, #1
 80036d8:	9c07      	ldr	r4, [sp, #28]
		sonuc = B_Value / 2;
 80036da:	ea4f 7cda 	mov.w	ip, sl, lsr #31
		kalan = B_Value % 2;
 80036de:	bf48      	it	mi
 80036e0:	4276      	negmi	r6, r6
 80036e2:	ea5f 076a 	movs.w	r7, sl, asr #1
		sonuc = B_Value / 2;
 80036e6:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 80036ea:	f103 0c48 	add.w	ip, r3, #72	; 0x48
 80036ee:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
 80036f2:	9c08      	ldr	r4, [sp, #32]
 80036f4:	f103 0c50 	add.w	ip, r3, #80	; 0x50
 80036f8:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
 80036fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80036fe:	f103 0858 	add.w	r8, r3, #88	; 0x58
 8003702:	f842 4028 	str.w	r4, [r2, r8, lsl #2]
		kalan = B_Value % 2;
 8003706:	f007 0701 	and.w	r7, r7, #1
 800370a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		sonuc = B_Value / 2;
 800370c:	ea4f 78da 	mov.w	r8, sl, lsr #31
		kalan = B_Value % 2;
 8003710:	bf48      	it	mi
 8003712:	427f      	negmi	r7, r7
		sonuc = B_Value / 2;
 8003714:	eb08 086a 	add.w	r8, r8, sl, asr #1
		kalan = B_Value % 2;
 8003718:	ea5f 0c6a 	movs.w	ip, sl, asr #1
 800371c:	f103 0a60 	add.w	sl, r3, #96	; 0x60
 8003720:	f842 402a 	str.w	r4, [r2, sl, lsl #2]
 8003724:	f00c 0c01 	and.w	ip, ip, #1
 8003728:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800372a:	f103 0a68 	add.w	sl, r3, #104	; 0x68
 800372e:	f842 502a 	str.w	r5, [r2, sl, lsl #2]
 8003732:	bf48      	it	mi
 8003734:	f1cc 0c00 	rsbmi	ip, ip, #0
 8003738:	f103 0570 	add.w	r5, r3, #112	; 0x70
 800373c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003744:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 8003748:	f008 0501 	and.w	r5, r8, #1
		sonuc = B_Value / 2;
 800374c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8003750:	f842 e02a 	str.w	lr, [r2, sl, lsl #2]
		kalan = B_Value % 2;
 8003754:	bf48      	it	mi
 8003756:	426d      	negmi	r5, r5
		sonuc = B_Value / 2;
 8003758:	ea4f 0468 	mov.w	r4, r8, asr #1
 800375c:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 8003760:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80037cc <RGB_Write+0x2ec>
 8003764:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
 8003768:	f103 0e88 	add.w	lr, r3, #136	; 0x88
 800376c:	f842 c02e 	str.w	ip, [r2, lr, lsl #2]
 8003770:	f8c8 4000 	str.w	r4, [r8]
 8003774:	f8df e058 	ldr.w	lr, [pc, #88]	; 80037d0 <RGB_Write+0x2f0>
		B_Value = sonuc;
		dizi[i] = kalan;
 8003778:	4c13      	ldr	r4, [pc, #76]	; (80037c8 <RGB_Write+0x2e8>)
 800377a:	f103 0890 	add.w	r8, r3, #144	; 0x90
 800377e:	f8ce 5000 	str.w	r5, [lr]
 8003782:	61e5      	str	r5, [r4, #28]
 8003784:	f103 0e98 	add.w	lr, r3, #152	; 0x98
 8003788:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 800378c:	f8c4 c018 	str.w	ip, [r4, #24]
 8003790:	e9c4 6704 	strd	r6, r7, [r4, #16]
 8003794:	f103 0ca8 	add.w	ip, r3, #168	; 0xa8
 8003798:	e9c4 1902 	strd	r1, r9, [r4, #8]
 800379c:	e9c4 b000 	strd	fp, r0, [r4]
	for (int i = 0; i < 8; i++) {
 80037a0:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80037a4:	33b8      	adds	r3, #184	; 0xb8
 80037a6:	f842 7028 	str.w	r7, [r2, r8, lsl #2]
 80037aa:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
 80037ae:	f842 9025 	str.w	r9, [r2, r5, lsl #2]
 80037b2:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
 80037b6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80037ba:	f842 b023 	str.w	fp, [r2, r3, lsl #2]
			RGB_Data[j][l_row] = dizi[a];
			a--;
		}
	}

}
 80037be:	b00d      	add	sp, #52	; 0x34
 80037c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c4:	200013ac 	.word	0x200013ac
 80037c8:	20001314 	.word	0x20001314
 80037cc:	200013a8 	.word	0x200013a8
 80037d0:	200016ac 	.word	0x200016ac

080037d4 <show_led>:

void show_led(void) {
 80037d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d8:	4f17      	ldr	r7, [pc, #92]	; (8003838 <show_led+0x64>)

				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);
			} else {
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
 80037da:	4d18      	ldr	r5, [pc, #96]	; (800383c <show_led+0x68>)
 80037dc:	f107 0824 	add.w	r8, r7, #36	; 0x24
		for (int i = 0; i < 24; i++) {
 80037e0:	f5a7 7440 	sub.w	r4, r7, #768	; 0x300
 80037e4:	e014      	b.n	8003810 <show_led+0x3c>
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
 80037e6:	2201      	movs	r2, #1
 80037e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037ec:	4628      	mov	r0, r5
 80037ee:	f7fd fd6d 	bl	80012cc <GPIO_WriteBit>
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);
 80037f2:	2200      	movs	r2, #0
 80037f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037f8:	4628      	mov	r0, r5
 80037fa:	f7fd fd67 	bl	80012cc <GPIO_WriteBit>
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);
 80037fe:	3420      	adds	r4, #32
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003806:	4628      	mov	r0, r5
 8003808:	f7fd fd60 	bl	80012cc <GPIO_WriteBit>
		for (int i = 0; i < 24; i++) {
 800380c:	42bc      	cmp	r4, r7
 800380e:	d00a      	beq.n	8003826 <show_led+0x52>
			if (RGB_Data[i][sayi] == 1) {
 8003810:	6826      	ldr	r6, [r4, #0]
 8003812:	2e01      	cmp	r6, #1
 8003814:	d1e7      	bne.n	80037e6 <show_led+0x12>
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
 8003816:	4632      	mov	r2, r6
 8003818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800381c:	4628      	mov	r0, r5
 800381e:	f7fd fd55 	bl	80012cc <GPIO_WriteBit>
				GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
 8003822:	4632      	mov	r2, r6
 8003824:	e7e6      	b.n	80037f4 <show_led+0x20>
	for (int i = 0; i <= 8; i++) {
 8003826:	1d27      	adds	r7, r4, #4
 8003828:	4547      	cmp	r7, r8
 800382a:	d1d9      	bne.n	80037e0 <show_led+0xc>

delay_ms(10);



}
 800382c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
delay_ms(10);
 8003830:	200a      	movs	r0, #10
 8003832:	f000 bba5 	b.w	8003f80 <delay_ms>
 8003836:	bf00      	nop
 8003838:	200016ac 	.word	0x200016ac
 800383c:	40011000 	.word	0x40011000

08003840 <Motor_DC>:
void Motor_DC(int yon) {
	if (yon == 1) {
 8003840:	2801      	cmp	r0, #1
void Motor_DC(int yon) {
 8003842:	b510      	push	{r4, lr}
	if (yon == 1) {
 8003844:	d01d      	beq.n	8003882 <Motor_DC+0x42>
		GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_RESET);
		GPIO_WriteBit(GPIOB, GPIO_Pin_8, Bit_SET);

	}

	if (yon == 2) {
 8003846:	2802      	cmp	r0, #2
 8003848:	d00e      	beq.n	8003868 <Motor_DC+0x28>
		GPIO_WriteBit(GPIOB, GPIO_Pin_8, Bit_RESET);
		GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_SET);

	}

	if (yon == 0) {
 800384a:	b960      	cbnz	r0, 8003866 <Motor_DC+0x26>
		GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_SET);
 800384c:	2201      	movs	r2, #1
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <Motor_DC+0x48>)
 8003852:	f7fd fd3b 	bl	80012cc <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_8, Bit_SET);
	}
}
 8003856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		GPIO_WriteBit(GPIOB, GPIO_Pin_8, Bit_SET);
 800385a:	2201      	movs	r2, #1
 800385c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003860:	4809      	ldr	r0, [pc, #36]	; (8003888 <Motor_DC+0x48>)
 8003862:	f7fd bd33 	b.w	80012cc <GPIO_WriteBit>
}
 8003866:	bd10      	pop	{r4, pc}
		GPIO_WriteBit(GPIOB, GPIO_Pin_8, Bit_RESET);
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800386e:	4806      	ldr	r0, [pc, #24]	; (8003888 <Motor_DC+0x48>)
 8003870:	f7fd fd2c 	bl	80012cc <GPIO_WriteBit>
}
 8003874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_SET);
 8003878:	2201      	movs	r2, #1
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <Motor_DC+0x48>)
 800387e:	f7fd bd25 	b.w	80012cc <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_RESET);
 8003882:	2200      	movs	r2, #0
 8003884:	e7e3      	b.n	800384e <Motor_DC+0xe>
 8003886:	bf00      	nop
 8003888:	40010c00 	.word	0x40010c00

0800388c <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 800388e:	4e17      	ldr	r6, [pc, #92]	; (80038ec <mc_line+0x60>)
{
 8003890:	460f      	mov	r7, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003892:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
{
 8003896:	4605      	mov	r5, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003898:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 800389a:	4c15      	ldr	r4, [pc, #84]	; (80038f0 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 800389c:	d504      	bpl.n	80038a8 <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 800389e:	7823      	ldrb	r3, [r4, #0]
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d00a      	beq.n	80038ba <mc_line+0x2e>
 80038a4:	f7ff fcde 	bl	8003264 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80038a8:	7823      	ldrb	r3, [r4, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d105      	bne.n	80038ba <mc_line+0x2e>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
			}
		}
	}
}
 80038ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80038b0:	f000 fd8a 	bl	80043c8 <plan_check_full_buffer>
 80038b4:	b138      	cbz	r0, 80038c6 <mc_line+0x3a>
 80038b6:	f001 fbf7 	bl	80050a8 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 80038ba:	f001 ff0f 	bl	80056dc <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 80038be:	7863      	ldrb	r3, [r4, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f5      	beq.n	80038b0 <mc_line+0x24>
 80038c4:	e7f3      	b.n	80038ae <mc_line+0x22>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 80038c6:	4628      	mov	r0, r5
 80038c8:	4639      	mov	r1, r7
 80038ca:	f000 fe45 	bl	8004558 <plan_buffer_line>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1ed      	bne.n	80038ae <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80038d2:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80038d6:	079a      	lsls	r2, r3, #30
 80038d8:	d5e9      	bpl.n	80038ae <mc_line+0x22>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 80038da:	7a3b      	ldrb	r3, [r7, #8]
 80038dc:	06db      	lsls	r3, r3, #27
 80038de:	d5e6      	bpl.n	80038ae <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	2010      	movs	r0, #16
}
 80038e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80038e8:	f003 bc80 	b.w	80071ec <spindle_sync>
 80038ec:	20001834 	.word	0x20001834
 80038f0:	20001378 	.word	0x20001378
 80038f4:	00000000 	.word	0x00000000

080038f8 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	b08f      	sub	sp, #60	; 0x3c
 80038fe:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8003902:	461d      	mov	r5, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003904:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
{
 8003908:	4604      	mov	r4, r0
 800390a:	900d      	str	r0, [sp, #52]	; 0x34
 800390c:	468b      	mov	fp, r1
  float center_axis0 = position[axis_0] + offset[axis_0];
 800390e:	4648      	mov	r0, r9
 8003910:	f852 1027 	ldr.w	r1, [r2, r7, lsl #2]
{
 8003914:	4692      	mov	sl, r2
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003916:	f7fc feb5 	bl	8000684 <__addsf3>
{
 800391a:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
  float center_axis0 = position[axis_0] + offset[axis_0];
 800391e:	9002      	str	r0, [sp, #8]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003920:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8003924:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8003928:	4618      	mov	r0, r3
 800392a:	9308      	str	r3, [sp, #32]
 800392c:	f7fc feaa 	bl	8000684 <__addsf3>
 8003930:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8003934:	9005      	str	r0, [sp, #20]
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
  float rt_axis1 = target[axis_1] - center_axis1;

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003936:	f7fc fea3 	bl	8000680 <__aeabi_fsub>
 800393a:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 800393e:	4680      	mov	r8, r0
 8003940:	9802      	ldr	r0, [sp, #8]
 8003942:	f7fc fe9d 	bl	8000680 <__aeabi_fsub>
 8003946:	4604      	mov	r4, r0
 8003948:	4648      	mov	r0, r9
 800394a:	4621      	mov	r1, r4
 800394c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003950:	f7fc ffa0 	bl	8000894 <__aeabi_fmul>
 8003954:	4641      	mov	r1, r8
 8003956:	4681      	mov	r9, r0
 8003958:	9808      	ldr	r0, [sp, #32]
 800395a:	f7fc ff9b 	bl	8000894 <__aeabi_fmul>
 800395e:	4601      	mov	r1, r0
 8003960:	4648      	mov	r0, r9
 8003962:	f7fc fe8f 	bl	8000684 <__addsf3>
 8003966:	4603      	mov	r3, r0
 8003968:	4641      	mov	r1, r8
 800396a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800396c:	4698      	mov	r8, r3
 800396e:	f7fc ff91 	bl	8000894 <__aeabi_fmul>
 8003972:	4621      	mov	r1, r4
 8003974:	4604      	mov	r4, r0
 8003976:	9808      	ldr	r0, [sp, #32]
 8003978:	f7fc ff8c 	bl	8000894 <__aeabi_fmul>
 800397c:	4601      	mov	r1, r0
 800397e:	4620      	mov	r0, r4
 8003980:	f7fc fe7e 	bl	8000680 <__aeabi_fsub>
 8003984:	4641      	mov	r1, r8
 8003986:	f006 fb47 	bl	800a018 <atan2f>
  float center_axis0 = position[axis_0] + offset[axis_0];
 800398a:	eb0a 0287 	add.w	r2, sl, r7, lsl #2
 800398e:	9203      	str	r2, [sp, #12]
 8003990:	eb05 0287 	add.w	r2, r5, r7, lsl #2
 8003994:	920a      	str	r2, [sp, #40]	; 0x28
{
 8003996:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 800399a:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 800399e:	920b      	str	r2, [sp, #44]	; 0x2c
 80039a0:	eb0a 0286 	add.w	r2, sl, r6, lsl #2
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80039a4:	4604      	mov	r4, r0
{
 80039a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80039a8:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
  float center_axis1 = position[axis_1] + offset[axis_1];
 80039ac:	9204      	str	r2, [sp, #16]
  if (is_clockwise_arc) { // Correct atan2 output per direction
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8103 	beq.w	8003bba <mc_arc+0x2c2>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 80039b4:	f7fc fd30 	bl	8000418 <__aeabi_f2d>
 80039b8:	a39b      	add	r3, pc, #620	; (adr r3, 8003c28 <mc_arc+0x330>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	4606      	mov	r6, r0
 80039c0:	460f      	mov	r7, r1
 80039c2:	f7fc fdf5 	bl	80005b0 <__aeabi_dcmpge>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	f040 811d 	bne.w	8003c06 <mc_arc+0x30e>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80039cc:	4b9c      	ldr	r3, [pc, #624]	; (8003c40 <mc_arc+0x348>)
 80039ce:	4629      	mov	r1, r5
 80039d0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80039d2:	4628      	mov	r0, r5
 80039d4:	f7fc fe56 	bl	8000684 <__addsf3>
 80039d8:	4631      	mov	r1, r6
 80039da:	f7fc fe51 	bl	8000680 <__aeabi_fsub>
 80039de:	4631      	mov	r1, r6
 80039e0:	f7fc ff58 	bl	8000894 <__aeabi_fmul>
 80039e4:	f006 fb1a 	bl	800a01c <sqrtf>
 80039e8:	4603      	mov	r3, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80039ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039ee:	4628      	mov	r0, r5
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80039f0:	461d      	mov	r5, r3
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80039f2:	f7fc ff4f 	bl	8000894 <__aeabi_fmul>
 80039f6:	4621      	mov	r1, r4
 80039f8:	f7fc ff4c 	bl	8000894 <__aeabi_fmul>
 80039fc:	4629      	mov	r1, r5
 80039fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a02:	f7fc fffb 	bl	80009fc <__aeabi_fdiv>
 8003a06:	f006 fa63 	bl	8009ed0 <floorf>
 8003a0a:	f7fd f945 	bl	8000c98 <__aeabi_f2uiz>
 8003a0e:	b283      	uxth	r3, r0
 8003a10:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80ca 	beq.w	8003bac <mc_arc+0x2b4>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003a18:	f89b 6008 	ldrb.w	r6, [fp, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	0733      	lsls	r3, r6, #28
 8003a20:	f100 80e2 	bmi.w	8003be8 <mc_arc+0x2f0>
 8003a24:	f7fc fee2 	bl	80007ec <__aeabi_i2f>
 8003a28:	4605      	mov	r5, r0
      pl_data->feed_rate *= segments; 
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a30:	f7fc ffe4 	bl	80009fc <__aeabi_fdiv>
 8003a34:	4605      	mov	r5, r0
 8003a36:	4620      	mov	r0, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7fc ff2b 	bl	8000894 <__aeabi_fmul>
 8003a3e:	4603      	mov	r3, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a42:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8003a46:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
    float theta_per_segment = angular_travel/segments;
 8003a4a:	461e      	mov	r6, r3
 8003a4c:	930c      	str	r3, [sp, #48]	; 0x30
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003a4e:	f7fc fe17 	bl	8000680 <__aeabi_fsub>
 8003a52:	4629      	mov	r1, r5
 8003a54:	f7fc ff1e 	bl	8000894 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003a58:	4631      	mov	r1, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003a5a:	4681      	mov	r9, r0
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7fc ff19 	bl	8000894 <__aeabi_fmul>
 8003a62:	4604      	mov	r4, r0
 8003a64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7fc fe09 	bl	8000680 <__aeabi_fsub>
 8003a6e:	4603      	mov	r3, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003a70:	4621      	mov	r1, r4
 8003a72:	4874      	ldr	r0, [pc, #464]	; (8003c44 <mc_arc+0x34c>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003a74:	461c      	mov	r4, r3
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003a76:	f7fc fe03 	bl	8000680 <__aeabi_fsub>
 8003a7a:	4973      	ldr	r1, [pc, #460]	; (8003c48 <mc_arc+0x350>)
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7fc ff08 	bl	8000894 <__aeabi_fmul>
 8003a84:	4601      	mov	r1, r0
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7fc ff04 	bl	8000894 <__aeabi_fmul>
 8003a8c:	4603      	mov	r3, r0
    cos_T *= 0.5;
 8003a8e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a92:	4620      	mov	r0, r4
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003a94:	9306      	str	r3, [sp, #24]
    cos_T *= 0.5;
 8003a96:	f7fc fefd 	bl	8000894 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003a9a:	9b01      	ldr	r3, [sp, #4]
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003a9c:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003aa0:	2b01      	cmp	r3, #1
    cos_T *= 0.5;
 8003aa2:	9007      	str	r0, [sp, #28]
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003aa4:	f000 8082 	beq.w	8003bac <mc_arc+0x2b4>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  float r_axis1 = -offset[axis_1];
 8003aaa:	2601      	movs	r6, #1
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003aac:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  float r_axis1 = -offset[axis_1];
 8003ab0:	9b08      	ldr	r3, [sp, #32]
    uint8_t count = 0;
 8003ab2:	2700      	movs	r7, #0
  float r_axis1 = -offset[axis_1];
 8003ab4:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8003ab8:	e040      	b.n	8003b3c <mc_arc+0x244>

      if (count < N_ARC_CORRECTION) {
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003aba:	4621      	mov	r1, r4
 8003abc:	9806      	ldr	r0, [sp, #24]
 8003abe:	f7fc fee9 	bl	8000894 <__aeabi_fmul>
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	9008      	str	r0, [sp, #32]
 8003ac6:	9807      	ldr	r0, [sp, #28]
 8003ac8:	f7fc fee4 	bl	8000894 <__aeabi_fmul>
 8003acc:	9b08      	ldr	r3, [sp, #32]
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fdd7 	bl	8000684 <__addsf3>
 8003ad6:	4603      	mov	r3, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003ad8:	4621      	mov	r1, r4
 8003ada:	9807      	ldr	r0, [sp, #28]
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003adc:	461c      	mov	r4, r3
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003ade:	f7fc fed9 	bl	8000894 <__aeabi_fmul>
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	9806      	ldr	r0, [sp, #24]
 8003ae8:	f7fc fed4 	bl	8000894 <__aeabi_fmul>
 8003aec:	4601      	mov	r1, r0
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7fc fdc6 	bl	8000680 <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003af4:	4625      	mov	r5, r4
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003af6:	4604      	mov	r4, r0
        count++;
 8003af8:	3701      	adds	r7, #1
 8003afa:	b2ff      	uxtb	r7, r7
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003afc:	9902      	ldr	r1, [sp, #8]
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fc fdc0 	bl	8000684 <__addsf3>
 8003b04:	9b03      	ldr	r3, [sp, #12]
      position[axis_1] = center_axis1 + r_axis1;
 8003b06:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003b08:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f7fc fdba 	bl	8000684 <__addsf3>
 8003b10:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003b12:	4649      	mov	r1, r9
      position[axis_1] = center_axis1 + r_axis1;
 8003b14:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003b16:	f8d8 0000 	ldr.w	r0, [r8]
 8003b1a:	f7fc fdb3 	bl	8000684 <__addsf3>

      mc_line(position, pl_data);
 8003b1e:	4659      	mov	r1, fp
      position[axis_linear] += linear_per_segment;
 8003b20:	f8c8 0000 	str.w	r0, [r8]
      mc_line(position, pl_data);
 8003b24:	4650      	mov	r0, sl
 8003b26:	f7ff feb1 	bl	800388c <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 8003b2a:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <mc_arc+0x354>)
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	785b      	ldrb	r3, [r3, #1]
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003b30:	b2b2      	uxth	r2, r6
      if (sys.abort) { return; }
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d172      	bne.n	8003c1c <mc_arc+0x324>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d937      	bls.n	8003bac <mc_arc+0x2b4>
      if (count < N_ARC_CORRECTION) {
 8003b3c:	2f0b      	cmp	r7, #11
 8003b3e:	d9bc      	bls.n	8003aba <mc_arc+0x1c2>
        cos_Ti = cosf(i*theta_per_segment);
 8003b40:	4630      	mov	r0, r6
 8003b42:	f7fc fe53 	bl	80007ec <__aeabi_i2f>
 8003b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b48:	f7fc fea4 	bl	8000894 <__aeabi_fmul>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	f006 f98b 	bl	8009e68 <cosf>
 8003b52:	4605      	mov	r5, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f006 fa29 	bl	8009fac <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        sin_Ti = sinf(i*theta_per_segment);
 8003b5c:	4604      	mov	r4, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003b5e:	681f      	ldr	r7, [r3, #0]
 8003b60:	4629      	mov	r1, r5
 8003b62:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003b66:	4638      	mov	r0, r7
 8003b68:	f7fc fe94 	bl	8000894 <__aeabi_fmul>
 8003b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b6e:	4621      	mov	r1, r4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	9009      	str	r0, [sp, #36]	; 0x24
 8003b74:	4618      	mov	r0, r3
 8003b76:	9308      	str	r3, [sp, #32]
 8003b78:	f7fc fe8c 	bl	8000894 <__aeabi_fmul>
 8003b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7e:	4601      	mov	r1, r0
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fc fd7f 	bl	8000684 <__addsf3>
 8003b86:	4602      	mov	r2, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4638      	mov	r0, r7
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003b8c:	4614      	mov	r4, r2
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003b8e:	f7fc fe81 	bl	8000894 <__aeabi_fmul>
 8003b92:	9b08      	ldr	r3, [sp, #32]
 8003b94:	4629      	mov	r1, r5
 8003b96:	4605      	mov	r5, r0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fe7b 	bl	8000894 <__aeabi_fmul>
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f7fc fd6d 	bl	8000680 <__aeabi_fsub>
        count = 0;
 8003ba6:	2700      	movs	r7, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ba8:	4605      	mov	r5, r0
        count = 0;
 8003baa:	e7a7      	b.n	8003afc <mc_arc+0x204>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8003bac:	4659      	mov	r1, fp
 8003bae:	980d      	ldr	r0, [sp, #52]	; 0x34
}
 8003bb0:	b00f      	add	sp, #60	; 0x3c
 8003bb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 8003bb6:	f7ff be69 	b.w	800388c <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003bba:	f7fc fc2d 	bl	8000418 <__aeabi_f2d>
 8003bbe:	a31c      	add	r3, pc, #112	; (adr r3, 8003c30 <mc_arc+0x338>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	f7fc fce8 	bl	800059c <__aeabi_dcmple>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	f43f aefd 	beq.w	80039cc <mc_arc+0xd4>
 8003bd2:	a319      	add	r3, pc, #100	; (adr r3, 8003c38 <mc_arc+0x340>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	4630      	mov	r0, r6
 8003bda:	4639      	mov	r1, r7
 8003bdc:	f7fc fabe 	bl	800015c <__adddf3>
 8003be0:	f7fc fcfa 	bl	80005d8 <__aeabi_d2f>
 8003be4:	4604      	mov	r4, r0
 8003be6:	e6f1      	b.n	80039cc <mc_arc+0xd4>
      pl_data->feed_rate *= segments; 
 8003be8:	f7fc fe00 	bl	80007ec <__aeabi_i2f>
 8003bec:	4605      	mov	r5, r0
 8003bee:	f8db 0000 	ldr.w	r0, [fp]
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	f7fc fe4e 	bl	8000894 <__aeabi_fmul>
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003bf8:	f026 0608 	bic.w	r6, r6, #8
      pl_data->feed_rate *= segments; 
 8003bfc:	f8cb 0000 	str.w	r0, [fp]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003c00:	f88b 6008 	strb.w	r6, [fp, #8]
 8003c04:	e711      	b.n	8003a2a <mc_arc+0x132>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003c06:	a30c      	add	r3, pc, #48	; (adr r3, 8003c38 <mc_arc+0x340>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	4639      	mov	r1, r7
 8003c10:	f7fc faa2 	bl	8000158 <__aeabi_dsub>
 8003c14:	f7fc fce0 	bl	80005d8 <__aeabi_d2f>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	e6d7      	b.n	80039cc <mc_arc+0xd4>
}
 8003c1c:	b00f      	add	sp, #60	; 0x3c
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	f3af 8000 	nop.w
 8003c28:	a0b5ed8d 	.word	0xa0b5ed8d
 8003c2c:	bea0c6f7 	.word	0xbea0c6f7
 8003c30:	a0b5ed8d 	.word	0xa0b5ed8d
 8003c34:	3ea0c6f7 	.word	0x3ea0c6f7
 8003c38:	54442d18 	.word	0x54442d18
 8003c3c:	401921fb 	.word	0x401921fb
 8003c40:	20001834 	.word	0x20001834
 8003c44:	40c00000 	.word	0x40c00000
 8003c48:	3e2aaaab 	.word	0x3e2aaaab
 8003c4c:	20001378 	.word	0x20001378

08003c50 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <mc_dwell+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d009      	beq.n	8003c6c <mc_dwell+0x1c>
{
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003c5c:	f001 fe06 	bl	800586c <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c60:	4620      	mov	r0, r4
}
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c66:	2100      	movs	r1, #0
 8003c68:	f000 b952 	b.w	8003f10 <delay_sec>
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20001378 	.word	0x20001378

08003c74 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003c74:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003c76:	f7ff f89d 	bl	8002db4 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003c7a:	2004      	movs	r0, #4
 8003c7c:	f7ff f904 	bl	8002e88 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003c80:	2003      	movs	r0, #3
 8003c82:	f7ff f901 	bl	8002e88 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003c86:	f001 fd29 	bl	80056dc <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <mc_homing_cycle+0x3c>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	b103      	cbz	r3, 8003c92 <mc_homing_cycle+0x1e>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#else
	limits_init();
#endif
}
 8003c90:	bd08      	pop	{r3, pc}
  gc_sync_position();
 8003c92:	f7fd fe73 	bl	800197c <gc_sync_position>
  plan_sync_position();
 8003c96:	f000 fe85 	bl	80049a4 <plan_sync_position>
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT));
 8003c9a:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8003c9e:	f7fd f8a5 	bl	8000dec <EXTI_ClearITPendingBit>
 8003ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca6:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <mc_homing_cycle+0x40>)
 8003ca8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003cac:	605a      	str	r2, [r3, #4]
}
 8003cae:	bd08      	pop	{r3, pc}
 8003cb0:	20001378 	.word	0x20001378
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003cbc:	4c2e      	ldr	r4, [pc, #184]	; (8003d78 <mc_probe_cycle+0xc0>)
 8003cbe:	7823      	ldrb	r3, [r4, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d027      	beq.n	8003d14 <mc_probe_cycle+0x5c>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	460d      	mov	r5, r1
 8003cc8:	4616      	mov	r6, r2
 8003cca:	f001 fdcf 	bl	800586c <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003cce:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003cd2:	f1b8 0f00 	cmp.w	r8, #0
 8003cd6:	d11a      	bne.n	8003d0e <mc_probe_cycle+0x56>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
  probe_configure_invert_mask(is_probe_away);
 8003cd8:	f3c6 00c0 	ubfx	r0, r6, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003cdc:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003ce0:	f001 f99a 	bl	8005018 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8003ce4:	f001 f9ac 	bl	8005040 <probe_get_state>
 8003ce8:	bb80      	cbnz	r0, 8003d4c <mc_probe_cycle+0x94>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8003cea:	4629      	mov	r1, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff fdcd 	bl	800388c <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4d21      	ldr	r5, [pc, #132]	; (8003d7c <mc_probe_cycle+0xc4>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003cf6:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003cf8:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003cfa:	f004 fdbd 	bl	8008878 <system_set_exec_state_flag>
 8003cfe:	e001      	b.n	8003d04 <mc_probe_cycle+0x4c>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
  } while (sys.state != STATE_IDLE);
 8003d00:	7823      	ldrb	r3, [r4, #0]
 8003d02:	b153      	cbz	r3, 8003d1a <mc_probe_cycle+0x62>
    protocol_execute_realtime();
 8003d04:	f001 fcea 	bl	80056dc <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003d08:	7863      	ldrb	r3, [r4, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f8      	beq.n	8003d00 <mc_probe_cycle+0x48>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003d0e:	2002      	movs	r0, #2
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003d14:	2000      	movs	r0, #0
}
 8003d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys_probe_state == PROBE_ACTIVE) {
 8003d1a:	782b      	ldrb	r3, [r5, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d01e      	beq.n	8003d5e <mc_probe_cycle+0xa6>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003d20:	2301      	movs	r3, #1
 8003d22:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003d24:	2000      	movs	r0, #0
 8003d26:	7028      	strb	r0, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003d28:	f001 f976 	bl	8005018 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003d2c:	f001 fcd6 	bl	80056dc <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003d30:	f003 fcee 	bl	8007710 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003d34:	f000 fad4 	bl	80042e0 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003d38:	f000 fe34 	bl	80049a4 <plan_sync_position>
    report_probe_parameters();
 8003d3c:	f002 f936 	bl	8005fac <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003d40:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003d42:	3800      	subs	r0, #0
 8003d44:	bf18      	it	ne
 8003d46:	2001      	movne	r0, #1
}
 8003d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003d4c:	2004      	movs	r0, #4
 8003d4e:	f004 fda7 	bl	80088a0 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003d52:	f001 fcc3 	bl	80056dc <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003d56:	4640      	mov	r0, r8
 8003d58:	f001 f95e 	bl	8005018 <probe_configure_invert_mask>
 8003d5c:	e7d7      	b.n	8003d0e <mc_probe_cycle+0x56>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003d5e:	06f3      	lsls	r3, r6, #27
 8003d60:	d505      	bpl.n	8003d6e <mc_probe_cycle+0xb6>
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <mc_probe_cycle+0xc8>)
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <mc_probe_cycle+0xcc>)
 8003d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d6c:	e7da      	b.n	8003d24 <mc_probe_cycle+0x6c>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003d6e:	2005      	movs	r0, #5
 8003d70:	f004 fd96 	bl	80088a0 <system_set_exec_alarm>
 8003d74:	e7d6      	b.n	8003d24 <mc_probe_cycle+0x6c>
 8003d76:	bf00      	nop
 8003d78:	20001378 	.word	0x20001378
 8003d7c:	2000138e 	.word	0x2000138e
 8003d80:	2000139c 	.word	0x2000139c
 8003d84:	20001390 	.word	0x20001390

08003d88 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003d88:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <mc_reset+0x54>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	06db      	lsls	r3, r3, #27
 8003d90:	d500      	bpl.n	8003d94 <mc_reset+0xc>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003d92:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003d94:	2010      	movs	r0, #16
 8003d96:	f004 fd6f 	bl	8008878 <system_set_exec_state_flag>
    spindle_stop();
 8003d9a:	f003 f93b 	bl	8007014 <spindle_stop>
    coolant_stop();
 8003d9e:	f7fd fcdb 	bl	8001758 <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <mc_reset+0x58>)
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	791b      	ldrb	r3, [r3, #4]
 8003da8:	f002 012c 	and.w	r1, r2, #44	; 0x2c
 8003dac:	f003 0306 	and.w	r3, r3, #6
 8003db0:	430b      	orrs	r3, r1
 8003db2:	d0ee      	beq.n	8003d92 <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003db4:	2a04      	cmp	r2, #4
 8003db6:	d106      	bne.n	8003dc6 <mc_reset+0x3e>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <mc_reset+0x5c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b153      	cbz	r3, 8003dd4 <mc_reset+0x4c>
}
 8003dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003dc2:	f003 bb0b 	b.w	80073dc <st_go_idle>
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	f004 fd6a 	bl	80088a0 <system_set_exec_alarm>
}
 8003dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003dd0:	f003 bb04 	b.w	80073dc <st_go_idle>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003dd4:	2006      	movs	r0, #6
 8003dd6:	f004 fd63 	bl	80088a0 <system_set_exec_alarm>
 8003dda:	e7f0      	b.n	8003dbe <mc_reset+0x36>
 8003ddc:	2000138d 	.word	0x2000138d
 8003de0:	20001378 	.word	0x20001378
 8003de4:	200016b0 	.word	0x200016b0

08003de8 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	460e      	mov	r6, r1
  char *ptr = line + *char_counter;
 8003dee:	7809      	ldrb	r1, [r1, #0]
{
 8003df0:	4605      	mov	r5, r0
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003df2:	5c43      	ldrb	r3, [r0, r1]
{
 8003df4:	4617      	mov	r7, r2

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003df6:	2b2d      	cmp	r3, #45	; 0x2d
{
 8003df8:	b083      	sub	sp, #12
  char *ptr = line + *char_counter;
 8003dfa:	4401      	add	r1, r0
  if (c == '-') {
 8003dfc:	d067      	beq.n	8003ece <read_float+0xe6>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003dfe:	2b2b      	cmp	r3, #43	; 0x2b
 8003e00:	d020      	beq.n	8003e44 <read_float+0x5c>
  bool isnegative = false;
 8003e02:	2200      	movs	r2, #0
  c = *ptr++;
 8003e04:	f101 0901 	add.w	r9, r1, #1
  bool isnegative = false;
 8003e08:	9201      	str	r2, [sp, #4]

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003e0a:	2200      	movs	r2, #0
  uint8_t ndigit = 0;
 8003e0c:	4614      	mov	r4, r2
  int8_t exp = 0;
 8003e0e:	4692      	mov	sl, r2
  uint32_t intval = 0;
 8003e10:	4610      	mov	r0, r2
 8003e12:	e00e      	b.n	8003e32 <read_float+0x4a>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003e14:	3401      	adds	r4, #1
 8003e16:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003e18:	2c08      	cmp	r4, #8
 8003e1a:	d819      	bhi.n	8003e50 <read_float+0x68>
        if (isdecimal) { exp--; }
 8003e1c:	b11a      	cbz	r2, 8003e26 <read_float+0x3e>
 8003e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e22:	fa4f fa8a 	sxtb.w	sl, sl
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003e26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e2a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003e2e:	f819 3b01 	ldrb.w	r3, [r9], #1
    c -= '0';
 8003e32:	3b30      	subs	r3, #48	; 0x30
 8003e34:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d9ec      	bls.n	8003e14 <read_float+0x2c>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003e3a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e3c:	d10f      	bne.n	8003e5e <read_float+0x76>
 8003e3e:	b972      	cbnz	r2, 8003e5e <read_float+0x76>
      isdecimal = true;
 8003e40:	2201      	movs	r2, #1
 8003e42:	e7f4      	b.n	8003e2e <read_float+0x46>
  bool isnegative = false;
 8003e44:	2300      	movs	r3, #0
    c = *ptr++;
 8003e46:	f101 0902 	add.w	r9, r1, #2
  bool isnegative = false;
 8003e4a:	9301      	str	r3, [sp, #4]
    c = *ptr++;
 8003e4c:	784b      	ldrb	r3, [r1, #1]
 8003e4e:	e7dc      	b.n	8003e0a <read_float+0x22>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d1ec      	bne.n	8003e2e <read_float+0x46>
 8003e54:	f10a 0a01 	add.w	sl, sl, #1
 8003e58:	fa4f fa8a 	sxtb.w	sl, sl
 8003e5c:	e7e7      	b.n	8003e2e <read_float+0x46>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003e5e:	b394      	cbz	r4, 8003ec6 <read_float+0xde>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003e60:	f7fc fcc0 	bl	80007e4 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003e64:	2100      	movs	r1, #0
  fval = (float)intval;
 8003e66:	4683      	mov	fp, r0
  if (fval != 0) {
 8003e68:	f7fc fea8 	bl	8000bbc <__aeabi_fcmpeq>
 8003e6c:	b9f8      	cbnz	r0, 8003eae <read_float+0xc6>
    while (exp <= -2) {
 8003e6e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003e72:	da16      	bge.n	8003ea2 <read_float+0xba>
 8003e74:	4654      	mov	r4, sl
      fval *= 0.01f;
 8003e76:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003f0c <read_float+0x124>
 8003e7a:	4658      	mov	r0, fp
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	f7fc fd09 	bl	8000894 <__aeabi_fmul>
 8003e82:	3402      	adds	r4, #2
 8003e84:	b264      	sxtb	r4, r4
    while (exp <= -2) {
 8003e86:	1c63      	adds	r3, r4, #1
      fval *= 0.01f;
 8003e88:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003e8a:	dbf6      	blt.n	8003e7a <read_float+0x92>
 8003e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8003e90:	f1ca 03fe 	rsb	r3, sl, #254	; 0xfe
 8003e94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e98:	449a      	add	sl, r3
 8003e9a:	f10a 0a02 	add.w	sl, sl, #2
 8003e9e:	fa4f fa8a 	sxtb.w	sl, sl
      exp += 2;
    }
    if (exp < 0) {
 8003ea2:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003ea6:	d026      	beq.n	8003ef6 <read_float+0x10e>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003ea8:	f1ba 0f00 	cmp.w	sl, #0
 8003eac:	d115      	bne.n	8003eda <read_float+0xf2>
      } while (--exp > 0);
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003eae:	9b01      	ldr	r3, [sp, #4]
 8003eb0:	b113      	cbz	r3, 8003eb8 <read_float+0xd0>
    *float_ptr = -fval;
 8003eb2:	f10b 4000 	add.w	r0, fp, #2147483648	; 0x80000000
 8003eb6:	4683      	mov	fp, r0
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003eb8:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003eba:	eba9 0505 	sub.w	r5, r9, r5
 8003ebe:	3d01      	subs	r5, #1
 8003ec0:	f8c7 b000 	str.w	fp, [r7]
 8003ec4:	7035      	strb	r5, [r6, #0]
}
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	b003      	add	sp, #12
 8003eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    isnegative = true;
 8003ece:	2201      	movs	r2, #1
    c = *ptr++;
 8003ed0:	784b      	ldrb	r3, [r1, #1]
 8003ed2:	f101 0902 	add.w	r9, r1, #2
    isnegative = true;
 8003ed6:	9201      	str	r2, [sp, #4]
 8003ed8:	e797      	b.n	8003e0a <read_float+0x22>
        fval *= 10.0f;
 8003eda:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <read_float+0x11c>)
 8003edc:	4658      	mov	r0, fp
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f7fc fcd8 	bl	8000894 <__aeabi_fmul>
 8003ee4:	f10a 33ff 	add.w	r3, sl, #4294967295
      } while (--exp > 0);
 8003ee8:	f013 0fff 	tst.w	r3, #255	; 0xff
        fval *= 10.0f;
 8003eec:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003eee:	fa4f fa83 	sxtb.w	sl, r3
 8003ef2:	d1f3      	bne.n	8003edc <read_float+0xf4>
 8003ef4:	e7db      	b.n	8003eae <read_float+0xc6>
      fval *= 0.1f;
 8003ef6:	4658      	mov	r0, fp
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <read_float+0x120>)
 8003efa:	f7fc fccb 	bl	8000894 <__aeabi_fmul>
 8003efe:	4683      	mov	fp, r0
 8003f00:	e7d5      	b.n	8003eae <read_float+0xc6>
 8003f02:	bf00      	nop
 8003f04:	41200000 	.word	0x41200000
 8003f08:	3dcccccd 	.word	0x3dcccccd
 8003f0c:	3c23d70a 	.word	0x3c23d70a

08003f10 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460d      	mov	r5, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003f14:	4918      	ldr	r1, [pc, #96]	; (8003f78 <delay_sec+0x68>)
 8003f16:	f7fc fcbd 	bl	8000894 <__aeabi_fmul>
 8003f1a:	f005 ff65 	bl	8009de8 <ceilf>
 8003f1e:	f7fc febb 	bl	8000c98 <__aeabi_f2uiz>
 8003f22:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003f24:	b1a8      	cbz	r0, 8003f52 <delay_sec+0x42>
 8003f26:	1e44      	subs	r4, r0, #1
 8003f28:	b2a4      	uxth	r4, r4
 8003f2a:	b19d      	cbz	r5, 8003f54 <delay_sec+0x44>
 8003f2c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f30:	4d12      	ldr	r5, [pc, #72]	; (8003f7c <delay_sec+0x6c>)
 8003f32:	e00b      	b.n	8003f4c <delay_sec+0x3c>
		if (sys.abort) { return; }
		if (mode == DELAY_MODE_DWELL) {
			protocol_execute_realtime();
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
 8003f34:	f001 f8c2 	bl	80050bc <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003f38:	78ab      	ldrb	r3, [r5, #2]
 8003f3a:	079b      	lsls	r3, r3, #30
 8003f3c:	d409      	bmi.n	8003f52 <delay_sec+0x42>
	while (i-- > 0) {
 8003f3e:	3c01      	subs	r4, #1
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f40:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003f42:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f44:	f7ff faa2 	bl	800348c <_delay_ms>
	while (i-- > 0) {
 8003f48:	42b4      	cmp	r4, r6
 8003f4a:	d002      	beq.n	8003f52 <delay_sec+0x42>
		if (sys.abort) { return; }
 8003f4c:	786b      	ldrb	r3, [r5, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <delay_sec+0x24>
	}
}
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8003f54:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f58:	4d08      	ldr	r5, [pc, #32]	; (8003f7c <delay_sec+0x6c>)
 8003f5a:	e008      	b.n	8003f6e <delay_sec+0x5e>
 8003f5c:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003f5e:	f001 fbbd 	bl	80056dc <protocol_execute_realtime>
	while (i-- > 0) {
 8003f62:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f64:	2032      	movs	r0, #50	; 0x32
 8003f66:	f7ff fa91 	bl	800348c <_delay_ms>
	while (i-- > 0) {
 8003f6a:	42b4      	cmp	r4, r6
 8003f6c:	d0f1      	beq.n	8003f52 <delay_sec+0x42>
		if (sys.abort) { return; }
 8003f6e:	786b      	ldrb	r3, [r5, #1]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f3      	beq.n	8003f5c <delay_sec+0x4c>
}
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	bf00      	nop
 8003f78:	41a00000 	.word	0x41a00000
 8003f7c:	20001378 	.word	0x20001378

08003f80 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003f80:	b160      	cbz	r0, 8003f9c <delay_ms+0x1c>
{
 8003f82:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003f84:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003f88:	1e44      	subs	r4, r0, #1
 8003f8a:	b2a4      	uxth	r4, r4
 8003f8c:	3c01      	subs	r4, #1
 8003f8e:	2001      	movs	r0, #1
 8003f90:	b2a4      	uxth	r4, r4
 8003f92:	f7ff fa7b 	bl	800348c <_delay_ms>
 8003f96:	42ac      	cmp	r4, r5
 8003f98:	d1f8      	bne.n	8003f8c <delay_ms+0xc>
}
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	f7fc fc75 	bl	8000894 <__aeabi_fmul>
 8003faa:	4621      	mov	r1, r4
 8003fac:	4604      	mov	r4, r0
 8003fae:	4608      	mov	r0, r1
 8003fb0:	f7fc fc70 	bl	8000894 <__aeabi_fmul>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7fc fb64 	bl	8000684 <__addsf3>
 8003fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc0:	f006 b82c 	b.w	800a01c <sqrtf>

08003fc4 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003fc6:	6807      	ldr	r7, [r0, #0]
{
 8003fc8:	4604      	mov	r4, r0
    if (vector[idx] != 0.0f) {
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f7fc fdf5 	bl	8000bbc <__aeabi_fcmpeq>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d13e      	bne.n	8004054 <convert_delta_vector_to_unit_vector+0x90>
      magnitude += vector[idx]*vector[idx];
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7fc fc5b 	bl	8000894 <__aeabi_fmul>
 8003fde:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003fe0:	6866      	ldr	r6, [r4, #4]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f7fc fde9 	bl	8000bbc <__aeabi_fcmpeq>
 8003fea:	b940      	cbnz	r0, 8003ffe <convert_delta_vector_to_unit_vector+0x3a>
      magnitude += vector[idx]*vector[idx];
 8003fec:	4631      	mov	r1, r6
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7fc fc50 	bl	8000894 <__aeabi_fmul>
 8003ff4:	4601      	mov	r1, r0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f7fc fb44 	bl	8000684 <__addsf3>
 8003ffc:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003ffe:	68a6      	ldr	r6, [r4, #8]
 8004000:	2100      	movs	r1, #0
 8004002:	4630      	mov	r0, r6
 8004004:	f7fc fdda 	bl	8000bbc <__aeabi_fcmpeq>
 8004008:	b940      	cbnz	r0, 800401c <convert_delta_vector_to_unit_vector+0x58>
      magnitude += vector[idx]*vector[idx];
 800400a:	4631      	mov	r1, r6
 800400c:	4630      	mov	r0, r6
 800400e:	f7fc fc41 	bl	8000894 <__aeabi_fmul>
 8004012:	4601      	mov	r1, r0
 8004014:	4628      	mov	r0, r5
 8004016:	f7fc fb35 	bl	8000684 <__addsf3>
 800401a:	4605      	mov	r5, r0
    }
  }
  magnitude = sqrtf(magnitude);
 800401c:	4628      	mov	r0, r5
 800401e:	f005 fffd 	bl	800a01c <sqrtf>
 8004022:	4606      	mov	r6, r0
  float inv_magnitude = 1.0f/magnitude;
 8004024:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004028:	4631      	mov	r1, r6
 800402a:	f7fc fce7 	bl	80009fc <__aeabi_fdiv>
 800402e:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8004030:	4638      	mov	r0, r7
 8004032:	4629      	mov	r1, r5
 8004034:	f7fc fc2e 	bl	8000894 <__aeabi_fmul>
 8004038:	4629      	mov	r1, r5
 800403a:	6020      	str	r0, [r4, #0]
 800403c:	6860      	ldr	r0, [r4, #4]
 800403e:	f7fc fc29 	bl	8000894 <__aeabi_fmul>
 8004042:	4629      	mov	r1, r5
 8004044:	6060      	str	r0, [r4, #4]
 8004046:	68a0      	ldr	r0, [r4, #8]
 8004048:	f7fc fc24 	bl	8000894 <__aeabi_fmul>
 800404c:	4603      	mov	r3, r0
  return(magnitude);
}
 800404e:	4630      	mov	r0, r6
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8004050:	60a3      	str	r3, [r4, #8]
}
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float magnitude = 0.0f;
 8004054:	463d      	mov	r5, r7
 8004056:	e7c3      	b.n	8003fe0 <convert_delta_vector_to_unit_vector+0x1c>

08004058 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800405a:	680d      	ldr	r5, [r1, #0]
{
 800405c:	460c      	mov	r4, r1
 800405e:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004060:	2100      	movs	r1, #0
 8004062:	4628      	mov	r0, r5
 8004064:	f7fc fdaa 	bl	8000bbc <__aeabi_fcmpeq>
 8004068:	bb70      	cbnz	r0, 80040c8 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800406a:	4629      	mov	r1, r5
 800406c:	6830      	ldr	r0, [r6, #0]
 800406e:	f7fc fcc5 	bl	80009fc <__aeabi_fdiv>
 8004072:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004076:	4628      	mov	r0, r5
 8004078:	4917      	ldr	r1, [pc, #92]	; (80040d8 <limit_value_by_axis_maximum+0x80>)
 800407a:	f7fc fdb3 	bl	8000be4 <__aeabi_fcmple>
 800407e:	b318      	cbz	r0, 80040c8 <limit_value_by_axis_maximum+0x70>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004080:	6867      	ldr	r7, [r4, #4]
 8004082:	2100      	movs	r1, #0
 8004084:	4638      	mov	r0, r7
 8004086:	f7fc fd99 	bl	8000bbc <__aeabi_fcmpeq>
 800408a:	b950      	cbnz	r0, 80040a2 <limit_value_by_axis_maximum+0x4a>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800408c:	4639      	mov	r1, r7
 800408e:	6870      	ldr	r0, [r6, #4]
 8004090:	f7fc fcb4 	bl	80009fc <__aeabi_fdiv>
 8004094:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004098:	4639      	mov	r1, r7
 800409a:	4628      	mov	r0, r5
 800409c:	f7fc fda2 	bl	8000be4 <__aeabi_fcmple>
 80040a0:	b1b8      	cbz	r0, 80040d2 <limit_value_by_axis_maximum+0x7a>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80040a2:	68a4      	ldr	r4, [r4, #8]
 80040a4:	2100      	movs	r1, #0
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc fd88 	bl	8000bbc <__aeabi_fcmpeq>
 80040ac:	b950      	cbnz	r0, 80040c4 <limit_value_by_axis_maximum+0x6c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040ae:	4621      	mov	r1, r4
 80040b0:	68b0      	ldr	r0, [r6, #8]
 80040b2:	f7fc fca3 	bl	80009fc <__aeabi_fdiv>
 80040b6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80040ba:	4621      	mov	r1, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f7fc fd91 	bl	8000be4 <__aeabi_fcmple>
 80040c2:	b118      	cbz	r0, 80040cc <limit_value_by_axis_maximum+0x74>
    }
  }
  return(limit_value);
}
 80040c4:	4628      	mov	r0, r5
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 80040c8:	4d03      	ldr	r5, [pc, #12]	; (80040d8 <limit_value_by_axis_maximum+0x80>)
 80040ca:	e7d9      	b.n	8004080 <limit_value_by_axis_maximum+0x28>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040cc:	4625      	mov	r5, r4
}
 80040ce:	4628      	mov	r0, r5
 80040d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80040d2:	463d      	mov	r5, r7
 80040d4:	e7e5      	b.n	80040a2 <limit_value_by_axis_maximum+0x4a>
 80040d6:	bf00      	nop
 80040d8:	7f7fffff 	.word	0x7f7fffff

080040dc <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80040e0:	4b7a      	ldr	r3, [pc, #488]	; (80042cc <planner_recalculate+0x1f0>)
{
 80040e2:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80ae 	beq.w	800424a <planner_recalculate+0x16e>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80040ee:	4a78      	ldr	r2, [pc, #480]	; (80042d0 <planner_recalculate+0x1f4>)
  block_index--;
 80040f0:	f103 38ff 	add.w	r8, r3, #4294967295
  if (block_index == block_buffer_planned) { return; }
 80040f4:	7814      	ldrb	r4, [r2, #0]
  block_index--;
 80040f6:	fa5f f888 	uxtb.w	r8, r8
  if (block_index == block_buffer_planned) { return; }
 80040fa:	4544      	cmp	r4, r8
 80040fc:	9201      	str	r2, [sp, #4]
 80040fe:	f000 80a1 	beq.w	8004244 <planner_recalculate+0x168>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 8004102:	2634      	movs	r6, #52	; 0x34
 8004104:	4d73      	ldr	r5, [pc, #460]	; (80042d4 <planner_recalculate+0x1f8>)
 8004106:	fb06 5608 	mla	r6, r6, r8, r5

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800410a:	6a31      	ldr	r1, [r6, #32]
 800410c:	69f0      	ldr	r0, [r6, #28]
 800410e:	f7fc fbc1 	bl	8000894 <__aeabi_fmul>
 8004112:	4601      	mov	r1, r0
 8004114:	f7fc fab6 	bl	8000684 <__addsf3>
 8004118:	f8d6 a018 	ldr.w	sl, [r6, #24]
 800411c:	4681      	mov	r9, r0
 800411e:	4651      	mov	r1, sl
 8004120:	f7fc fd60 	bl	8000be4 <__aeabi_fcmple>
 8004124:	f106 0314 	add.w	r3, r6, #20
 8004128:	2800      	cmp	r0, #0
 800412a:	f000 80c0 	beq.w	80042ae <planner_recalculate+0x1d2>
 800412e:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8004132:	f8c3 9000 	str.w	r9, [r3]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	f040 80c1 	bne.w	80042c0 <planner_recalculate+0x1e4>

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 800413e:	455c      	cmp	r4, fp
 8004140:	f000 80a1 	beq.w	8004286 <planner_recalculate+0x1aa>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
      current = &block_buffer[block_index];
 8004144:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004148:	465f      	mov	r7, fp
 800414a:	e027      	b.n	800419c <planner_recalculate+0xc0>
 800414c:	b2df      	uxtb	r7, r3
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <planner_recalculate+0x1fc>)

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8004150:	fb08 5909 	mla	r9, r8, r9, r5
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	42bb      	cmp	r3, r7
 8004158:	d02e      	beq.n	80041b8 <planner_recalculate+0xdc>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 800415a:	f8d9 a018 	ldr.w	sl, [r9, #24]
 800415e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8004162:	4651      	mov	r1, sl
 8004164:	f7fc fd2a 	bl	8000bbc <__aeabi_fcmpeq>
 8004168:	b9b0      	cbnz	r0, 8004198 <planner_recalculate+0xbc>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 800416a:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800416e:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004172:	f7fc fb8f 	bl	8000894 <__aeabi_fmul>
 8004176:	4601      	mov	r1, r0
 8004178:	f7fc fa84 	bl	8000684 <__addsf3>
 800417c:	f8db 1014 	ldr.w	r1, [fp, #20]
 8004180:	f7fc fa80 	bl	8000684 <__addsf3>
 8004184:	4683      	mov	fp, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004186:	4650      	mov	r0, sl
 8004188:	4659      	mov	r1, fp
 800418a:	f7fc fd3f 	bl	8000c0c <__aeabi_fcmpgt>
 800418e:	2800      	cmp	r0, #0
 8004190:	f000 8085 	beq.w	800429e <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 8004194:	f8c9 b014 	str.w	fp, [r9, #20]
    while (block_index != block_buffer_planned) {
 8004198:	42a7      	cmp	r7, r4
 800419a:	d012      	beq.n	80041c2 <planner_recalculate+0xe6>
      current = &block_buffer[block_index];
 800419c:	46b3      	mov	fp, r6
 800419e:	46b9      	mov	r9, r7
 80041a0:	fb08 5607 	mla	r6, r8, r7, r5
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80041a4:	1e7b      	subs	r3, r7, #1
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	d1d0      	bne.n	800414c <planner_recalculate+0x70>
 80041aa:	2723      	movs	r7, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80041ac:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <planner_recalculate+0x1fc>)
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80041ae:	fb08 5909 	mla	r9, r8, r9, r5
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	42bb      	cmp	r3, r7
 80041b6:	d1d0      	bne.n	800415a <planner_recalculate+0x7e>
 80041b8:	f003 fbba 	bl	8007930 <st_update_plan_block_parameters>
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	781c      	ldrb	r4, [r3, #0]
 80041c0:	e7cb      	b.n	800415a <planner_recalculate+0x7e>
 80041c2:	4b42      	ldr	r3, [pc, #264]	; (80042cc <planner_recalculate+0x1f0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	9300      	str	r3, [sp, #0]
  block_index++;
 80041c8:	1c66      	adds	r6, r4, #1
 80041ca:	b2f6      	uxtb	r6, r6
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80041cc:	2e24      	cmp	r6, #36	; 0x24
 80041ce:	bf08      	it	eq
 80041d0:	2600      	moveq	r6, #0
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041d2:	f04f 0934 	mov.w	r9, #52	; 0x34
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 80041d6:	9b00      	ldr	r3, [sp, #0]
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80041d8:	fb09 5a04 	mla	sl, r9, r4, r5
  while (block_index != block_buffer_head) {
 80041dc:	429e      	cmp	r6, r3
 80041de:	d031      	beq.n	8004244 <planner_recalculate+0x168>
    current = next;
    next = &block_buffer[block_index];
 80041e0:	fb09 5806 	mla	r8, r9, r6, r5

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80041e4:	f8da b014 	ldr.w	fp, [sl, #20]
 80041e8:	f8d8 7014 	ldr.w	r7, [r8, #20]
 80041ec:	4659      	mov	r1, fp
 80041ee:	4638      	mov	r0, r7
 80041f0:	f7fc fd0c 	bl	8000c0c <__aeabi_fcmpgt>
 80041f4:	b1a0      	cbz	r0, 8004220 <planner_recalculate+0x144>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80041f6:	f8da 101c 	ldr.w	r1, [sl, #28]
 80041fa:	f8da 0020 	ldr.w	r0, [sl, #32]
 80041fe:	f7fc fb49 	bl	8000894 <__aeabi_fmul>
 8004202:	4601      	mov	r1, r0
 8004204:	f7fc fa3e 	bl	8000684 <__addsf3>
 8004208:	4659      	mov	r1, fp
 800420a:	f7fc fa3b 	bl	8000684 <__addsf3>
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 800420e:	4639      	mov	r1, r7
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004210:	4682      	mov	sl, r0
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004212:	f7fc fcdd 	bl	8000bd0 <__aeabi_fcmplt>
 8004216:	b118      	cbz	r0, 8004220 <planner_recalculate+0x144>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004218:	4657      	mov	r7, sl
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 800421a:	4634      	mov	r4, r6
 800421c:	f8c8 a014 	str.w	sl, [r8, #20]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004220:	fb09 5306 	mla	r3, r9, r6, r5
 8004224:	4639      	mov	r1, r7
 8004226:	6998      	ldr	r0, [r3, #24]
 8004228:	f7fc fcc8 	bl	8000bbc <__aeabi_fcmpeq>
  block_index++;
 800422c:	1c73      	adds	r3, r6, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800422e:	2800      	cmp	r0, #0
 8004230:	bf18      	it	ne
 8004232:	4634      	movne	r4, r6
  block_index++;
 8004234:	b2de      	uxtb	r6, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004236:	2e24      	cmp	r6, #36	; 0x24
  while (block_index != block_buffer_head) {
 8004238:	9b00      	ldr	r3, [sp, #0]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800423a:	d033      	beq.n	80042a4 <planner_recalculate+0x1c8>
  while (block_index != block_buffer_head) {
 800423c:	429e      	cmp	r6, r3
 800423e:	d134      	bne.n	80042aa <planner_recalculate+0x1ce>
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	701c      	strb	r4, [r3, #0]
    block_index = plan_next_block_index( block_index );
  }
}
 8004244:	b003      	add	sp, #12
 8004246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 800424a:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <planner_recalculate+0x1f4>)
 800424c:	781c      	ldrb	r4, [r3, #0]
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	2c23      	cmp	r4, #35	; 0x23
 8004252:	d0f7      	beq.n	8004244 <planner_recalculate+0x168>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004254:	4d1f      	ldr	r5, [pc, #124]	; (80042d4 <planner_recalculate+0x1f8>)
 8004256:	f8d5 1738 	ldr.w	r1, [r5, #1848]	; 0x738
 800425a:	f8d5 073c 	ldr.w	r0, [r5, #1852]	; 0x73c
 800425e:	f7fc fb19 	bl	8000894 <__aeabi_fmul>
 8004262:	4601      	mov	r1, r0
 8004264:	f7fc fa0e 	bl	8000684 <__addsf3>
 8004268:	f8d5 8734 	ldr.w	r8, [r5, #1844]	; 0x734
 800426c:	4606      	mov	r6, r0
 800426e:	4641      	mov	r1, r8
 8004270:	f7fc fcb8 	bl	8000be4 <__aeabi_fcmple>
 8004274:	b1e8      	cbz	r0, 80042b2 <planner_recalculate+0x1d6>
 8004276:	f04f 0b22 	mov.w	fp, #34	; 0x22
 800427a:	f8c5 6730 	str.w	r6, [r5, #1840]	; 0x730
  plan_block_t *current = &block_buffer[block_index];
 800427e:	4e17      	ldr	r6, [pc, #92]	; (80042dc <planner_recalculate+0x200>)
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004280:	455c      	cmp	r4, fp
 8004282:	f47f af5f 	bne.w	8004144 <planner_recalculate+0x68>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <planner_recalculate+0x1fc>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	42a3      	cmp	r3, r4
 800428c:	d19c      	bne.n	80041c8 <planner_recalculate+0xec>
 800428e:	f003 fb4f 	bl	8007930 <st_update_plan_block_parameters>
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <planner_recalculate+0x1f0>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	9b01      	ldr	r3, [sp, #4]
 800429a:	781c      	ldrb	r4, [r3, #0]
 800429c:	e794      	b.n	80041c8 <planner_recalculate+0xec>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 800429e:	f8c9 a014 	str.w	sl, [r9, #20]
 80042a2:	e779      	b.n	8004198 <planner_recalculate+0xbc>
  while (block_index != block_buffer_head) {
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0cb      	beq.n	8004240 <planner_recalculate+0x164>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80042a8:	2600      	movs	r6, #0
    next = &block_buffer[block_index];
 80042aa:	46c2      	mov	sl, r8
 80042ac:	e798      	b.n	80041e0 <planner_recalculate+0x104>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80042ae:	46d1      	mov	r9, sl
 80042b0:	e73d      	b.n	800412e <planner_recalculate+0x52>
 80042b2:	4646      	mov	r6, r8
 80042b4:	f04f 0b22 	mov.w	fp, #34	; 0x22
 80042b8:	f8c5 6730 	str.w	r6, [r5, #1840]	; 0x730
  plan_block_t *current = &block_buffer[block_index];
 80042bc:	4e07      	ldr	r6, [pc, #28]	; (80042dc <planner_recalculate+0x200>)
 80042be:	e7df      	b.n	8004280 <planner_recalculate+0x1a4>
 80042c0:	9b00      	ldr	r3, [sp, #0]
 80042c2:	3b02      	subs	r3, #2
 80042c4:	fa5f fb83 	uxtb.w	fp, r3
 80042c8:	e739      	b.n	800413e <planner_recalculate+0x62>
 80042ca:	bf00      	nop
 80042cc:	20000c7c 	.word	0x20000c7c
 80042d0:	20000c7d 	.word	0x20000c7d
 80042d4:	2000052c 	.word	0x2000052c
 80042d8:	20000c7e 	.word	0x20000c7e
 80042dc:	20000c48 	.word	0x20000c48

080042e0 <plan_reset>:


void plan_reset()
{
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042e0:	2300      	movs	r3, #0

void plan_reset_buffer()
{
  block_buffer_tail = 0;
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80042e2:	2001      	movs	r0, #1
{
 80042e4:	b430      	push	{r4, r5}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042e6:	4a09      	ldr	r2, [pc, #36]	; (800430c <plan_reset+0x2c>)
  block_buffer_tail = 0;
 80042e8:	4909      	ldr	r1, [pc, #36]	; (8004310 <plan_reset+0x30>)
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042ea:	e9c2 3300 	strd	r3, r3, [r2]
  block_buffer_tail = 0;
 80042ee:	700b      	strb	r3, [r1, #0]
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042f0:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80042f4:	e9c2 3304 	strd	r3, r3, [r2, #16]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80042f8:	4906      	ldr	r1, [pc, #24]	; (8004314 <plan_reset+0x34>)
  block_buffer_head = 0; // Empty = tail
 80042fa:	4d07      	ldr	r5, [pc, #28]	; (8004318 <plan_reset+0x38>)
  block_buffer_planned = 0; // = block_buffer_tail;
 80042fc:	4c07      	ldr	r4, [pc, #28]	; (800431c <plan_reset+0x3c>)
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80042fe:	6193      	str	r3, [r2, #24]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004300:	7008      	strb	r0, [r1, #0]
  block_buffer_head = 0; // Empty = tail
 8004302:	702b      	strb	r3, [r5, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004304:	7023      	strb	r3, [r4, #0]
}
 8004306:	bc30      	pop	{r4, r5}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000c80 	.word	0x20000c80
 8004310:	20000c7e 	.word	0x20000c7e
 8004314:	20000c7f 	.word	0x20000c7f
 8004318:	20000c7c 	.word	0x20000c7c
 800431c:	20000c7d 	.word	0x20000c7d

08004320 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8004320:	490a      	ldr	r1, [pc, #40]	; (800434c <plan_discard_current_block+0x2c>)
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <plan_discard_current_block+0x30>)
 8004324:	780a      	ldrb	r2, [r1, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4293      	cmp	r3, r2
 800432a:	d00d      	beq.n	8004348 <plan_discard_current_block+0x28>
  block_index++;
 800432c:	1c53      	adds	r3, r2, #1
 800432e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004330:	2b24      	cmp	r3, #36	; 0x24
 8004332:	bf08      	it	eq
 8004334:	2300      	moveq	r3, #0
{
 8004336:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004338:	4806      	ldr	r0, [pc, #24]	; (8004354 <plan_discard_current_block+0x34>)
    block_buffer_tail = block_index;
 800433a:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800433c:	7804      	ldrb	r4, [r0, #0]
 800433e:	4294      	cmp	r4, r2
 8004340:	bf08      	it	eq
 8004342:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004344:	bc10      	pop	{r4}
 8004346:	4770      	bx	lr
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000c7e 	.word	0x20000c7e
 8004350:	20000c7c 	.word	0x20000c7c
 8004354:	20000c7d 	.word	0x20000c7d

08004358 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004358:	2034      	movs	r0, #52	; 0x34
 800435a:	4a03      	ldr	r2, [pc, #12]	; (8004368 <plan_get_system_motion_block+0x10>)
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <plan_get_system_motion_block+0x14>)
 800435e:	7812      	ldrb	r2, [r2, #0]
}
 8004360:	fb00 3002 	mla	r0, r0, r2, r3
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000c7c 	.word	0x20000c7c
 800436c:	2000052c 	.word	0x2000052c

08004370 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <plan_get_current_block+0x18>)
 8004372:	4a06      	ldr	r2, [pc, #24]	; (800438c <plan_get_current_block+0x1c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800437a:	bf1d      	ittte	ne
 800437c:	2234      	movne	r2, #52	; 0x34
 800437e:	4804      	ldrne	r0, [pc, #16]	; (8004390 <plan_get_current_block+0x20>)
 8004380:	fb02 0003 	mlane	r0, r2, r3, r0
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004384:	2000      	moveq	r0, #0
}
 8004386:	4770      	bx	lr
 8004388:	20000c7e 	.word	0x20000c7e
 800438c:	20000c7c 	.word	0x20000c7c
 8004390:	2000052c 	.word	0x2000052c

08004394 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 8004398:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800439a:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80043a0:	2b24      	cmp	r3, #36	; 0x24
 80043a2:	bf08      	it	eq
 80043a4:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d005      	beq.n	80043b6 <plan_get_exec_block_exit_speed_sqr+0x22>
  return( block_buffer[block_index].entry_speed_sqr );
 80043aa:	2134      	movs	r1, #52	; 0x34
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80043ae:	fb01 2303 	mla	r3, r1, r3, r2
 80043b2:	6958      	ldr	r0, [r3, #20]
 80043b4:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80043b6:	2000      	movs	r0, #0
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000c7e 	.word	0x20000c7e
 80043c0:	20000c7c 	.word	0x20000c7c
 80043c4:	2000052c 	.word	0x2000052c

080043c8 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <plan_check_full_buffer+0x14>)
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <plan_check_full_buffer+0x18>)
 80043cc:	7810      	ldrb	r0, [r2, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80043d0:	1ac0      	subs	r0, r0, r3
 80043d2:	fab0 f080 	clz	r0, r0
 80043d6:	0940      	lsrs	r0, r0, #5
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000c7e 	.word	0x20000c7e
 80043e0:	20000c7f 	.word	0x20000c7f

080043e4 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80043e6:	7c83      	ldrb	r3, [r0, #18]
  float nominal_speed = block->programmed_rate;
 80043e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	d514      	bpl.n	8004418 <plan_compute_profile_nominal_speed+0x34>
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <plan_compute_profile_nominal_speed+0x64>)
 80043f0:	7a58      	ldrb	r0, [r3, #9]
 80043f2:	f7fc f9fb 	bl	80007ec <__aeabi_i2f>
 80043f6:	4915      	ldr	r1, [pc, #84]	; (800444c <plan_compute_profile_nominal_speed+0x68>)
 80043f8:	f7fc fa4c 	bl	8000894 <__aeabi_fmul>
 80043fc:	4629      	mov	r1, r5
 80043fe:	f7fc fa49 	bl	8000894 <__aeabi_fmul>
 8004402:	4604      	mov	r4, r0
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 8004404:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004408:	4620      	mov	r0, r4
 800440a:	f7fc fbf5 	bl	8000bf8 <__aeabi_fcmpge>
 800440e:	b908      	cbnz	r0, 8004414 <plan_compute_profile_nominal_speed+0x30>
 8004410:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
  return(MINIMUM_FEED_RATE);
}
 8004414:	4620      	mov	r0, r4
 8004416:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004418:	075b      	lsls	r3, r3, #29
 800441a:	4604      	mov	r4, r0
 800441c:	d40b      	bmi.n	8004436 <plan_compute_profile_nominal_speed+0x52>
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <plan_compute_profile_nominal_speed+0x64>)
 8004420:	7a18      	ldrb	r0, [r3, #8]
 8004422:	f7fc f9e3 	bl	80007ec <__aeabi_i2f>
 8004426:	4909      	ldr	r1, [pc, #36]	; (800444c <plan_compute_profile_nominal_speed+0x68>)
 8004428:	f7fc fa34 	bl	8000894 <__aeabi_fmul>
 800442c:	4601      	mov	r1, r0
 800442e:	4628      	mov	r0, r5
 8004430:	f7fc fa30 	bl	8000894 <__aeabi_fmul>
 8004434:	4605      	mov	r5, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004436:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8004438:	4629      	mov	r1, r5
 800443a:	4620      	mov	r0, r4
 800443c:	f7fc fbd2 	bl	8000be4 <__aeabi_fcmple>
 8004440:	2800      	cmp	r0, #0
 8004442:	d1df      	bne.n	8004404 <plan_compute_profile_nominal_speed+0x20>
 8004444:	462c      	mov	r4, r5
 8004446:	e7dd      	b.n	8004404 <plan_compute_profile_nominal_speed+0x20>
 8004448:	20001378 	.word	0x20001378
 800444c:	3c23d70a 	.word	0x3c23d70a

08004450 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t block_index = block_buffer_tail;
 8004454:	4a39      	ldr	r2, [pc, #228]	; (800453c <plan_update_velocity_profile_parameters+0xec>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <plan_update_velocity_profile_parameters+0xf0>)
  uint8_t block_index = block_buffer_tail;
 8004458:	7815      	ldrb	r5, [r2, #0]
  while (block_index != block_buffer_head) {
 800445a:	781b      	ldrb	r3, [r3, #0]
{
 800445c:	b085      	sub	sp, #20
  while (block_index != block_buffer_head) {
 800445e:	429d      	cmp	r5, r3
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	d065      	beq.n	8004530 <plan_update_velocity_profile_parameters+0xe0>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004464:	4c37      	ldr	r4, [pc, #220]	; (8004544 <plan_update_velocity_profile_parameters+0xf4>)
    block = &block_buffer[block_index];
 8004466:	f04f 0a34 	mov.w	sl, #52	; 0x34
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800446a:	7a20      	ldrb	r0, [r4, #8]
 800446c:	f7fc f9be 	bl	80007ec <__aeabi_i2f>
 8004470:	4935      	ldr	r1, [pc, #212]	; (8004548 <plan_update_velocity_profile_parameters+0xf8>)
 8004472:	f7fc fa0f 	bl	8000894 <__aeabi_fmul>
 8004476:	4603      	mov	r3, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004478:	7a60      	ldrb	r0, [r4, #9]
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	f7fc f9b6 	bl	80007ec <__aeabi_i2f>
 8004480:	4931      	ldr	r1, [pc, #196]	; (8004548 <plan_update_velocity_profile_parameters+0xf8>)
 8004482:	f7fc fa07 	bl	8000894 <__aeabi_fmul>
 8004486:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 800448a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800454c <plan_update_velocity_profile_parameters+0xfc>
 800448e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8004554 <plan_update_velocity_profile_parameters+0x104>
 8004492:	9002      	str	r0, [sp, #8]
 8004494:	e024      	b.n	80044e0 <plan_update_velocity_profile_parameters+0x90>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004496:	4639      	mov	r1, r7
 8004498:	9802      	ldr	r0, [sp, #8]
 800449a:	f7fc f9fb 	bl	8000894 <__aeabi_fmul>
 800449e:	4604      	mov	r4, r0
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80044a0:	4649      	mov	r1, r9
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7fc fba8 	bl	8000bf8 <__aeabi_fcmpge>
 80044a8:	b900      	cbnz	r0, 80044ac <plan_update_velocity_profile_parameters+0x5c>
 80044aa:	464c      	mov	r4, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044ac:	4621      	mov	r1, r4
 80044ae:	4640      	mov	r0, r8
 80044b0:	f7fc fb8e 	bl	8000bd0 <__aeabi_fcmplt>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 80044b4:	6a77      	ldr	r7, [r6, #36]	; 0x24
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d034      	beq.n	8004524 <plan_update_velocity_profile_parameters+0xd4>
 80044ba:	4641      	mov	r1, r8
 80044bc:	4640      	mov	r0, r8
 80044be:	f7fc f9e9 	bl	8000894 <__aeabi_fmul>
 80044c2:	4680      	mov	r8, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80044c4:	4641      	mov	r1, r8
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7fc fb82 	bl	8000bd0 <__aeabi_fcmplt>
 80044cc:	b300      	cbz	r0, 8004510 <plan_update_velocity_profile_parameters+0xc0>
  block_index++;
 80044ce:	3501      	adds	r5, #1
 80044d0:	b2ed      	uxtb	r5, r5
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044d2:	2d24      	cmp	r5, #36	; 0x24
  while (block_index != block_buffer_head) {
 80044d4:	9b01      	ldr	r3, [sp, #4]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80044d6:	61b7      	str	r7, [r6, #24]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044d8:	d021      	beq.n	800451e <plan_update_velocity_profile_parameters+0xce>
  while (block_index != block_buffer_head) {
 80044da:	42ab      	cmp	r3, r5
 80044dc:	d029      	beq.n	8004532 <plan_update_velocity_profile_parameters+0xe2>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80044de:	46a0      	mov	r8, r4
    block = &block_buffer[block_index];
 80044e0:	fb0a b605 	mla	r6, sl, r5, fp
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044e4:	7cb3      	ldrb	r3, [r6, #18]
  float nominal_speed = block->programmed_rate;
 80044e6:	6af7      	ldr	r7, [r6, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044e8:	07da      	lsls	r2, r3, #31
 80044ea:	d4d4      	bmi.n	8004496 <plan_update_velocity_profile_parameters+0x46>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044ec:	075b      	lsls	r3, r3, #29
 80044ee:	d404      	bmi.n	80044fa <plan_update_velocity_profile_parameters+0xaa>
 80044f0:	4638      	mov	r0, r7
 80044f2:	9903      	ldr	r1, [sp, #12]
 80044f4:	f7fc f9ce 	bl	8000894 <__aeabi_fmul>
 80044f8:	4607      	mov	r7, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80044fa:	fb0a b305 	mla	r3, sl, r5, fp
 80044fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004500:	4639      	mov	r1, r7
 8004502:	4620      	mov	r0, r4
 8004504:	f7fc fb6e 	bl	8000be4 <__aeabi_fcmple>
 8004508:	2800      	cmp	r0, #0
 800450a:	d1c9      	bne.n	80044a0 <plan_update_velocity_profile_parameters+0x50>
 800450c:	463c      	mov	r4, r7
 800450e:	e7c7      	b.n	80044a0 <plan_update_velocity_profile_parameters+0x50>
  block_index++;
 8004510:	3501      	adds	r5, #1
 8004512:	b2ed      	uxtb	r5, r5
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004514:	2d24      	cmp	r5, #36	; 0x24
  while (block_index != block_buffer_head) {
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	f8c6 8018 	str.w	r8, [r6, #24]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800451c:	d1dd      	bne.n	80044da <plan_update_velocity_profile_parameters+0x8a>
  while (block_index != block_buffer_head) {
 800451e:	b143      	cbz	r3, 8004532 <plan_update_velocity_profile_parameters+0xe2>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004520:	2500      	movs	r5, #0
 8004522:	e7dc      	b.n	80044de <plan_update_velocity_profile_parameters+0x8e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004524:	4621      	mov	r1, r4
 8004526:	4620      	mov	r0, r4
 8004528:	f7fc f9b4 	bl	8000894 <__aeabi_fmul>
 800452c:	4680      	mov	r8, r0
 800452e:	e7c9      	b.n	80044c4 <plan_update_velocity_profile_parameters+0x74>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004530:	4c06      	ldr	r4, [pc, #24]	; (800454c <plan_update_velocity_profile_parameters+0xfc>)
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <plan_update_velocity_profile_parameters+0x100>)
 8004534:	619c      	str	r4, [r3, #24]
}
 8004536:	b005      	add	sp, #20
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	20000c7e 	.word	0x20000c7e
 8004540:	20000c7c 	.word	0x20000c7c
 8004544:	20001378 	.word	0x20001378
 8004548:	3c23d70a 	.word	0x3c23d70a
 800454c:	7f7fffff 	.word	0x7f7fffff
 8004550:	20000c80 	.word	0x20000c80
 8004554:	2000052c 	.word	0x2000052c

08004558 <plan_buffer_line>:
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004558:	2234      	movs	r2, #52	; 0x34
{
 800455a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455e:	468a      	mov	sl, r1
 8004560:	4683      	mov	fp, r0
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004562:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8004828 <plan_buffer_line+0x2d0>
 8004566:	4da4      	ldr	r5, [pc, #656]	; (80047f8 <plan_buffer_line+0x2a0>)
 8004568:	f898 6000 	ldrb.w	r6, [r8]
{
 800456c:	b091      	sub	sp, #68	; 0x44
  plan_block_t *block = &block_buffer[block_buffer_head];
 800456e:	fb02 5406 	mla	r4, r2, r6, r5
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8004572:	2100      	movs	r1, #0
 8004574:	4620      	mov	r0, r4
 8004576:	f005 fbc9 	bl	8009d0c <memset>
  block->condition = pl_data->condition;
 800457a:	f89a 3008 	ldrb.w	r3, [sl, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 800457e:	f8da 2004 	ldr.w	r2, [sl, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8004582:	0798      	lsls	r0, r3, #30
    block->spindle_speed = pl_data->spindle_speed;
 8004584:	6322      	str	r2, [r4, #48]	; 0x30
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004586:	4f9d      	ldr	r7, [pc, #628]	; (80047fc <plan_buffer_line+0x2a4>)
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8004588:	bf4c      	ite	mi
 800458a:	4a9d      	ldrmi	r2, [pc, #628]	; (8004800 <plan_buffer_line+0x2a8>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800458c:	4a9d      	ldrpl	r2, [pc, #628]	; (8004804 <plan_buffer_line+0x2ac>)
  block->condition = pl_data->condition;
 800458e:	74a3      	strb	r3, [r4, #18]
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004590:	ab07      	add	r3, sp, #28
 8004592:	ca07      	ldmia	r2, {r0, r1, r2}
 8004594:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	f8db 1000 	ldr.w	r1, [fp]
 800459e:	4610      	mov	r0, r2
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	f7fc f977 	bl	8000894 <__aeabi_fmul>
 80045a6:	f005 fcd5 	bl	8009f54 <lroundf>
 80045aa:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045ac:	9807      	ldr	r0, [sp, #28]
 80045ae:	2334      	movs	r3, #52	; 0x34
 80045b0:	1a08      	subs	r0, r1, r0
 80045b2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80045b6:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 80045ba:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045be:	45e1      	cmp	r9, ip
 80045c0:	bf38      	it	cc
 80045c2:	46e1      	movcc	r9, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80045c4:	fb03 f306 	mul.w	r3, r3, r6
 80045c8:	f845 c003 	str.w	ip, [r5, r3]
 80045cc:	442b      	add	r3, r5
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80045ce:	f8c3 900c 	str.w	r9, [r3, #12]
 80045d2:	9301      	str	r3, [sp, #4]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045d4:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80045d6:	f7fc f909 	bl	80007ec <__aeabi_i2f>
 80045da:	9a00      	ldr	r2, [sp, #0]
 80045dc:	4611      	mov	r1, r2
 80045de:	f7fc fa0d 	bl	80009fc <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045e2:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80045e4:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80045e6:	f7fc faf3 	bl	8000bd0 <__aeabi_fcmplt>
 80045ea:	b128      	cbz	r0, 80045f8 <plan_buffer_line+0xa0>
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	4a86      	ldr	r2, [pc, #536]	; (8004808 <plan_buffer_line+0x2b0>)
 80045f0:	8a19      	ldrh	r1, [r3, #16]
 80045f2:	8812      	ldrh	r2, [r2, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	821a      	strh	r2, [r3, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	f8db 1004 	ldr.w	r1, [fp, #4]
 80045fe:	4610      	mov	r0, r2
 8004600:	9200      	str	r2, [sp, #0]
 8004602:	f7fc f947 	bl	8000894 <__aeabi_fmul>
 8004606:	f005 fca5 	bl	8009f54 <lroundf>
 800460a:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800460c:	9808      	ldr	r0, [sp, #32]
 800460e:	2334      	movs	r3, #52	; 0x34
 8004610:	1a08      	subs	r0, r1, r0
 8004612:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8004616:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800461a:	45e1      	cmp	r9, ip
 800461c:	bf38      	it	cc
 800461e:	46e1      	movcc	r9, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004620:	fb03 5306 	mla	r3, r3, r6, r5
 8004624:	f8c3 c004 	str.w	ip, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004628:	f8c3 900c 	str.w	r9, [r3, #12]
 800462c:	9301      	str	r3, [sp, #4]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800462e:	9105      	str	r1, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004630:	f7fc f8dc 	bl	80007ec <__aeabi_i2f>
 8004634:	9a00      	ldr	r2, [sp, #0]
 8004636:	4611      	mov	r1, r2
 8004638:	f7fc f9e0 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800463c:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800463e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004640:	f7fc fac6 	bl	8000bd0 <__aeabi_fcmplt>
 8004644:	b128      	cbz	r0, 8004652 <plan_buffer_line+0xfa>
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	4a6f      	ldr	r2, [pc, #444]	; (8004808 <plan_buffer_line+0x2b0>)
 800464a:	8a19      	ldrh	r1, [r3, #16]
 800464c:	8852      	ldrh	r2, [r2, #2]
 800464e:	430a      	orrs	r2, r1
 8004650:	821a      	strh	r2, [r3, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f8db 1008 	ldr.w	r1, [fp, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f7fc f91a 	bl	8000894 <__aeabi_fmul>
 8004660:	f005 fc78 	bl	8009f54 <lroundf>
 8004664:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004668:	f04f 0b34 	mov.w	fp, #52	; 0x34
 800466c:	1a10      	subs	r0, r2, r0
 800466e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8004672:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004676:	4589      	cmp	r9, r1
 8004678:	bf38      	it	cc
 800467a:	4689      	movcc	r9, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800467c:	fb0b 5b06 	mla	fp, fp, r6, r5
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004680:	e9cb 1902 	strd	r1, r9, [fp, #8]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004684:	9206      	str	r2, [sp, #24]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004686:	f7fc f8b1 	bl	80007ec <__aeabi_i2f>
 800468a:	9b00      	ldr	r3, [sp, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	f7fc f9b5 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004692:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004694:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004696:	f7fc fa9b 	bl	8000bd0 <__aeabi_fcmplt>
 800469a:	b930      	cbnz	r0, 80046aa <plan_buffer_line+0x152>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 800469c:	f1b9 0f00 	cmp.w	r9, #0
 80046a0:	d10d      	bne.n	80046be <plan_buffer_line+0x166>
 80046a2:	4648      	mov	r0, r9

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 80046a4:	b011      	add	sp, #68	; 0x44
 80046a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046aa:	4b57      	ldr	r3, [pc, #348]	; (8004808 <plan_buffer_line+0x2b0>)
 80046ac:	f8bb 2010 	ldrh.w	r2, [fp, #16]
 80046b0:	889b      	ldrh	r3, [r3, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8ab 3010 	strh.w	r3, [fp, #16]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	d0f1      	beq.n	80046a2 <plan_buffer_line+0x14a>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80046be:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80046c2:	4648      	mov	r0, r9
 80046c4:	f7ff fc7e 	bl	8003fc4 <convert_delta_vector_to_unit_vector>
 80046c8:	f04f 0b34 	mov.w	fp, #52	; 0x34
 80046cc:	4603      	mov	r3, r0
 80046ce:	fb0b 5b06 	mla	fp, fp, r6, r5
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80046d2:	4649      	mov	r1, r9
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80046d4:	f8cb 3020 	str.w	r3, [fp, #32]
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80046d8:	484c      	ldr	r0, [pc, #304]	; (800480c <plan_buffer_line+0x2b4>)
 80046da:	f7ff fcbd 	bl	8004058 <limit_value_by_axis_maximum>
 80046de:	4603      	mov	r3, r0
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046e0:	4649      	mov	r1, r9
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80046e2:	f8cb 301c 	str.w	r3, [fp, #28]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046e6:	484a      	ldr	r0, [pc, #296]	; (8004810 <plan_buffer_line+0x2b8>)
 80046e8:	f7ff fcb6 	bl	8004058 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80046ec:	f89b 3012 	ldrb.w	r3, [fp, #18]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80046f0:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80046f4:	07d9      	lsls	r1, r3, #31
 80046f6:	d56c      	bpl.n	80047d2 <plan_buffer_line+0x27a>
 80046f8:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80046fc:	4a45      	ldr	r2, [pc, #276]	; (8004814 <plan_buffer_line+0x2bc>)
 80046fe:	f898 1000 	ldrb.w	r1, [r8]
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	4291      	cmp	r1, r2
 8004706:	d002      	beq.n	800470e <plan_buffer_line+0x1b6>
 8004708:	079b      	lsls	r3, r3, #30
 800470a:	f140 808f 	bpl.w	800482c <plan_buffer_line+0x2d4>
    block->entry_speed_sqr = 0.0f;
 800470e:	2334      	movs	r3, #52	; 0x34
 8004710:	2200      	movs	r2, #0
 8004712:	fb03 5306 	mla	r3, r3, r6, r5
 8004716:	615a      	str	r2, [r3, #20]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 800471a:	2334      	movs	r3, #52	; 0x34
 800471c:	fb03 5306 	mla	r3, r3, r6, r5
 8004720:	7c9a      	ldrb	r2, [r3, #18]
 8004722:	0790      	lsls	r0, r2, #30
 8004724:	d464      	bmi.n	80047f0 <plan_buffer_line+0x298>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004726:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004728:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800472a:	f100 80cf 	bmi.w	80048cc <plan_buffer_line+0x374>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800472e:	0753      	lsls	r3, r2, #29
 8004730:	d40a      	bmi.n	8004748 <plan_buffer_line+0x1f0>
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <plan_buffer_line+0x2c0>)
 8004734:	7a18      	ldrb	r0, [r3, #8]
 8004736:	f7fc f859 	bl	80007ec <__aeabi_i2f>
 800473a:	4639      	mov	r1, r7
 800473c:	f7fc f8aa 	bl	8000894 <__aeabi_fmul>
 8004740:	4936      	ldr	r1, [pc, #216]	; (800481c <plan_buffer_line+0x2c4>)
 8004742:	f7fc f8a7 	bl	8000894 <__aeabi_fmul>
 8004746:	4607      	mov	r7, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004748:	2334      	movs	r3, #52	; 0x34
 800474a:	fb03 5506 	mla	r5, r3, r6, r5
 800474e:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8004750:	4639      	mov	r1, r7
 8004752:	4628      	mov	r0, r5
 8004754:	f7fc fa46 	bl	8000be4 <__aeabi_fcmple>
 8004758:	b900      	cbnz	r0, 800475c <plan_buffer_line+0x204>
 800475a:	463d      	mov	r5, r7
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 800475c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004760:	4628      	mov	r0, r5
 8004762:	f7fc fa49 	bl	8000bf8 <__aeabi_fcmpge>
 8004766:	b908      	cbnz	r0, 800476c <plan_buffer_line+0x214>
 8004768:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 800476c:	4e25      	ldr	r6, [pc, #148]	; (8004804 <plan_buffer_line+0x2ac>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800476e:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004770:	69b7      	ldr	r7, [r6, #24]
 8004772:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004776:	4638      	mov	r0, r7
 8004778:	f7fc fa2a 	bl	8000bd0 <__aeabi_fcmplt>
 800477c:	2800      	cmp	r0, #0
 800477e:	f000 80b4 	beq.w	80048ea <plan_buffer_line+0x392>
 8004782:	4639      	mov	r1, r7
 8004784:	4638      	mov	r0, r7
 8004786:	f7fc f885 	bl	8000894 <__aeabi_fmul>
 800478a:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800478c:	4639      	mov	r1, r7
 800478e:	4650      	mov	r0, sl
 8004790:	f7fc fa1e 	bl	8000bd0 <__aeabi_fcmplt>
 8004794:	2800      	cmp	r0, #0
 8004796:	f040 80a5 	bne.w	80048e4 <plan_buffer_line+0x38c>
 800479a:	61a7      	str	r7, [r4, #24]
    block_buffer_head = next_buffer_head;
 800479c:	4a20      	ldr	r2, [pc, #128]	; (8004820 <plan_buffer_line+0x2c8>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800479e:	4f21      	ldr	r7, [pc, #132]	; (8004824 <plan_buffer_line+0x2cc>)
    block_buffer_head = next_buffer_head;
 80047a0:	7811      	ldrb	r1, [r2, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80047a2:	ac04      	add	r4, sp, #16
  block_index++;
 80047a4:	1c4b      	adds	r3, r1, #1
 80047a6:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80047a8:	2b24      	cmp	r3, #36	; 0x24
 80047aa:	bf08      	it	eq
 80047ac:	2300      	moveq	r3, #0
    pl.previous_nominal_speed = nominal_speed;
 80047ae:	61b5      	str	r5, [r6, #24]
    block_buffer_head = next_buffer_head;
 80047b0:	f888 1000 	strb.w	r1, [r8]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 80047b4:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80047b6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80047ba:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80047be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80047c2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    planner_recalculate();
 80047c6:	f7ff fc89 	bl	80040dc <planner_recalculate>
  return(PLAN_OK);
 80047ca:	2001      	movs	r0, #1
}
 80047cc:	b011      	add	sp, #68	; 0x44
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    block->programmed_rate = pl_data->feed_rate;
 80047d2:	f8da 1000 	ldr.w	r1, [sl]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80047d6:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 80047d8:	f8cb 102c 	str.w	r1, [fp, #44]	; 0x2c
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80047dc:	d58e      	bpl.n	80046fc <plan_buffer_line+0x1a4>
 80047de:	f8db 0020 	ldr.w	r0, [fp, #32]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f7fc f856 	bl	8000894 <__aeabi_fmul>
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
 80047ee:	e785      	b.n	80046fc <plan_buffer_line+0x1a4>
  return(PLAN_OK);
 80047f0:	2001      	movs	r0, #1
}
 80047f2:	b011      	add	sp, #68	; 0x44
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	2000052c 	.word	0x2000052c
 80047fc:	20001834 	.word	0x20001834
 8004800:	2000139c 	.word	0x2000139c
 8004804:	20000c80 	.word	0x20000c80
 8004808:	0800b11c 	.word	0x0800b11c
 800480c:	2000184c 	.word	0x2000184c
 8004810:	20001840 	.word	0x20001840
 8004814:	20000c7e 	.word	0x20000c7e
 8004818:	20001378 	.word	0x20001378
 800481c:	3c23d70a 	.word	0x3c23d70a
 8004820:	20000c7f 	.word	0x20000c7f
 8004824:	20000c8c 	.word	0x20000c8c
 8004828:	20000c7c 	.word	0x20000c7c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800482c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80049a0 <plan_buffer_line+0x448>
 8004830:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004834:	f8db 300c 	ldr.w	r3, [fp, #12]
 8004838:	4651      	mov	r1, sl
 800483a:	4618      	mov	r0, r3
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	f7fc f829 	bl	8000894 <__aeabi_fmul>
 8004842:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004844:	9b00      	ldr	r3, [sp, #0]
 8004846:	4650      	mov	r0, sl
 8004848:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800484a:	9200      	str	r2, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800484c:	f7fb ff18 	bl	8000680 <__aeabi_fsub>
 8004850:	4602      	mov	r2, r0
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004852:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004856:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800485a:	4619      	mov	r1, r3
 800485c:	4650      	mov	r0, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800485e:	920d      	str	r2, [sp, #52]	; 0x34
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	f7fc f817 	bl	8000894 <__aeabi_fmul>
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	4601      	mov	r1, r0
 800486a:	9003      	str	r0, [sp, #12]
 800486c:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8004870:	f7fb ff06 	bl	8000680 <__aeabi_fsub>
 8004874:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	4650      	mov	r0, sl
 800487a:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800487c:	4692      	mov	sl, r2
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800487e:	f7fb feff 	bl	8000680 <__aeabi_fsub>
 8004882:	4684      	mov	ip, r0
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004884:	f8db 2014 	ldr.w	r2, [fp, #20]
 8004888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	9202      	str	r2, [sp, #8]
 8004890:	9301      	str	r3, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004892:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004896:	f7fb fffd 	bl	8000894 <__aeabi_fmul>
 800489a:	4683      	mov	fp, r0
 800489c:	4650      	mov	r0, sl
 800489e:	4659      	mov	r1, fp
 80048a0:	f7fb feee 	bl	8000680 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	9a02      	ldr	r2, [sp, #8]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80048a8:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fb fee7 	bl	8000680 <__aeabi_fsub>
 80048b2:	4603      	mov	r3, r0
    if (junction_cos_theta > 0.999999f) {
 80048b4:	4934      	ldr	r1, [pc, #208]	; (8004988 <plan_buffer_line+0x430>)
 80048b6:	4650      	mov	r0, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80048b8:	930f      	str	r3, [sp, #60]	; 0x3c
    if (junction_cos_theta > 0.999999f) {
 80048ba:	f7fc f9a7 	bl	8000c0c <__aeabi_fcmpgt>
 80048be:	b1d0      	cbz	r0, 80048f6 <plan_buffer_line+0x39e>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 80048c0:	2334      	movs	r3, #52	; 0x34
 80048c2:	2200      	movs	r2, #0
 80048c4:	fb03 5306 	mla	r3, r3, r6, r5
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ca:	e726      	b.n	800471a <plan_buffer_line+0x1c2>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80048cc:	4b2f      	ldr	r3, [pc, #188]	; (800498c <plan_buffer_line+0x434>)
 80048ce:	7a58      	ldrb	r0, [r3, #9]
 80048d0:	f7fb ff8c 	bl	80007ec <__aeabi_i2f>
 80048d4:	4639      	mov	r1, r7
 80048d6:	f7fb ffdd 	bl	8000894 <__aeabi_fmul>
 80048da:	492d      	ldr	r1, [pc, #180]	; (8004990 <plan_buffer_line+0x438>)
 80048dc:	f7fb ffda 	bl	8000894 <__aeabi_fmul>
 80048e0:	4605      	mov	r5, r0
 80048e2:	e73b      	b.n	800475c <plan_buffer_line+0x204>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80048e4:	f8c4 a018 	str.w	sl, [r4, #24]
 80048e8:	e758      	b.n	800479c <plan_buffer_line+0x244>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80048ea:	4629      	mov	r1, r5
 80048ec:	4628      	mov	r0, r5
 80048ee:	f7fb ffd1 	bl	8000894 <__aeabi_fmul>
 80048f2:	4607      	mov	r7, r0
 80048f4:	e74a      	b.n	800478c <plan_buffer_line+0x234>
      if (junction_cos_theta < -0.999999f) {
 80048f6:	4650      	mov	r0, sl
 80048f8:	4926      	ldr	r1, [pc, #152]	; (8004994 <plan_buffer_line+0x43c>)
 80048fa:	f7fc f969 	bl	8000bd0 <__aeabi_fcmplt>
 80048fe:	b128      	cbz	r0, 800490c <plan_buffer_line+0x3b4>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004900:	2334      	movs	r3, #52	; 0x34
 8004902:	fb03 5306 	mla	r3, r3, r6, r5
 8004906:	4a24      	ldr	r2, [pc, #144]	; (8004998 <plan_buffer_line+0x440>)
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
 800490a:	e706      	b.n	800471a <plan_buffer_line+0x1c2>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 800490c:	a80d      	add	r0, sp, #52	; 0x34
 800490e:	f7ff fb59 	bl	8003fc4 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004912:	a90d      	add	r1, sp, #52	; 0x34
 8004914:	4821      	ldr	r0, [pc, #132]	; (800499c <plan_buffer_line+0x444>)
 8004916:	f7ff fb9f 	bl	8004058 <limit_value_by_axis_maximum>
 800491a:	4603      	mov	r3, r0
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 800491c:	9900      	ldr	r1, [sp, #0]
 800491e:	9803      	ldr	r0, [sp, #12]
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004920:	9300      	str	r3, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004922:	f7fb feaf 	bl	8000684 <__addsf3>
 8004926:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800492a:	4682      	mov	sl, r0
 800492c:	4658      	mov	r0, fp
 800492e:	f7fb fea9 	bl	8000684 <__addsf3>
 8004932:	4601      	mov	r1, r0
 8004934:	4650      	mov	r0, sl
 8004936:	f7fb fea5 	bl	8000684 <__addsf3>
 800493a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800493e:	f7fb ffa9 	bl	8000894 <__aeabi_fmul>
 8004942:	f005 fb6b 	bl	800a01c <sqrtf>
 8004946:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004948:	9b00      	ldr	r3, [sp, #0]
 800494a:	4651      	mov	r1, sl
 800494c:	4618      	mov	r0, r3
 800494e:	f7fb ffa1 	bl	8000894 <__aeabi_fmul>
 8004952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004954:	f7fb ff9e 	bl	8000894 <__aeabi_fmul>
 8004958:	4651      	mov	r1, sl
 800495a:	4607      	mov	r7, r0
 800495c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004960:	f7fb fe8e 	bl	8000680 <__aeabi_fsub>
 8004964:	4601      	mov	r1, r0
 8004966:	4638      	mov	r0, r7
 8004968:	f7fc f848 	bl	80009fc <__aeabi_fdiv>
 800496c:	f04f 0b34 	mov.w	fp, #52	; 0x34
 8004970:	2100      	movs	r1, #0
 8004972:	4607      	mov	r7, r0
 8004974:	fb0b 5b06 	mla	fp, fp, r6, r5
 8004978:	f7fc f93e 	bl	8000bf8 <__aeabi_fcmpge>
 800497c:	b900      	cbnz	r0, 8004980 <plan_buffer_line+0x428>
 800497e:	2700      	movs	r7, #0
 8004980:	f8cb 7024 	str.w	r7, [fp, #36]	; 0x24
 8004984:	e6c9      	b.n	800471a <plan_buffer_line+0x1c2>
 8004986:	bf00      	nop
 8004988:	3f7fffef 	.word	0x3f7fffef
 800498c:	20001378 	.word	0x20001378
 8004990:	3c23d70a 	.word	0x3c23d70a
 8004994:	bf7fffef 	.word	0xbf7fffef
 8004998:	7f7fffff 	.word	0x7f7fffff
 800499c:	2000184c 	.word	0x2000184c
 80049a0:	20000c80 	.word	0x20000c80

080049a4 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <plan_sync_position+0x14>)
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <plan_sync_position+0x18>)
 80049a8:	e9d2 1000 	ldrd	r1, r0, [r2]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	e9c3 1000 	strd	r1, r0, [r3]
 80049b2:	609a      	str	r2, [r3, #8]
    #endif
  }
}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000139c 	.word	0x2000139c
 80049bc:	20000c80 	.word	0x20000c80

080049c0 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 80049c0:	4a06      	ldr	r2, [pc, #24]	; (80049dc <plan_get_block_buffer_available+0x1c>)
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <plan_get_block_buffer_available+0x20>)
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
  return((block_buffer_tail-block_buffer_head-1));
 80049ca:	bf33      	iteet	cc
 80049cc:	f103 30ff 	addcc.w	r0, r3, #4294967295
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 80049d0:	3323      	addcs	r3, #35	; 0x23
 80049d2:	1a98      	subcs	r0, r3, r2
  return((block_buffer_tail-block_buffer_head-1));
 80049d4:	1a80      	subcc	r0, r0, r2
 80049d6:	b2c0      	uxtb	r0, r0
}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000c7c 	.word	0x20000c7c
 80049e0:	20000c7e 	.word	0x20000c7e

080049e4 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 80049e4:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 80049e6:	f002 ffa3 	bl	8007930 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <plan_cycle_reinitialize+0x18>)
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <plan_cycle_reinitialize+0x1c>)
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 80049f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 80049f6:	f7ff bb71 	b.w	80040dc <planner_recalculate>
 80049fa:	bf00      	nop
 80049fc:	20000c7e 	.word	0x20000c7e
 8004a00:	20000c7d 	.word	0x20000c7d

08004a04 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4604      	mov	r4, r0
  while (*s)
 8004a08:	7800      	ldrb	r0, [r0, #0]
 8004a0a:	b128      	cbz	r0, 8004a18 <printString+0x14>
    serial_write(*s++);
 8004a0c:	f001 feec 	bl	80067e8 <serial_write>
  while (*s)
 8004a10:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d1f9      	bne.n	8004a0c <printString+0x8>
}
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	bf00      	nop

08004a1c <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004a1c:	2863      	cmp	r0, #99	; 0x63
{
 8004a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a20:	4604      	mov	r4, r0
  if (n >= 100) { // 100-255
 8004a22:	d91d      	bls.n	8004a60 <print_uint8_base10+0x44>
    digit_a = '0' + n % 10;
    n /= 10;
 8004a24:	4e1b      	ldr	r6, [pc, #108]	; (8004a94 <print_uint8_base10+0x78>)
 8004a26:	fba6 3500 	umull	r3, r5, r6, r0
 8004a2a:	08ef      	lsrs	r7, r5, #3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004a2c:	fba6 3607 	umull	r3, r6, r6, r7
 8004a30:	08f6      	lsrs	r6, r6, #3
  }
  serial_write('0' + n);
 8004a32:	f106 0030 	add.w	r0, r6, #48	; 0x30
    digit_b = '0' + n % 10;
 8004a36:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004a3a:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
  serial_write('0' + n);
 8004a3e:	f001 fed3 	bl	80067e8 <serial_write>
    digit_b = '0' + n % 10;
 8004a42:	f106 0030 	add.w	r0, r6, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004a46:	b2c0      	uxtb	r0, r0
 8004a48:	f001 fece 	bl	80067e8 <serial_write>
    digit_a = '0' + n % 10;
 8004a4c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8004a50:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
 8004a54:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004a56:	b2c0      	uxtb	r0, r0
}
 8004a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (digit_a) { serial_write(digit_a); }
 8004a5c:	f001 bec4 	b.w	80067e8 <serial_write>
  if (n >= 10) { // 10-99
 8004a60:	2809      	cmp	r0, #9
 8004a62:	d806      	bhi.n	8004a72 <print_uint8_base10+0x56>
  serial_write('0' + n);
 8004a64:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004a68:	b2c0      	uxtb	r0, r0
}
 8004a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  serial_write('0' + n);
 8004a6e:	f001 bebb 	b.w	80067e8 <serial_write>
    n /= 10;
 8004a72:	260a      	movs	r6, #10
 8004a74:	fbb4 f5f6 	udiv	r5, r4, r6
  serial_write('0' + n);
 8004a78:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004a7c:	b2c0      	uxtb	r0, r0
 8004a7e:	f001 feb3 	bl	80067e8 <serial_write>
    digit_b = '0' + n % 10;
 8004a82:	fb06 4015 	mls	r0, r6, r5, r4
}
 8004a86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digit_b = '0' + n % 10;
 8004a8a:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004a8c:	b2c0      	uxtb	r0, r0
 8004a8e:	f001 beab 	b.w	80067e8 <serial_write>
 8004a92:	bf00      	nop
 8004a94:	cccccccd 	.word	0xcccccccd

08004a98 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	b085      	sub	sp, #20
  if (n < 0) {
 8004a9e:	2100      	movs	r1, #0
{
 8004aa0:	4606      	mov	r6, r0
  if (n < 0) {
 8004aa2:	f7fc f895 	bl	8000bd0 <__aeabi_fcmplt>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f040 80d2 	bne.w	8004c50 <printFloat+0x1b8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004aac:	2d01      	cmp	r5, #1
 8004aae:	f240 80d7 	bls.w	8004c60 <printFloat+0x1c8>
 8004ab2:	462c      	mov	r4, r5
    n *= 100;
 8004ab4:	4f70      	ldr	r7, [pc, #448]	; (8004c78 <printFloat+0x1e0>)
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f7fb feeb 	bl	8000894 <__aeabi_fmul>
    decimals -= 2;
 8004abe:	3c02      	subs	r4, #2
 8004ac0:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ac2:	2c01      	cmp	r4, #1
    n *= 100;
 8004ac4:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ac6:	d8f6      	bhi.n	8004ab6 <printFloat+0x1e>
 8004ac8:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004acc:	b123      	cbz	r3, 8004ad8 <printFloat+0x40>
 8004ace:	4630      	mov	r0, r6
 8004ad0:	496a      	ldr	r1, [pc, #424]	; (8004c7c <printFloat+0x1e4>)
 8004ad2:	f7fb fedf 	bl	8000894 <__aeabi_fmul>
 8004ad6:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004ad8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7fb fdd1 	bl	8000684 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004ae2:	f7fc f8b3 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f000 80bc 	beq.w	8004c64 <printFloat+0x1cc>
  uint8_t i = 0;
 8004aec:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004aee:	4f64      	ldr	r7, [pc, #400]	; (8004c80 <printFloat+0x1e8>)
 8004af0:	4602      	mov	r2, r0
 8004af2:	fba7 1300 	umull	r1, r3, r7, r0
 8004af6:	08db      	lsrs	r3, r3, #3
 8004af8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004afc:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004b00:	a904      	add	r1, sp, #16
 8004b02:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8004b06:	4421      	add	r1, r4
  while(a > 0) {
 8004b08:	2a09      	cmp	r2, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b0a:	f104 0401 	add.w	r4, r4, #1
    a /= 10;
 8004b0e:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b10:	f801 6c10 	strb.w	r6, [r1, #-16]
 8004b14:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004b16:	d8eb      	bhi.n	8004af0 <printFloat+0x58>
  }
  while (i < decimal_places) {
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d972      	bls.n	8004c02 <printFloat+0x16a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b1c:	2230      	movs	r2, #48	; 0x30
 8004b1e:	1c63      	adds	r3, r4, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	a904      	add	r1, sp, #16
 8004b24:	4421      	add	r1, r4
  while (i < decimal_places) {
 8004b26:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b28:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004b2c:	d961      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b2e:	1ca0      	adds	r0, r4, #2
 8004b30:	b2c0      	uxtb	r0, r0
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4419      	add	r1, r3
  while (i < decimal_places) {
 8004b36:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b38:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004b3c:	d959      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b3e:	1ce1      	adds	r1, r4, #3
 8004b40:	ae04      	add	r6, sp, #16
 8004b42:	b2c9      	uxtb	r1, r1
 8004b44:	4430      	add	r0, r6
  while (i < decimal_places) {
 8004b46:	42a9      	cmp	r1, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b48:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 8004b4c:	d251      	bcs.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b4e:	1d20      	adds	r0, r4, #4
 8004b50:	b2c0      	uxtb	r0, r0
 8004b52:	4431      	add	r1, r6
  while (i < decimal_places) {
 8004b54:	42a8      	cmp	r0, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b56:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004b5a:	d24a      	bcs.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b5c:	1d61      	adds	r1, r4, #5
 8004b5e:	b2c9      	uxtb	r1, r1
 8004b60:	4430      	add	r0, r6
  while (i < decimal_places) {
 8004b62:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b64:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 8004b68:	d943      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b6a:	1da0      	adds	r0, r4, #6
 8004b6c:	b2c0      	uxtb	r0, r0
 8004b6e:	4431      	add	r1, r6
  while (i < decimal_places) {
 8004b70:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b72:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004b76:	d93c      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b78:	1de1      	adds	r1, r4, #7
 8004b7a:	b2c9      	uxtb	r1, r1
 8004b7c:	4430      	add	r0, r6
  while (i < decimal_places) {
 8004b7e:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b80:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 8004b84:	d935      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b86:	f104 0008 	add.w	r0, r4, #8
 8004b8a:	b2c0      	uxtb	r0, r0
 8004b8c:	4431      	add	r1, r6
  while (i < decimal_places) {
 8004b8e:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b90:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004b94:	d92d      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b96:	f104 0109 	add.w	r1, r4, #9
 8004b9a:	b2c9      	uxtb	r1, r1
 8004b9c:	4430      	add	r0, r6
  while (i < decimal_places) {
 8004b9e:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ba0:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 8004ba4:	d925      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ba6:	f104 000a 	add.w	r0, r4, #10
 8004baa:	b2c0      	uxtb	r0, r0
 8004bac:	4431      	add	r1, r6
  while (i < decimal_places) {
 8004bae:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bb0:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004bb4:	d91d      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bb6:	4616      	mov	r6, r2
 8004bb8:	f104 020b 	add.w	r2, r4, #11
 8004bbc:	a904      	add	r1, sp, #16
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	4408      	add	r0, r1
  while (i < decimal_places) {
 8004bc2:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bc4:	f800 6c10 	strb.w	r6, [r0, #-16]
  while (i < decimal_places) {
 8004bc8:	d913      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bca:	f104 010c 	add.w	r1, r4, #12
 8004bce:	a804      	add	r0, sp, #16
 8004bd0:	b2c9      	uxtb	r1, r1
 8004bd2:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004bd4:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bd6:	f802 6c10 	strb.w	r6, [r2, #-16]
  while (i < decimal_places) {
 8004bda:	d90a      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bdc:	f104 020d 	add.w	r2, r4, #13
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	4401      	add	r1, r0
  while (i < decimal_places) {
 8004be4:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004be6:	f801 6c10 	strb.w	r6, [r1, #-16]
  while (i < decimal_places) {
 8004bea:	d902      	bls.n	8004bf2 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bec:	4402      	add	r2, r0
 8004bee:	f802 6c10 	strb.w	r6, [r2, #-16]
  while (i < decimal_places) {
 8004bf2:	1e6a      	subs	r2, r5, #1
 8004bf4:	1b14      	subs	r4, r2, r4
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	bf38      	it	cc
 8004bfa:	2400      	movcc	r4, #0
 8004bfc:	441c      	add	r4, r3
 8004bfe:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004c02:	42a5      	cmp	r5, r4
 8004c04:	d01c      	beq.n	8004c40 <printFloat+0x1a8>
    buf[i++] = '0';
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004c06:	b16c      	cbz	r4, 8004c24 <printFloat+0x18c>
 8004c08:	1e6f      	subs	r7, r5, #1
 8004c0a:	eb0d 0604 	add.w	r6, sp, r4
 8004c0e:	b2ff      	uxtb	r7, r7
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c10:	42a5      	cmp	r5, r4
 8004c12:	d009      	beq.n	8004c28 <printFloat+0x190>
    serial_write(buf[i-1]);
 8004c14:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004c18:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004c1a:	f001 fde5 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004c1e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004c22:	d1f5      	bne.n	8004c10 <printFloat+0x178>
  }
}
 8004c24:	b005      	add	sp, #20
 8004c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c28:	202e      	movs	r0, #46	; 0x2e
 8004c2a:	f001 fddd 	bl	80067e8 <serial_write>
    serial_write(buf[i-1]);
 8004c2e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8004c32:	f001 fdd9 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004c36:	463c      	mov	r4, r7
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	d1e9      	bne.n	8004c10 <printFloat+0x178>
}
 8004c3c:	b005      	add	sp, #20
 8004c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buf[i++] = '0';
 8004c40:	2230      	movs	r2, #48	; 0x30
 8004c42:	ab04      	add	r3, sp, #16
 8004c44:	1c6c      	adds	r4, r5, #1
 8004c46:	442b      	add	r3, r5
 8004c48:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004c4c:	b2e4      	uxtb	r4, r4
 8004c4e:	e7da      	b.n	8004c06 <printFloat+0x16e>
    serial_write('-');
 8004c50:	202d      	movs	r0, #45	; 0x2d
 8004c52:	f001 fdc9 	bl	80067e8 <serial_write>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c56:	2d01      	cmp	r5, #1
    n = -n;
 8004c58:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c5c:	f63f af29 	bhi.w	8004ab2 <printFloat+0x1a>
 8004c60:	462b      	mov	r3, r5
 8004c62:	e733      	b.n	8004acc <printFloat+0x34>
  uint8_t i = 0;
 8004c64:	4604      	mov	r4, r0
  while (i < decimal_places) {
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	f47f af58 	bne.w	8004b1c <printFloat+0x84>
    buf[i++] = '0';
 8004c6c:	2330      	movs	r3, #48	; 0x30
 8004c6e:	2401      	movs	r4, #1
 8004c70:	f88d 3000 	strb.w	r3, [sp]
  for (; i > 0; i--) {
 8004c74:	e7c8      	b.n	8004c08 <printFloat+0x170>
 8004c76:	bf00      	nop
 8004c78:	42c80000 	.word	0x42c80000
 8004c7c:	41200000 	.word	0x41200000
 8004c80:	cccccccd 	.word	0xcccccccd

08004c84 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <printFloat_CoordValue+0x200>)
void printFloat_CoordValue(float n) {
 8004c88:	b085      	sub	sp, #20
 8004c8a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c8e:	f014 0401 	ands.w	r4, r4, #1
 8004c92:	d073      	beq.n	8004d7c <printFloat_CoordValue+0xf8>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004c94:	497c      	ldr	r1, [pc, #496]	; (8004e88 <printFloat_CoordValue+0x204>)
 8004c96:	f7fb fdfd 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 8004c9a:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004c9c:	4605      	mov	r5, r0
  if (n < 0) {
 8004c9e:	f7fb ff97 	bl	8000bd0 <__aeabi_fcmplt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 80cd 	bne.w	8004e42 <printFloat_CoordValue+0x1be>
    n *= 100;
 8004ca8:	4978      	ldr	r1, [pc, #480]	; (8004e8c <printFloat_CoordValue+0x208>)
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7fb fdf2 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004cb0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cb4:	f7fb fce6 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004cb8:	f7fb ffc8 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f000 80c6 	beq.w	8004e4e <printFloat_CoordValue+0x1ca>
  uint8_t i = 0;
 8004cc2:	2500      	movs	r5, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004cc4:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8004e94 <printFloat_CoordValue+0x210>
 8004cc8:	462a      	mov	r2, r5
 8004cca:	4601      	mov	r1, r0
 8004ccc:	fbac 4300 	umull	r4, r3, ip, r0
 8004cd0:	08db      	lsrs	r3, r3, #3
 8004cd2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004cd6:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8004cda:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004cde:	a804      	add	r0, sp, #16
 8004ce0:	1886      	adds	r6, r0, r2
 8004ce2:	3501      	adds	r5, #1
  while(a > 0) {
 8004ce4:	2909      	cmp	r1, #9
    a /= 10;
 8004ce6:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ce8:	b2ed      	uxtb	r5, r5
 8004cea:	f806 7c10 	strb.w	r7, [r6, #-16]
  while(a > 0) {
 8004cee:	d8eb      	bhi.n	8004cc8 <printFloat_CoordValue+0x44>
  while (i < decimal_places) {
 8004cf0:	2d03      	cmp	r5, #3
 8004cf2:	d823      	bhi.n	8004d3c <printFloat_CoordValue+0xb8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cf4:	2130      	movs	r1, #48	; 0x30
 8004cf6:	1c94      	adds	r4, r2, #2
 8004cf8:	b2e4      	uxtb	r4, r4
 8004cfa:	ab04      	add	r3, sp, #16
 8004cfc:	442b      	add	r3, r5
  while (i < decimal_places) {
 8004cfe:	2c04      	cmp	r4, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d00:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004d04:	f000 80b6 	beq.w	8004e74 <printFloat_CoordValue+0x1f0>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d08:	3203      	adds	r2, #3
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	ab04      	add	r3, sp, #16
 8004d0e:	4423      	add	r3, r4
  while (i < decimal_places) {
 8004d10:	2a04      	cmp	r2, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d12:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004d16:	f000 80b3 	beq.w	8004e80 <printFloat_CoordValue+0x1fc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d1a:	2330      	movs	r3, #48	; 0x30
 8004d1c:	a904      	add	r1, sp, #16
 8004d1e:	4411      	add	r1, r2
  while (i < decimal_places) {
 8004d20:	2a02      	cmp	r2, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d22:	f801 3c10 	strb.w	r3, [r1, #-16]
  while (i < decimal_places) {
 8004d26:	d101      	bne.n	8004d2c <printFloat_CoordValue+0xa8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d28:	f88d 3003 	strb.w	r3, [sp, #3]
  while (i < decimal_places) {
 8004d2c:	2c04      	cmp	r4, #4
 8004d2e:	f1c5 0503 	rsb	r5, r5, #3
 8004d32:	bf88      	it	hi
 8004d34:	2500      	movhi	r5, #0
 8004d36:	442c      	add	r4, r5
 8004d38:	f004 05ff 	and.w	r5, r4, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004d3c:	2d04      	cmp	r5, #4
 8004d3e:	d103      	bne.n	8004d48 <printFloat_CoordValue+0xc4>
    buf[i++] = '0';
 8004d40:	2330      	movs	r3, #48	; 0x30
 8004d42:	2505      	movs	r5, #5
 8004d44:	f88d 3004 	strb.w	r3, [sp, #4]
 8004d48:	1e6e      	subs	r6, r5, #1
 8004d4a:	b2f6      	uxtb	r6, r6
 8004d4c:	e008      	b.n	8004d60 <printFloat_CoordValue+0xdc>
    serial_write(buf[i-1]);
 8004d4e:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 8004d52:	f001 fd49 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004d56:	b17e      	cbz	r6, 8004d78 <printFloat_CoordValue+0xf4>
 8004d58:	3d01      	subs	r5, #1
 8004d5a:	3e01      	subs	r6, #1
 8004d5c:	b2ed      	uxtb	r5, r5
 8004d5e:	b2f6      	uxtb	r6, r6
    serial_write(buf[i-1]);
 8004d60:	ab04      	add	r3, sp, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d62:	2d04      	cmp	r5, #4
    serial_write(buf[i-1]);
 8004d64:	442b      	add	r3, r5
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d66:	d1f2      	bne.n	8004d4e <printFloat_CoordValue+0xca>
 8004d68:	202e      	movs	r0, #46	; 0x2e
 8004d6a:	f001 fd3d 	bl	80067e8 <serial_write>
    serial_write(buf[i-1]);
 8004d6e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004d72:	f001 fd39 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004d76:	e7ef      	b.n	8004d58 <printFloat_CoordValue+0xd4>
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004d78:	b005      	add	sp, #20
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (n < 0) {
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4605      	mov	r5, r0
 8004d80:	f7fb ff26 	bl	8000bd0 <__aeabi_fcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d169      	bne.n	8004e5c <printFloat_CoordValue+0x1d8>
  if (decimals) { n *= 10; }
 8004d88:	4941      	ldr	r1, [pc, #260]	; (8004e90 <printFloat_CoordValue+0x20c>)
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f7fb fd82 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004d90:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d94:	f7fb fc76 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004d98:	f7fb ff58 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d064      	beq.n	8004e6a <printFloat_CoordValue+0x1e6>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004da0:	4f3c      	ldr	r7, [pc, #240]	; (8004e94 <printFloat_CoordValue+0x210>)
 8004da2:	4622      	mov	r2, r4
 8004da4:	4601      	mov	r1, r0
 8004da6:	fba7 4300 	umull	r4, r3, r7, r0
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004db0:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8004db4:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8004db8:	a804      	add	r0, sp, #16
 8004dba:	1885      	adds	r5, r0, r2
 8004dbc:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 8004dbe:	2909      	cmp	r1, #9
    a /= 10;
 8004dc0:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004dc2:	b2e4      	uxtb	r4, r4
 8004dc4:	f805 6c10 	strb.w	r6, [r5, #-16]
  while(a > 0) {
 8004dc8:	d8eb      	bhi.n	8004da2 <printFloat_CoordValue+0x11e>
  while (i < decimal_places) {
 8004dca:	2c02      	cmp	r4, #2
 8004dcc:	d81a      	bhi.n	8004e04 <printFloat_CoordValue+0x180>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dce:	2030      	movs	r0, #48	; 0x30
 8004dd0:	1c93      	adds	r3, r2, #2
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	a904      	add	r1, sp, #16
 8004dd6:	4421      	add	r1, r4
  while (i < decimal_places) {
 8004dd8:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dda:	f801 0c10 	strb.w	r0, [r1, #-16]
  while (i < decimal_places) {
 8004dde:	d04b      	beq.n	8004e78 <printFloat_CoordValue+0x1f4>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004de0:	a904      	add	r1, sp, #16
 8004de2:	440b      	add	r3, r1
  while (i < decimal_places) {
 8004de4:	2aff      	cmp	r2, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004de6:	f803 0c10 	strb.w	r0, [r3, #-16]
  while (i < decimal_places) {
 8004dea:	d147      	bne.n	8004e7c <printFloat_CoordValue+0x1f8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dec:	2230      	movs	r2, #48	; 0x30
 8004dee:	2301      	movs	r3, #1
 8004df0:	f88d 2002 	strb.w	r2, [sp, #2]
  while (i < decimal_places) {
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	f1c4 0402 	rsb	r4, r4, #2
 8004dfa:	bf88      	it	hi
 8004dfc:	2400      	movhi	r4, #0
 8004dfe:	441c      	add	r4, r3
 8004e00:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004e04:	2c03      	cmp	r4, #3
 8004e06:	d103      	bne.n	8004e10 <printFloat_CoordValue+0x18c>
    buf[i++] = '0';
 8004e08:	2330      	movs	r3, #48	; 0x30
 8004e0a:	2404      	movs	r4, #4
 8004e0c:	f88d 3003 	strb.w	r3, [sp, #3]
 8004e10:	1e65      	subs	r5, r4, #1
 8004e12:	b2ed      	uxtb	r5, r5
 8004e14:	e009      	b.n	8004e2a <printFloat_CoordValue+0x1a6>
    serial_write(buf[i-1]);
 8004e16:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 8004e1a:	f001 fce5 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d0aa      	beq.n	8004d78 <printFloat_CoordValue+0xf4>
 8004e22:	3c01      	subs	r4, #1
 8004e24:	3d01      	subs	r5, #1
 8004e26:	b2e4      	uxtb	r4, r4
 8004e28:	b2ed      	uxtb	r5, r5
    serial_write(buf[i-1]);
 8004e2a:	ab04      	add	r3, sp, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e2c:	2c03      	cmp	r4, #3
    serial_write(buf[i-1]);
 8004e2e:	4423      	add	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e30:	d1f1      	bne.n	8004e16 <printFloat_CoordValue+0x192>
 8004e32:	202e      	movs	r0, #46	; 0x2e
 8004e34:	f001 fcd8 	bl	80067e8 <serial_write>
    serial_write(buf[i-1]);
 8004e38:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8004e3c:	f001 fcd4 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004e40:	e7ef      	b.n	8004e22 <printFloat_CoordValue+0x19e>
    serial_write('-');
 8004e42:	202d      	movs	r0, #45	; 0x2d
 8004e44:	f001 fcd0 	bl	80067e8 <serial_write>
    n = -n;
 8004e48:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004e4c:	e72c      	b.n	8004ca8 <printFloat_CoordValue+0x24>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e4e:	f243 0330 	movw	r3, #12336	; 0x3030
  uint8_t i = 0;
 8004e52:	4605      	mov	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e54:	2202      	movs	r2, #2
 8004e56:	f8ad 3000 	strh.w	r3, [sp]
  while (i < decimal_places) {
 8004e5a:	e75e      	b.n	8004d1a <printFloat_CoordValue+0x96>
    serial_write('-');
 8004e5c:	202d      	movs	r0, #45	; 0x2d
 8004e5e:	f001 fcc3 	bl	80067e8 <serial_write>
    n = -n;
 8004e62:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004e66:	4605      	mov	r5, r0
 8004e68:	e78e      	b.n	8004d88 <printFloat_CoordValue+0x104>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e6a:	f243 0330 	movw	r3, #12336	; 0x3030
 8004e6e:	f8ad 3000 	strh.w	r3, [sp]
  while (i < decimal_places) {
 8004e72:	e7bb      	b.n	8004dec <printFloat_CoordValue+0x168>
 8004e74:	2503      	movs	r5, #3
 8004e76:	e759      	b.n	8004d2c <printFloat_CoordValue+0xa8>
 8004e78:	2402      	movs	r4, #2
 8004e7a:	e7bb      	b.n	8004df4 <printFloat_CoordValue+0x170>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e7b9      	b.n	8004df4 <printFloat_CoordValue+0x170>
 8004e80:	2403      	movs	r4, #3
 8004e82:	e753      	b.n	8004d2c <printFloat_CoordValue+0xa8>
 8004e84:	20001834 	.word	0x20001834
 8004e88:	3d21428b 	.word	0x3d21428b
 8004e8c:	461c4000 	.word	0x461c4000
 8004e90:	447a0000 	.word	0x447a0000
 8004e94:	cccccccd 	.word	0xcccccccd

08004e98 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004e9a:	4b4a      	ldr	r3, [pc, #296]	; (8004fc4 <printFloat_RateValue+0x12c>)
void printFloat_RateValue(float n) {
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004ea2:	f014 0401 	ands.w	r4, r4, #1
 8004ea6:	d046      	beq.n	8004f36 <printFloat_RateValue+0x9e>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004ea8:	4947      	ldr	r1, [pc, #284]	; (8004fc8 <printFloat_RateValue+0x130>)
 8004eaa:	f7fb fcf3 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 8004eae:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004eb0:	4604      	mov	r4, r0
  if (n < 0) {
 8004eb2:	f7fb fe8d 	bl	8000bd0 <__aeabi_fcmplt>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d16d      	bne.n	8004f96 <printFloat_RateValue+0xfe>
  if (decimals) { n *= 10; }
 8004eba:	4944      	ldr	r1, [pc, #272]	; (8004fcc <printFloat_RateValue+0x134>)
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fb fce9 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004ec2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ec6:	f7fb fbdd 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004eca:	f7fb febf 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004ece:	b1b8      	cbz	r0, 8004f00 <printFloat_RateValue+0x68>
  uint8_t i = 0;
 8004ed0:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ed2:	4e3f      	ldr	r6, [pc, #252]	; (8004fd0 <printFloat_RateValue+0x138>)
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	fba6 1300 	umull	r1, r3, r6, r0
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004ee0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8004eea:	4421      	add	r1, r4
  while(a > 0) {
 8004eec:	2a09      	cmp	r2, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004eee:	f104 0401 	add.w	r4, r4, #1
    a /= 10;
 8004ef2:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ef4:	f801 5c10 	strb.w	r5, [r1, #-16]
 8004ef8:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004efa:	d8eb      	bhi.n	8004ed4 <printFloat_RateValue+0x3c>
  while (i < decimal_places) {
 8004efc:	2c00      	cmp	r4, #0
 8004efe:	d15d      	bne.n	8004fbc <printFloat_RateValue+0x124>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f00:	2330      	movs	r3, #48	; 0x30
 8004f02:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8004f06:	2330      	movs	r3, #48	; 0x30
 8004f08:	2402      	movs	r4, #2
 8004f0a:	f88d 3001 	strb.w	r3, [sp, #1]
    serial_write(buf[i-1]);
 8004f0e:	ab04      	add	r3, sp, #16
 8004f10:	4423      	add	r3, r4
  for (; i > 0; i--) {
 8004f12:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004f14:	f813 0c11 	ldrb.w	r0, [r3, #-17]
  for (; i > 0; i--) {
 8004f18:	b2e4      	uxtb	r4, r4
    serial_write(buf[i-1]);
 8004f1a:	f001 fc65 	bl	80067e8 <serial_write>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004f1e:	2c01      	cmp	r4, #1
 8004f20:	d1f5      	bne.n	8004f0e <printFloat_RateValue+0x76>
 8004f22:	202e      	movs	r0, #46	; 0x2e
 8004f24:	f001 fc60 	bl	80067e8 <serial_write>
    serial_write(buf[i-1]);
 8004f28:	f89d 0000 	ldrb.w	r0, [sp]
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004f2c:	b005      	add	sp, #20
 8004f2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    serial_write(buf[i-1]);
 8004f32:	f001 bc59 	b.w	80067e8 <serial_write>
  if (n < 0) {
 8004f36:	2100      	movs	r1, #0
 8004f38:	4605      	mov	r5, r0
 8004f3a:	f7fb fe49 	bl	8000bd0 <__aeabi_fcmplt>
 8004f3e:	bbb0      	cbnz	r0, 8004fae <printFloat_RateValue+0x116>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004f40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f44:	4628      	mov	r0, r5
 8004f46:	f7fb fb9d 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004f4a:	f7fb fe7f 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004f4e:	b340      	cbz	r0, 8004fa2 <printFloat_RateValue+0x10a>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f50:	4f1f      	ldr	r7, [pc, #124]	; (8004fd0 <printFloat_RateValue+0x138>)
 8004f52:	4622      	mov	r2, r4
 8004f54:	4601      	mov	r1, r0
 8004f56:	fba7 4300 	umull	r4, r3, r7, r0
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004f60:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8004f64:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8004f68:	a804      	add	r0, sp, #16
 8004f6a:	1885      	adds	r5, r0, r2
 8004f6c:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 8004f6e:	2909      	cmp	r1, #9
    a /= 10;
 8004f70:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f72:	b2e4      	uxtb	r4, r4
 8004f74:	f805 6c10 	strb.w	r6, [r5, #-16]
  while(a > 0) {
 8004f78:	d8eb      	bhi.n	8004f52 <printFloat_RateValue+0xba>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f7a:	b194      	cbz	r4, 8004fa2 <printFloat_RateValue+0x10a>
 8004f7c:	f10d 33ff 	add.w	r3, sp, #4294967295
 8004f80:	191d      	adds	r5, r3, r4
 8004f82:	1aad      	subs	r5, r5, r2
 8004f84:	446c      	add	r4, sp
    serial_write(buf[i-1]);
 8004f86:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8004f8a:	f001 fc2d 	bl	80067e8 <serial_write>
  for (; i > 0; i--) {
 8004f8e:	42a5      	cmp	r5, r4
 8004f90:	d1f9      	bne.n	8004f86 <printFloat_RateValue+0xee>
}
 8004f92:	b005      	add	sp, #20
 8004f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004f96:	202d      	movs	r0, #45	; 0x2d
 8004f98:	f001 fc26 	bl	80067e8 <serial_write>
    n = -n;
 8004f9c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004fa0:	e78b      	b.n	8004eba <printFloat_RateValue+0x22>
    serial_write(buf[i-1]);
 8004fa2:	2030      	movs	r0, #48	; 0x30
}
 8004fa4:	b005      	add	sp, #20
 8004fa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    serial_write(buf[i-1]);
 8004faa:	f001 bc1d 	b.w	80067e8 <serial_write>
    serial_write('-');
 8004fae:	202d      	movs	r0, #45	; 0x2d
 8004fb0:	f001 fc1a 	bl	80067e8 <serial_write>
    n = -n;
 8004fb4:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004fb8:	4605      	mov	r5, r0
 8004fba:	e7c1      	b.n	8004f40 <printFloat_RateValue+0xa8>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004fbc:	2c01      	cmp	r4, #1
 8004fbe:	d1a6      	bne.n	8004f0e <printFloat_RateValue+0x76>
 8004fc0:	e7a1      	b.n	8004f06 <printFloat_RateValue+0x6e>
 8004fc2:	bf00      	nop
 8004fc4:	20001834 	.word	0x20001834
 8004fc8:	3d21428b 	.word	0x3d21428b
 8004fcc:	41200000 	.word	0x41200000
 8004fd0:	cccccccd 	.word	0xcccccccd

08004fd4 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004fd4:	b500      	push	{lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004fd6:	2101      	movs	r1, #1
{
 8004fd8:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004fda:	2008      	movs	r0, #8
 8004fdc:	f7fc fa12 	bl	8001404 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <probe_init+0x34>)
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004fe2:	a901      	add	r1, sp, #4
 8004fe4:	4809      	ldr	r0, [pc, #36]	; (800500c <probe_init+0x38>)
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004fe6:	9301      	str	r3, [sp, #4]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004fe8:	f7fb ffde 	bl	8000fa8 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004fec:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <probe_init+0x3c>)
  probe_invert_mask = 0; // Initialize as zero.
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <probe_init+0x40>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ff2:	f992 2048 	ldrsb.w	r2, [r2, #72]	; 0x48
  probe_invert_mask = 0; // Initialize as zero.
 8004ff6:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004ff8:	428a      	cmp	r2, r1
 8004ffa:	bfa4      	itt	ge
 8004ffc:	f44f 7200 	movge.w	r2, #512	; 0x200
 8005000:	801a      	strhge	r2, [r3, #0]
}
 8005002:	b003      	add	sp, #12
 8005004:	f85d fb04 	ldr.w	pc, [sp], #4
 8005008:	48030200 	.word	0x48030200
 800500c:	40010c00 	.word	0x40010c00
 8005010:	20001834 	.word	0x20001834
 8005014:	200016b2 	.word	0x200016b2

08005018 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8005018:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800501a:	4907      	ldr	r1, [pc, #28]	; (8005038 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800501e:	f991 1048 	ldrsb.w	r1, [r1, #72]	; 0x48
  probe_invert_mask = 0; // Initialize as zero.
 8005022:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005024:	4299      	cmp	r1, r3
 8005026:	bfaa      	itet	ge
 8005028:	f44f 7100 	movge.w	r1, #512	; 0x200
 800502c:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8005030:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8005032:	b100      	cbz	r0, 8005036 <probe_configure_invert_mask+0x1e>
 8005034:	8013      	strh	r3, [r2, #0]
}
 8005036:	4770      	bx	lr
 8005038:	20001834 	.word	0x20001834
 800503c:	200016b2 	.word	0x200016b2

08005040 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005040:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005042:	4805      	ldr	r0, [pc, #20]	; (8005058 <probe_get_state+0x18>)
 8005044:	f7fc f936 	bl	80012b4 <GPIO_ReadInputData>
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <probe_get_state+0x1c>)
 800504a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800504e:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8005050:	1a18      	subs	r0, r3, r0
 8005052:	bf18      	it	ne
 8005054:	2001      	movne	r0, #1
 8005056:	bd08      	pop	{r3, pc}
 8005058:	40010c00 	.word	0x40010c00
 800505c:	200016b2 	.word	0x200016b2

08005060 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005060:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005062:	480b      	ldr	r0, [pc, #44]	; (8005090 <probe_state_monitor+0x30>)
 8005064:	f7fc f926 	bl	80012b4 <GPIO_ReadInputData>
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 800506a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	4283      	cmp	r3, r0
 8005072:	d00c      	beq.n	800508e <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8005074:	2100      	movs	r1, #0
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005078:	4d08      	ldr	r5, [pc, #32]	; (800509c <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <probe_state_monitor+0x40>)
 800507c:	4c09      	ldr	r4, [pc, #36]	; (80050a4 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 800507e:	7019      	strb	r1, [r3, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005080:	782b      	ldrb	r3, [r5, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005082:	ca07      	ldmia	r2, {r0, r1, r2}
 8005084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508c:	702b      	strb	r3, [r5, #0]
  }
}
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	40010c00 	.word	0x40010c00
 8005094:	200016b2 	.word	0x200016b2
 8005098:	2000138e 	.word	0x2000138e
 800509c:	2000138d 	.word	0x2000138d
 80050a0:	2000139c 	.word	0x2000139c
 80050a4:	20001390 	.word	0x20001390

080050a8 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 80050a8:	b508      	push	{r3, lr}

  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80050aa:	f7ff f961 	bl	8004370 <plan_get_current_block>
 80050ae:	b120      	cbz	r0, 80050ba <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 80050b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80050b4:	2002      	movs	r0, #2
 80050b6:	f003 bbdf 	b.w	8008878 <system_set_exec_state_flag>
}
 80050ba:	bd08      	pop	{r3, pc}

080050bc <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80050be:	4baf      	ldr	r3, [pc, #700]	; (800537c <protocol_exec_rt_system+0x2c0>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 8083 	bne.w	80051ce <protocol_exec_rt_system+0x112>
 80050c8:	4cad      	ldr	r4, [pc, #692]	; (8005380 <protocol_exec_rt_system+0x2c4>)
 80050ca:	4dae      	ldr	r5, [pc, #696]	; (8005384 <protocol_exec_rt_system+0x2c8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80050cc:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 80050ce:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80050d2:	b393      	cbz	r3, 800513a <protocol_exec_rt_system+0x7e>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 80050d4:	06ea      	lsls	r2, r5, #27
 80050d6:	f100 80e2 	bmi.w	800529e <protocol_exec_rt_system+0x1e2>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 80050da:	07eb      	lsls	r3, r5, #31
 80050dc:	f100 80fc 	bmi.w	80052d8 <protocol_exec_rt_system+0x21c>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80050e0:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 80050e4:	d00a      	beq.n	80050fc <protocol_exec_rt_system+0x40>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80050e6:	7823      	ldrb	r3, [r4, #0]
 80050e8:	079f      	lsls	r7, r3, #30
 80050ea:	f000 8106 	beq.w	80052fa <protocol_exec_rt_system+0x23e>
 80050ee:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 80050f0:	2e00      	cmp	r6, #0
 80050f2:	f2c0 813d 	blt.w	8005370 <protocol_exec_rt_system+0x2b4>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80050f6:	20e8      	movs	r0, #232	; 0xe8
 80050f8:	f003 fbc8 	bl	800888c <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 80050fc:	07ae      	lsls	r6, r5, #30
 80050fe:	d519      	bpl.n	8005134 <protocol_exec_rt_system+0x78>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005100:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005104:	d113      	bne.n	800512e <protocol_exec_rt_system+0x72>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005106:	7823      	ldrb	r3, [r4, #0]
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	f000 816f 	beq.w	80053ec <protocol_exec_rt_system+0x330>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 8155 	bne.w	80053be <protocol_exec_rt_system+0x302>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005114:	2300      	movs	r3, #0
 8005116:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005118:	f7ff f92a 	bl	8004370 <plan_get_current_block>
 800511c:	b120      	cbz	r0, 8005128 <protocol_exec_rt_system+0x6c>
 800511e:	78a3      	ldrb	r3, [r4, #2]
 8005120:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005124:	f000 8197 	beq.w	8005456 <protocol_exec_rt_system+0x39a>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005128:	2300      	movs	r3, #0
 800512a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800512c:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800512e:	2002      	movs	r0, #2
 8005130:	f003 fbac 	bl	800888c <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8005134:	076b      	lsls	r3, r5, #29
 8005136:	f100 80b5 	bmi.w	80052a4 <protocol_exec_rt_system+0x1e8>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800513a:	4b93      	ldr	r3, [pc, #588]	; (8005388 <protocol_exec_rt_system+0x2cc>)
 800513c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800513e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005142:	2b00      	cmp	r3, #0
 8005144:	d170      	bne.n	8005228 <protocol_exec_rt_system+0x16c>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8005146:	4b91      	ldr	r3, [pc, #580]	; (800538c <protocol_exec_rt_system+0x2d0>)
 8005148:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800514a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800514e:	b923      	cbnz	r3, 800515a <protocol_exec_rt_system+0x9e>
 8005150:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005152:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005156:	d136      	bne.n	80051c6 <protocol_exec_rt_system+0x10a>
    st_prep_buffer();
  }

}
 8005158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800515a:	f003 fbcd 	bl	80088f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800515e:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8005160:	f015 0f01 	tst.w	r5, #1
 8005164:	bf0c      	ite	eq
 8005166:	4613      	moveq	r3, r2
 8005168:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800516a:	07a8      	lsls	r0, r5, #30
 800516c:	bf44      	itt	mi
 800516e:	330a      	addmi	r3, #10
 8005170:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005172:	0769      	lsls	r1, r5, #29
 8005174:	bf44      	itt	mi
 8005176:	3b0a      	submi	r3, #10
 8005178:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800517a:	072f      	lsls	r7, r5, #28
 800517c:	bf44      	itt	mi
 800517e:	3301      	addmi	r3, #1
 8005180:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005182:	06ee      	lsls	r6, r5, #27
 8005184:	bf44      	itt	mi
 8005186:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800518a:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 800518c:	2bc8      	cmp	r3, #200	; 0xc8
 800518e:	bf28      	it	cs
 8005190:	23c8      	movcs	r3, #200	; 0xc8
 8005192:	2b0a      	cmp	r3, #10
 8005194:	bf38      	it	cc
 8005196:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005198:	429a      	cmp	r2, r3
 800519a:	d006      	beq.n	80051aa <protocol_exec_rt_system+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800519c:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800519e:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80051a0:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80051a2:	f042 0308 	orr.w	r3, r2, #8
 80051a6:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80051a8:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80051aa:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 80051ac:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80051ae:	d51d      	bpl.n	80051ec <protocol_exec_rt_system+0x130>
      if (sys.state == STATE_HOLD) {
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d11b      	bne.n	80051ec <protocol_exec_rt_system+0x130>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80051b4:	7ae3      	ldrb	r3, [r4, #11]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8121 	bne.w	80053fe <protocol_exec_rt_system+0x342>
 80051bc:	2302      	movs	r3, #2
 80051be:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80051c0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80051c4:	d118      	bne.n	80051f8 <protocol_exec_rt_system+0x13c>
}
 80051c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80051ca:	f002 bbc7 	b.w	800795c <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 80051ce:	2601      	movs	r6, #1
 80051d0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051d4:	4c6a      	ldr	r4, [pc, #424]	; (8005380 <protocol_exec_rt_system+0x2c4>)
    report_alarm_message(rt_exec);
 80051d6:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80051d8:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 80051da:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 80051dc:	f000 fc6a 	bl	8005ab4 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80051e0:	42b5      	cmp	r5, r6
 80051e2:	d97f      	bls.n	80052e4 <protocol_exec_rt_system+0x228>
 80051e4:	4d67      	ldr	r5, [pc, #412]	; (8005384 <protocol_exec_rt_system+0x2c8>)
    system_clear_exec_alarm(); // Clear alarm
 80051e6:	f003 fb63 	bl	80088b0 <system_clear_exec_alarm>
 80051ea:	e76f      	b.n	80050cc <protocol_exec_rt_system+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80051ec:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80051f0:	d0af      	beq.n	8005152 <protocol_exec_rt_system+0x96>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 80f5 	bne.w	80053e2 <protocol_exec_rt_system+0x326>
        uint8_t coolant_state = gc_state.modal.coolant;
 80051f8:	4f65      	ldr	r7, [pc, #404]	; (8005390 <protocol_exec_rt_system+0x2d4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80051fa:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 80051fc:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80051fe:	d505      	bpl.n	800520c <protocol_exec_rt_system+0x150>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005200:	0633      	lsls	r3, r6, #24
 8005202:	bf4c      	ite	mi
 8005204:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005208:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800520c:	0668      	lsls	r0, r5, #25
 800520e:	d505      	bpl.n	800521c <protocol_exec_rt_system+0x160>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005210:	0671      	lsls	r1, r6, #25
 8005212:	bf4c      	ite	mi
 8005214:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005218:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800521c:	4630      	mov	r0, r6
 800521e:	f7fc faa9 	bl	8001774 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 8005222:	7823      	ldrb	r3, [r4, #0]
 8005224:	723e      	strb	r6, [r7, #8]
 8005226:	e794      	b.n	8005152 <protocol_exec_rt_system+0x96>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005228:	f003 fb5e 	bl	80088e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 800522c:	7a21      	ldrb	r1, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 800522e:	f015 0f01 	tst.w	r5, #1
 8005232:	bf0c      	ite	eq
 8005234:	460b      	moveq	r3, r1
 8005236:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005238:	07ae      	lsls	r6, r5, #30
 800523a:	bf44      	itt	mi
 800523c:	330a      	addmi	r3, #10
 800523e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005240:	0768      	lsls	r0, r5, #29
 8005242:	bf44      	itt	mi
 8005244:	3b0a      	submi	r3, #10
 8005246:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005248:	072f      	lsls	r7, r5, #28
 800524a:	bf44      	itt	mi
 800524c:	3301      	addmi	r3, #1
 800524e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005250:	06ee      	lsls	r6, r5, #27
 8005252:	bf44      	itt	mi
 8005254:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005258:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800525a:	2bc8      	cmp	r3, #200	; 0xc8
 800525c:	bf28      	it	cs
 800525e:	23c8      	movcs	r3, #200	; 0xc8
 8005260:	2b0a      	cmp	r3, #10
 8005262:	bf38      	it	cc
 8005264:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005266:	7a60      	ldrb	r0, [r4, #9]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8005268:	f015 0f20 	tst.w	r5, #32
 800526c:	bf14      	ite	ne
 800526e:	2264      	movne	r2, #100	; 0x64
 8005270:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005272:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005276:	bf18      	it	ne
 8005278:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800527a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800527e:	bf18      	it	ne
 8005280:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005282:	4299      	cmp	r1, r3
 8005284:	d102      	bne.n	800528c <protocol_exec_rt_system+0x1d0>
 8005286:	4282      	cmp	r2, r0
 8005288:	f43f af5d 	beq.w	8005146 <protocol_exec_rt_system+0x8a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800528c:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 800528e:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005290:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005292:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005294:	f7ff f8dc 	bl	8004450 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005298:	f7ff fba4 	bl	80049e4 <plan_cycle_reinitialize>
 800529c:	e753      	b.n	8005146 <protocol_exec_rt_system+0x8a>
      sys.abort = true;  // Only place this is set true.
 800529e:	2301      	movs	r3, #1
 80052a0:	7063      	strb	r3, [r4, #1]
}
 80052a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80052a4:	7823      	ldrb	r3, [r4, #0]
 80052a6:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80052aa:	d002      	beq.n	80052b2 <protocol_exec_rt_system+0x1f6>
 80052ac:	78e3      	ldrb	r3, [r4, #3]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d070      	beq.n	8005394 <protocol_exec_rt_system+0x2d8>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80052b2:	f994 2002 	ldrsb.w	r2, [r4, #2]
 80052b6:	78a3      	ldrb	r3, [r4, #2]
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	db6f      	blt.n	800539c <protocol_exec_rt_system+0x2e0>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80052bc:	f013 0220 	ands.w	r2, r3, #32
 80052c0:	d053      	beq.n	800536a <protocol_exec_rt_system+0x2ae>
          sys.state = STATE_SAFETY_DOOR;
 80052c2:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80052c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80052ce:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80052d0:	2004      	movs	r0, #4
 80052d2:	f003 fadb 	bl	800888c <system_clear_exec_state_flag>
 80052d6:	e730      	b.n	800513a <protocol_exec_rt_system+0x7e>
      report_realtime_status();
 80052d8:	f001 f894 	bl	8006404 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80052dc:	2001      	movs	r0, #1
 80052de:	f003 fad5 	bl	800888c <system_clear_exec_state_flag>
 80052e2:	e6fd      	b.n	80050e0 <protocol_exec_rt_system+0x24>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 fbfb 	bl	8005ae0 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80052ea:	2010      	movs	r0, #16
 80052ec:	f003 face 	bl	800888c <system_clear_exec_state_flag>
 80052f0:	4d24      	ldr	r5, [pc, #144]	; (8005384 <protocol_exec_rt_system+0x2c8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80052f2:	782b      	ldrb	r3, [r5, #0]
 80052f4:	06d9      	lsls	r1, r3, #27
 80052f6:	d5fc      	bpl.n	80052f2 <protocol_exec_rt_system+0x236>
 80052f8:	e775      	b.n	80051e6 <protocol_exec_rt_system+0x12a>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80052fa:	f013 0f28 	tst.w	r3, #40	; 0x28
 80052fe:	d00e      	beq.n	800531e <protocol_exec_rt_system+0x262>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005300:	78a2      	ldrb	r2, [r4, #2]
 8005302:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005306:	f000 8094 	beq.w	8005432 <protocol_exec_rt_system+0x376>
 800530a:	b26a      	sxtb	r2, r5
 800530c:	4616      	mov	r6, r2
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800530e:	0668      	lsls	r0, r5, #25
 8005310:	d50f      	bpl.n	8005332 <protocol_exec_rt_system+0x276>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005312:	0699      	lsls	r1, r3, #26
 8005314:	d40d      	bmi.n	8005332 <protocol_exec_rt_system+0x276>
 8005316:	78a1      	ldrb	r1, [r4, #2]
 8005318:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800531c:	e007      	b.n	800532e <protocol_exec_rt_system+0x272>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f3      	bne.n	800530a <protocol_exec_rt_system+0x24e>
 8005322:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005324:	066e      	lsls	r6, r5, #25
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005326:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005328:	d570      	bpl.n	800540c <protocol_exec_rt_system+0x350>
 800532a:	2141      	movs	r1, #65	; 0x41
 800532c:	b26a      	sxtb	r2, r5
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800532e:	4616      	mov	r6, r2
 8005330:	70a1      	strb	r1, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8005332:	072a      	lsls	r2, r5, #28
 8005334:	d502      	bpl.n	800533c <protocol_exec_rt_system+0x280>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005336:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800533a:	d06a      	beq.n	8005412 <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800533c:	06ab      	lsls	r3, r5, #26
 800533e:	f57f aed7 	bpl.w	80050f0 <protocol_exec_rt_system+0x34>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005342:	2006      	movs	r0, #6
 8005344:	f000 fbcc 	bl	8005ae0 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005348:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800534c:	78a3      	ldrb	r3, [r4, #2]
 800534e:	2a00      	cmp	r2, #0
 8005350:	db07      	blt.n	8005362 <protocol_exec_rt_system+0x2a6>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005352:	7822      	ldrb	r2, [r4, #0]
 8005354:	2a40      	cmp	r2, #64	; 0x40
 8005356:	f000 808d 	beq.w	8005474 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800535a:	2a80      	cmp	r2, #128	; 0x80
 800535c:	d001      	beq.n	8005362 <protocol_exec_rt_system+0x2a6>
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005362:	f043 0320 	orr.w	r3, r3, #32
 8005366:	70a3      	strb	r3, [r4, #2]
 8005368:	e6c2      	b.n	80050f0 <protocol_exec_rt_system+0x34>
          sys.suspend = SUSPEND_DISABLE;
 800536a:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 800536c:	7022      	strb	r2, [r4, #0]
 800536e:	e7af      	b.n	80052d0 <protocol_exec_rt_system+0x214>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005370:	7823      	ldrb	r3, [r4, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d01e      	beq.n	80053b4 <protocol_exec_rt_system+0x2f8>
        sys.state = STATE_SLEEP; 
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	7023      	strb	r3, [r4, #0]
 800537a:	e6bc      	b.n	80050f6 <protocol_exec_rt_system+0x3a>
 800537c:	200016b0 	.word	0x200016b0
 8005380:	20001378 	.word	0x20001378
 8005384:	2000138d 	.word	0x2000138d
 8005388:	20001374 	.word	0x20001374
 800538c:	2000138c 	.word	0x2000138c
 8005390:	20001288 	.word	0x20001288
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005394:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005398:	2b00      	cmp	r3, #0
 800539a:	da3d      	bge.n	8005418 <protocol_exec_rt_system+0x35c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 800539c:	2300      	movs	r3, #0
 800539e:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80053a0:	f7fe ff9e 	bl	80042e0 <plan_reset>
          st_reset();
 80053a4:	f002 f9b4 	bl	8007710 <st_reset>
          gc_sync_position();
 80053a8:	f7fc fae8 	bl	800197c <gc_sync_position>
          plan_sync_position();
 80053ac:	f7ff fafa 	bl	80049a4 <plan_sync_position>
 80053b0:	78a3      	ldrb	r3, [r4, #2]
 80053b2:	e783      	b.n	80052bc <protocol_exec_rt_system+0x200>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80053b4:	78a3      	ldrb	r3, [r4, #2]
 80053b6:	f043 0305 	orr.w	r3, r3, #5
 80053ba:	70a3      	strb	r3, [r4, #2]
 80053bc:	e7db      	b.n	8005376 <protocol_exec_rt_system+0x2ba>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80053be:	06da      	lsls	r2, r3, #27
 80053c0:	f57f aeb5 	bpl.w	800512e <protocol_exec_rt_system+0x72>
 80053c4:	78a2      	ldrb	r2, [r4, #2]
 80053c6:	07d2      	lsls	r2, r2, #31
 80053c8:	f57f aeb1 	bpl.w	800512e <protocol_exec_rt_system+0x72>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	f47f aea1 	bne.w	8005114 <protocol_exec_rt_system+0x58>
 80053d2:	7ae3      	ldrb	r3, [r4, #11]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f43f ae9d 	beq.w	8005114 <protocol_exec_rt_system+0x58>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80053da:	f043 0308 	orr.w	r3, r3, #8
 80053de:	72e3      	strb	r3, [r4, #11]
 80053e0:	e6a5      	b.n	800512e <protocol_exec_rt_system+0x72>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80053e2:	f013 0f18 	tst.w	r3, #24
 80053e6:	f43f aeb4 	beq.w	8005152 <protocol_exec_rt_system+0x96>
 80053ea:	e705      	b.n	80051f8 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80053ec:	78a3      	ldrb	r3, [r4, #2]
 80053ee:	f013 0220 	ands.w	r2, r3, #32
 80053f2:	f47f ae9c 	bne.w	800512e <protocol_exec_rt_system+0x72>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80053f6:	06d8      	lsls	r0, r3, #27
 80053f8:	d535      	bpl.n	8005466 <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80053fa:	7022      	strb	r2, [r4, #0]
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80053fc:	e68a      	b.n	8005114 <protocol_exec_rt_system+0x58>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80053fe:	07d9      	lsls	r1, r3, #31
 8005400:	f57f aede 	bpl.w	80051c0 <protocol_exec_rt_system+0x104>
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	72e3      	strb	r3, [r4, #11]
 800540a:	e6d9      	b.n	80051c0 <protocol_exec_rt_system+0x104>
        if (rt_exec & EXEC_FEED_HOLD) {
 800540c:	072b      	lsls	r3, r5, #28
 800540e:	b26e      	sxtb	r6, r5
 8005410:	d594      	bpl.n	800533c <protocol_exec_rt_system+0x280>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005412:	2310      	movs	r3, #16
 8005414:	7023      	strb	r3, [r4, #0]
 8005416:	e791      	b.n	800533c <protocol_exec_rt_system+0x280>
        plan_cycle_reinitialize();
 8005418:	f7ff fae4 	bl	80049e4 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800541c:	7923      	ldrb	r3, [r4, #4]
 800541e:	079f      	lsls	r7, r3, #30
 8005420:	d503      	bpl.n	800542a <protocol_exec_rt_system+0x36e>
 8005422:	78a2      	ldrb	r2, [r4, #2]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800542a:	f023 0306 	bic.w	r3, r3, #6
 800542e:	7123      	strb	r3, [r4, #4]
 8005430:	e74e      	b.n	80052d0 <protocol_exec_rt_system+0x214>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005432:	f002 fa7d 	bl	8007930 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005436:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005438:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800543a:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800543c:	2b20      	cmp	r3, #32
 800543e:	f47f af6e 	bne.w	800531e <protocol_exec_rt_system+0x262>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005442:	b26a      	sxtb	r2, r5
 8005444:	2a00      	cmp	r2, #0
 8005446:	4616      	mov	r6, r2
 8005448:	f6ff af61 	blt.w	800530e <protocol_exec_rt_system+0x252>
 800544c:	78a1      	ldrb	r1, [r4, #2]
 800544e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8005452:	70a1      	strb	r1, [r4, #2]
 8005454:	e75b      	b.n	800530e <protocol_exec_rt_system+0x252>
              sys.state = STATE_CYCLE;
 8005456:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005458:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800545a:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800545c:	f002 fa7e 	bl	800795c <st_prep_buffer>
              st_wake_up();
 8005460:	f001 ff7c 	bl	800735c <st_wake_up>
 8005464:	e663      	b.n	800512e <protocol_exec_rt_system+0x72>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005466:	0759      	lsls	r1, r3, #29
 8005468:	f57f ae61 	bpl.w	800512e <protocol_exec_rt_system+0x72>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800546c:	f043 0308 	orr.w	r3, r3, #8
 8005470:	70a3      	strb	r3, [r4, #2]
 8005472:	e65c      	b.n	800512e <protocol_exec_rt_system+0x72>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005474:	071f      	lsls	r7, r3, #28
 8005476:	f57f af72 	bpl.w	800535e <protocol_exec_rt_system+0x2a2>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 800547a:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	e76c      	b.n	800535e <protocol_exec_rt_system+0x2a2>

08005484 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 800548a:	f7fe ff71 	bl	8004370 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 800548e:	2800      	cmp	r0, #0
 8005490:	f000 80e3 	beq.w	800565a <protocol_exec_rt_suspend+0x1d6>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 8005494:	7c86      	ldrb	r6, [r0, #18]
      restore_spindle_speed = block->spindle_speed;
 8005496:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 800549a:	4f8d      	ldr	r7, [pc, #564]	; (80056d0 <protocol_exec_rt_suspend+0x24c>)
 800549c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80054a0:	079a      	lsls	r2, r3, #30
 80054a2:	f100 80c8 	bmi.w	8005636 <protocol_exec_rt_suspend+0x1b2>
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
    else { restore_condition = block->condition; }
  #endif

  while (sys.suspend) {
 80054a6:	f8df b230 	ldr.w	fp, [pc, #560]	; 80056d8 <protocol_exec_rt_suspend+0x254>
 80054aa:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80054ae:	2c00      	cmp	r4, #0
 80054b0:	d049      	beq.n	8005546 <protocol_exec_rt_suspend+0xc2>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80054b2:	2500      	movs	r5, #0
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 80054b4:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80054b8:	f04f 4a81 	mov.w	sl, #1082130432	; 0x40800000
    if (sys.abort) { return; }
 80054bc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d140      	bne.n	8005546 <protocol_exec_rt_suspend+0xc2>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 80054c4:	07e3      	lsls	r3, r4, #31
 80054c6:	d538      	bpl.n	800553a <protocol_exec_rt_suspend+0xb6>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80054c8:	f89b 1000 	ldrb.w	r1, [fp]
 80054cc:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 80054d0:	d03c      	beq.n	800554c <protocol_exec_rt_suspend+0xc8>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80054d2:	f014 0404 	ands.w	r4, r4, #4
 80054d6:	d062      	beq.n	800559e <protocol_exec_rt_suspend+0x11a>
          if (sys.state == STATE_SLEEP) {
 80054d8:	2980      	cmp	r1, #128	; 0x80
 80054da:	f000 80d5 	beq.w	8005688 <protocol_exec_rt_suspend+0x204>
          if (sys.state == STATE_SAFETY_DOOR) {
 80054de:	2940      	cmp	r1, #64	; 0x40
 80054e0:	f000 809d 	beq.w	800561e <protocol_exec_rt_suspend+0x19a>
 80054e4:	f89b 3002 	ldrb.w	r3, [fp, #2]
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80054e8:	0718      	lsls	r0, r3, #28
 80054ea:	d526      	bpl.n	800553a <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80054ec:	4c79      	ldr	r4, [pc, #484]	; (80056d4 <protocol_exec_rt_suspend+0x250>)
 80054ee:	7a62      	ldrb	r2, [r4, #9]
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	f000 8085 	beq.w	8005600 <protocol_exec_rt_suspend+0x17c>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80054f6:	0799      	lsls	r1, r3, #30
 80054f8:	d41f      	bmi.n	800553a <protocol_exec_rt_suspend+0xb6>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80054fa:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80054fe:	0792      	lsls	r2, r2, #30
 8005500:	d573      	bpl.n	80055ea <protocol_exec_rt_suspend+0x166>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005502:	f89b 2004 	ldrb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005506:	7a21      	ldrb	r1, [r4, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005508:	f042 0208 	orr.w	r2, r2, #8
 800550c:	f88b 2004 	strb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005510:	b161      	cbz	r1, 800552c <protocol_exec_rt_suspend+0xa8>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005512:	f006 0040 	and.w	r0, r6, #64	; 0x40
 8005516:	f7fc f92d 	bl	8001774 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 800551a:	2101      	movs	r1, #1
 800551c:	4648      	mov	r0, r9
 800551e:	f7fe fcf7 	bl	8003f10 <delay_sec>
 8005522:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8005526:	f003 0202 	and.w	r2, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800552a:	b932      	cbnz	r2, 800553a <protocol_exec_rt_suspend+0xb6>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800552c:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005530:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005532:	f88b 3002 	strb.w	r3, [fp, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005536:	f003 f99f 	bl	8008878 <system_set_exec_state_flag>
        }

      }
    }

    protocol_exec_rt_system();
 800553a:	f7ff fdbf 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 800553e:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005542:	2c00      	cmp	r4, #0
 8005544:	d1ba      	bne.n	80054bc <protocol_exec_rt_suspend+0x38>

  }
}
 8005546:	b003      	add	sp, #12
 8005548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 800554c:	f89b 300b 	ldrb.w	r3, [fp, #11]
 8005550:	b17b      	cbz	r3, 8005572 <protocol_exec_rt_suspend+0xee>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8005552:	079c      	lsls	r4, r3, #30
 8005554:	d53c      	bpl.n	80055d0 <protocol_exec_rt_suspend+0x14c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005556:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <protocol_exec_rt_suspend+0x250>)
 8005558:	7a5b      	ldrb	r3, [r3, #9]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d16f      	bne.n	800563e <protocol_exec_rt_suspend+0x1ba>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 800555e:	2300      	movs	r3, #0
 8005560:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 8005564:	f7ff fdaa 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 8005568:	f89b 4002 	ldrb.w	r4, [fp, #2]
 800556c:	2c00      	cmp	r4, #0
 800556e:	d1a5      	bne.n	80054bc <protocol_exec_rt_suspend+0x38>
 8005570:	e7e9      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005572:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005576:	071b      	lsls	r3, r3, #28
 8005578:	d5df      	bpl.n	800553a <protocol_exec_rt_suspend+0xb6>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800557a:	4641      	mov	r1, r8
 800557c:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005580:	f001 fda8 	bl	80070d4 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005584:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005588:	f023 0308 	bic.w	r3, r3, #8
 800558c:	f88b 3004 	strb.w	r3, [fp, #4]
    protocol_exec_rt_system();
 8005590:	f7ff fd94 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 8005594:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005598:	2c00      	cmp	r4, #0
 800559a:	d18f      	bne.n	80054bc <protocol_exec_rt_suspend+0x38>
 800559c:	e7d3      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800559e:	4629      	mov	r1, r5
 80055a0:	4620      	mov	r0, r4
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 80055a2:	f88b 400b 	strb.w	r4, [fp, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80055a6:	f001 fd95 	bl	80070d4 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7fc f8e2 	bl	8001774 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80055b0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80055b4:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80055b8:	f043 0304 	orr.w	r3, r3, #4
 80055bc:	f88b 3002 	strb.w	r3, [fp, #2]
    protocol_exec_rt_system();
 80055c0:	f7ff fd7c 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 80055c4:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	f47f af77 	bne.w	80054bc <protocol_exec_rt_suspend+0x38>
 80055ce:	e7ba      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80055d0:	f013 0f0c 	tst.w	r3, #12
 80055d4:	d0b1      	beq.n	800553a <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80055d6:	4a3f      	ldr	r2, [pc, #252]	; (80056d4 <protocol_exec_rt_suspend+0x250>)
 80055d8:	7a52      	ldrb	r2, [r2, #9]
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d144      	bne.n	8005668 <protocol_exec_rt_suspend+0x1e4>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80055de:	071a      	lsls	r2, r3, #28
 80055e0:	d5bd      	bpl.n	800555e <protocol_exec_rt_suspend+0xda>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80055e2:	2002      	movs	r0, #2
 80055e4:	f003 f948 	bl	8008878 <system_set_exec_state_flag>
 80055e8:	e7b9      	b.n	800555e <protocol_exec_rt_suspend+0xda>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80055ea:	4641      	mov	r1, r8
 80055ec:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80055f0:	f001 fd70 	bl	80070d4 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80055f4:	2101      	movs	r1, #1
 80055f6:	4650      	mov	r0, sl
 80055f8:	f7fe fc8a 	bl	8003f10 <delay_sec>
 80055fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005600:	7a21      	ldrb	r1, [r4, #8]
 8005602:	f003 0202 	and.w	r2, r3, #2
 8005606:	2900      	cmp	r1, #0
 8005608:	d08f      	beq.n	800552a <protocol_exec_rt_suspend+0xa6>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800560a:	2a00      	cmp	r2, #0
 800560c:	d081      	beq.n	8005512 <protocol_exec_rt_suspend+0x8e>
    protocol_exec_rt_system();
 800560e:	f7ff fd55 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 8005612:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005616:	2c00      	cmp	r4, #0
 8005618:	f47f af50 	bne.w	80054bc <protocol_exec_rt_suspend+0x38>
 800561c:	e793      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
            if (!(system_check_safety_door_ajar())) {
 800561e:	f002 ff09 	bl	8008434 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005622:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (!(system_check_safety_door_ajar())) {
 8005626:	2800      	cmp	r0, #0
 8005628:	f47f af5e 	bne.w	80054e8 <protocol_exec_rt_suspend+0x64>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800562c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005630:	f88b 3002 	strb.w	r3, [fp, #2]
 8005634:	e758      	b.n	80054e8 <protocol_exec_rt_suspend+0x64>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005636:	2020      	movs	r0, #32
 8005638:	f003 f94c 	bl	80088d4 <system_set_exec_accessory_override_flag>
 800563c:	e733      	b.n	80054a6 <protocol_exec_rt_suspend+0x22>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800563e:	4629      	mov	r1, r5
 8005640:	f001 fd48 	bl	80070d4 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005644:	2301      	movs	r3, #1
 8005646:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 800564a:	f7ff fd37 	bl	80050bc <protocol_exec_rt_system>
  while (sys.suspend) {
 800564e:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005652:	2c00      	cmp	r4, #0
 8005654:	f47f af32 	bne.w	80054bc <protocol_exec_rt_suspend+0x38>
 8005658:	e775      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800565a:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <protocol_exec_rt_suspend+0x250>)
 800565c:	7a5e      	ldrb	r6, [r3, #9]
 800565e:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005660:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005664:	4316      	orrs	r6, r2
      restore_spindle_speed = gc_state.spindle_speed;
 8005666:	e718      	b.n	800549a <protocol_exec_rt_suspend+0x16>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005668:	200a      	movs	r0, #10
 800566a:	f000 fa39 	bl	8005ae0 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800566e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005672:	0799      	lsls	r1, r3, #30
 8005674:	d523      	bpl.n	80056be <protocol_exec_rt_suspend+0x23a>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005676:	f89b 2004 	ldrb.w	r2, [fp, #4]
 800567a:	f89b 300b 	ldrb.w	r3, [fp, #11]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	f88b 2004 	strb.w	r2, [fp, #4]
 8005686:	e7aa      	b.n	80055de <protocol_exec_rt_suspend+0x15a>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005688:	200b      	movs	r0, #11
 800568a:	9201      	str	r2, [sp, #4]
 800568c:	f000 fa28 	bl	8005ae0 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005690:	9a01      	ldr	r2, [sp, #4]
 8005692:	2100      	movs	r1, #0
 8005694:	4610      	mov	r0, r2
 8005696:	f001 fd1d 	bl	80070d4 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	4610      	mov	r0, r2
 800569e:	f7fc f869 	bl	8001774 <coolant_set_state>
            st_go_idle(); // Disable steppers
 80056a2:	f001 fe9b 	bl	80073dc <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80056a6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f47f af4b 	bne.w	8005546 <protocol_exec_rt_suspend+0xc2>
 80056b0:	f7ff fd04 	bl	80050bc <protocol_exec_rt_system>
 80056b4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f9      	beq.n	80056b0 <protocol_exec_rt_suspend+0x22c>
 80056bc:	e743      	b.n	8005546 <protocol_exec_rt_suspend+0xc2>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80056be:	4641      	mov	r1, r8
 80056c0:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80056c4:	f001 fd06 	bl	80070d4 <spindle_set_state>
 80056c8:	f89b 300b 	ldrb.w	r3, [fp, #11]
 80056cc:	e787      	b.n	80055de <protocol_exec_rt_suspend+0x15a>
 80056ce:	bf00      	nop
 80056d0:	20001834 	.word	0x20001834
 80056d4:	20001288 	.word	0x20001288
 80056d8:	20001378 	.word	0x20001378

080056dc <protocol_execute_realtime>:
{
 80056dc:	b508      	push	{r3, lr}
  protocol_exec_rt_system();
 80056de:	f7ff fced 	bl	80050bc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <protocol_execute_realtime+0x18>)
 80056e4:	789b      	ldrb	r3, [r3, #2]
 80056e6:	b903      	cbnz	r3, 80056ea <protocol_execute_realtime+0xe>
}
 80056e8:	bd08      	pop	{r3, pc}
 80056ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80056ee:	f7ff bec9 	b.w	8005484 <protocol_exec_rt_suspend>
 80056f2:	bf00      	nop
 80056f4:	20001378 	.word	0x20001378

080056f8 <protocol_main_loop>:
{
 80056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80056fc:	4b57      	ldr	r3, [pc, #348]	; (800585c <protocol_main_loop+0x164>)
 80056fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005702:	071a      	lsls	r2, r3, #28
 8005704:	f100 8090 	bmi.w	8005828 <protocol_main_loop+0x130>
 8005708:	4e55      	ldr	r6, [pc, #340]	; (8005860 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 800570a:	7833      	ldrb	r3, [r6, #0]
 800570c:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 8005710:	d075      	beq.n	80057fe <protocol_main_loop+0x106>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8005712:	2002      	movs	r0, #2
 8005714:	f000 f9e4 	bl	8005ae0 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005718:	2301      	movs	r3, #1
 800571a:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 800571c:	2400      	movs	r4, #0
 800571e:	4625      	mov	r5, r4
        line[char_counter] = 0; // Set string termination character.
 8005720:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005864 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005724:	f001 f86c 	bl	8006800 <serial_read>
 8005728:	28ff      	cmp	r0, #255	; 0xff
 800572a:	d00f      	beq.n	800574c <protocol_main_loop+0x54>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 800572c:	280a      	cmp	r0, #10
 800572e:	d01d      	beq.n	800576c <protocol_main_loop+0x74>
 8005730:	280d      	cmp	r0, #13
 8005732:	d01b      	beq.n	800576c <protocol_main_loop+0x74>
        if (line_flags) {
 8005734:	2d00      	cmp	r5, #0
 8005736:	d035      	beq.n	80057a4 <protocol_main_loop+0xac>
          if (c == ')') {
 8005738:	2829      	cmp	r0, #41	; 0x29
 800573a:	d1f3      	bne.n	8005724 <protocol_main_loop+0x2c>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800573c:	07ab      	lsls	r3, r5, #30
 800573e:	d5f1      	bpl.n	8005724 <protocol_main_loop+0x2c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005740:	f001 f85e 	bl	8006800 <serial_read>
 8005744:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8005746:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800574a:	d1ef      	bne.n	800572c <protocol_main_loop+0x34>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800574c:	f7fe fe10 	bl	8004370 <plan_get_current_block>
 8005750:	b110      	cbz	r0, 8005758 <protocol_main_loop+0x60>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005752:	2002      	movs	r0, #2
 8005754:	f003 f890 	bl	8008878 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8005758:	f7ff fcb0 	bl	80050bc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800575c:	78b3      	ldrb	r3, [r6, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d13a      	bne.n	80057d8 <protocol_main_loop+0xe0>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8005762:	7873      	ldrb	r3, [r6, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0dd      	beq.n	8005724 <protocol_main_loop+0x2c>
}
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 800576c:	f7ff fca6 	bl	80050bc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005770:	78b3      	ldrb	r3, [r6, #2]
 8005772:	bb1b      	cbnz	r3, 80057bc <protocol_main_loop+0xc4>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8005774:	7877      	ldrb	r7, [r6, #1]
 8005776:	2f00      	cmp	r7, #0
 8005778:	d1f6      	bne.n	8005768 <protocol_main_loop+0x70>
        line[char_counter] = 0; // Set string termination character.
 800577a:	f808 7004 	strb.w	r7, [r8, r4]
				LedBlink();
 800577e:	f7fd fe9d 	bl	80034bc <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8005782:	f015 0501 	ands.w	r5, r5, #1
 8005786:	d11c      	bne.n	80057c2 <protocol_main_loop+0xca>
        } else if (line[0] == 0) {
 8005788:	f898 4000 	ldrb.w	r4, [r8]
 800578c:	b1fc      	cbz	r4, 80057ce <protocol_main_loop+0xd6>
        } else if (line[0] == '$') {
 800578e:	2c24      	cmp	r4, #36	; 0x24
 8005790:	d02c      	beq.n	80057ec <protocol_main_loop+0xf4>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8005792:	7834      	ldrb	r4, [r6, #0]
 8005794:	f014 0421 	ands.w	r4, r4, #33	; 0x21
 8005798:	d021      	beq.n	80057de <protocol_main_loop+0xe6>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 800579a:	2009      	movs	r0, #9
 800579c:	f000 f964 	bl	8005a68 <report_status_message>
        char_counter = 0;
 80057a0:	462c      	mov	r4, r5
 80057a2:	e7bf      	b.n	8005724 <protocol_main_loop+0x2c>
          if (c <= ' ') {
 80057a4:	2820      	cmp	r0, #32
 80057a6:	d9bd      	bls.n	8005724 <protocol_main_loop+0x2c>
          } else if (c == '/') {
 80057a8:	282f      	cmp	r0, #47	; 0x2f
 80057aa:	d0bb      	beq.n	8005724 <protocol_main_loop+0x2c>
          } else if (c == '(') {
 80057ac:	2828      	cmp	r0, #40	; 0x28
 80057ae:	d024      	beq.n	80057fa <protocol_main_loop+0x102>
          } else if (c == ';') {
 80057b0:	283b      	cmp	r0, #59	; 0x3b
 80057b2:	d037      	beq.n	8005824 <protocol_main_loop+0x12c>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 80057b4:	2c4e      	cmp	r4, #78	; 0x4e
 80057b6:	d92a      	bls.n	800580e <protocol_main_loop+0x116>
            line_flags |= LINE_FLAG_OVERFLOW;
 80057b8:	2501      	movs	r5, #1
 80057ba:	e7b3      	b.n	8005724 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80057bc:	f7ff fe62 	bl	8005484 <protocol_exec_rt_suspend>
 80057c0:	e7d8      	b.n	8005774 <protocol_main_loop+0x7c>
          report_status_message(STATUS_OVERFLOW);
 80057c2:	200b      	movs	r0, #11
        char_counter = 0;
 80057c4:	463c      	mov	r4, r7
        line_flags = 0;
 80057c6:	463d      	mov	r5, r7
          report_status_message(STATUS_OVERFLOW);
 80057c8:	f000 f94e 	bl	8005a68 <report_status_message>
 80057cc:	e7aa      	b.n	8005724 <protocol_main_loop+0x2c>
          report_status_message(STATUS_OK);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f94a 	bl	8005a68 <report_status_message>
        line_flags = 0;
 80057d4:	4625      	mov	r5, r4
 80057d6:	e7a5      	b.n	8005724 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80057d8:	f7ff fe54 	bl	8005484 <protocol_exec_rt_suspend>
 80057dc:	e7c1      	b.n	8005762 <protocol_main_loop+0x6a>
          report_status_message(gc_execute_line(line));
 80057de:	4640      	mov	r0, r8
 80057e0:	f7fc f8d4 	bl	800198c <gc_execute_line>
 80057e4:	f000 f940 	bl	8005a68 <report_status_message>
        line_flags = 0;
 80057e8:	4625      	mov	r5, r4
 80057ea:	e79b      	b.n	8005724 <protocol_main_loop+0x2c>
          report_status_message(system_execute_line(line));
 80057ec:	4640      	mov	r0, r8
 80057ee:	f002 fe45 	bl	800847c <system_execute_line>
 80057f2:	f000 f939 	bl	8005a68 <report_status_message>
        char_counter = 0;
 80057f6:	462c      	mov	r4, r5
 80057f8:	e794      	b.n	8005724 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80057fa:	2502      	movs	r5, #2
 80057fc:	e792      	b.n	8005724 <protocol_main_loop+0x2c>
    sys.state = STATE_IDLE;
 80057fe:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 8005800:	f002 fe18 	bl	8008434 <system_check_safety_door_ajar>
 8005804:	b9e0      	cbnz	r0, 8005840 <protocol_main_loop+0x148>
    system_execute_startup(line); // Execute startup script.
 8005806:	4817      	ldr	r0, [pc, #92]	; (8005864 <protocol_main_loop+0x16c>)
 8005808:	f002 fe16 	bl	8008438 <system_execute_startup>
 800580c:	e786      	b.n	800571c <protocol_main_loop+0x24>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800580e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 8005816:	bf98      	it	ls
 8005818:	3820      	subls	r0, #32
            line[char_counter++] = c;
 800581a:	1c63      	adds	r3, r4, #1
 800581c:	f808 0004 	strb.w	r0, [r8, r4]
 8005820:	b2dc      	uxtb	r4, r3
 8005822:	e77f      	b.n	8005724 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8005824:	2504      	movs	r5, #4
 8005826:	e77d      	b.n	8005724 <protocol_main_loop+0x2c>
      if (limits_get_state()) {
 8005828:	f7fd facc 	bl	8002dc4 <limits_get_state>
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f af6b 	beq.w	8005708 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005832:	2301      	movs	r3, #1
 8005834:	4e0a      	ldr	r6, [pc, #40]	; (8005860 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005836:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005838:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800583a:	f000 f951 	bl	8005ae0 <report_feedback_message>
 800583e:	e764      	b.n	800570a <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <protocol_main_loop+0x170>)
 8005842:	7813      	ldrb	r3, [r2, #0]
 8005844:	f043 0320 	orr.w	r3, r3, #32
 8005848:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 800584a:	f7ff fc37 	bl	80050bc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800584e:	78b3      	ldrb	r3, [r6, #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0d8      	beq.n	8005806 <protocol_main_loop+0x10e>
 8005854:	f7ff fe16 	bl	8005484 <protocol_exec_rt_suspend>
 8005858:	e7d5      	b.n	8005806 <protocol_main_loop+0x10e>
 800585a:	bf00      	nop
 800585c:	20001834 	.word	0x20001834
 8005860:	20001378 	.word	0x20001378
 8005864:	20000c9c 	.word	0x20000c9c
 8005868:	2000138d 	.word	0x2000138d

0800586c <protocol_buffer_synchronize>:
{
 800586c:	b510      	push	{r4, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800586e:	f7fe fd7f 	bl	8004370 <plan_get_current_block>
 8005872:	b110      	cbz	r0, 800587a <protocol_buffer_synchronize+0xe>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005874:	2002      	movs	r0, #2
 8005876:	f002 ffff 	bl	8008878 <system_set_exec_state_flag>
 800587a:	4c09      	ldr	r4, [pc, #36]	; (80058a0 <protocol_buffer_synchronize+0x34>)
  protocol_exec_rt_system();
 800587c:	f7ff fc1e 	bl	80050bc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005880:	78a3      	ldrb	r3, [r4, #2]
 8005882:	b94b      	cbnz	r3, 8005898 <protocol_buffer_synchronize+0x2c>
    if (sys.abort) { return; } // Check for system abort
 8005884:	7863      	ldrb	r3, [r4, #1]
 8005886:	b933      	cbnz	r3, 8005896 <protocol_buffer_synchronize+0x2a>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8005888:	f7fe fd72 	bl	8004370 <plan_get_current_block>
 800588c:	2800      	cmp	r0, #0
 800588e:	d1f5      	bne.n	800587c <protocol_buffer_synchronize+0x10>
 8005890:	7823      	ldrb	r3, [r4, #0]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d0f2      	beq.n	800587c <protocol_buffer_synchronize+0x10>
}
 8005896:	bd10      	pop	{r4, pc}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005898:	f7ff fdf4 	bl	8005484 <protocol_exec_rt_suspend>
 800589c:	e7f2      	b.n	8005884 <protocol_buffer_synchronize+0x18>
 800589e:	bf00      	nop
 80058a0:	20001378 	.word	0x20001378

080058a4 <satir_sayisi>:

int satir = 0 , hedef = 0 ,blm0 = 0  ;

void satir_sayisi(int hedef_sifirlama , int hedef_satir){
	int carpan , hesap1 ;
	if(hedef_sifirlama == 1){
 80058a4:	2801      	cmp	r0, #1
void satir_sayisi(int hedef_sifirlama , int hedef_satir){
 80058a6:	b510      	push	{r4, lr}
	if(hedef_sifirlama == 1){
 80058a8:	d076      	beq.n	8005998 <satir_sayisi+0xf4>
		satir = 0 ;
		blm0 = 0 ;
	}
	if(hedef_satir > 0){
 80058aa:	2900      	cmp	r1, #0
 80058ac:	dd12      	ble.n	80058d4 <satir_sayisi+0x30>
 80058ae:	4b6b      	ldr	r3, [pc, #428]	; (8005a5c <satir_sayisi+0x1b8>)
		hedef = hedef_satir;
		blm0 = hedef / 8 ;
 80058b0:	10c8      	asrs	r0, r1, #3
 80058b2:	681b      	ldr	r3, [r3, #0]
		hedef = hedef_satir;
 80058b4:	4c6a      	ldr	r4, [pc, #424]	; (8005a60 <satir_sayisi+0x1bc>)
		blm0 = hedef / 8 ;
 80058b6:	4a6b      	ldr	r2, [pc, #428]	; (8005a64 <satir_sayisi+0x1c0>)
		carpan = 255 / blm0 ;

	}

	if(satir <  blm0 && satir > 0 ){
 80058b8:	4283      	cmp	r3, r0
		hedef = hedef_satir;
 80058ba:	6021      	str	r1, [r4, #0]
		blm0 = hedef / 8 ;
 80058bc:	6010      	str	r0, [r2, #0]
	if(satir <  blm0 && satir > 0 ){
 80058be:	da0f      	bge.n	80058e0 <satir_sayisi+0x3c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dd75      	ble.n	80059b0 <satir_sayisi+0x10c>

	}



	}
 80058c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100, 0, 0);
 80058c8:	2300      	movs	r3, #0
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	461a      	mov	r2, r3
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd be06 	b.w	80034e0 <RGB_Write>
 80058d4:	4a63      	ldr	r2, [pc, #396]	; (8005a64 <satir_sayisi+0x1c0>)
 80058d6:	4b61      	ldr	r3, [pc, #388]	; (8005a5c <satir_sayisi+0x1b8>)
 80058d8:	6810      	ldr	r0, [r2, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
	if(satir <  blm0 && satir > 0 ){
 80058dc:	4283      	cmp	r3, r0
 80058de:	dbef      	blt.n	80058c0 <satir_sayisi+0x1c>
	}else if(satir >  blm0 && satir <  blm0 * 2  ){
 80058e0:	f340 80b8 	ble.w	8005a54 <satir_sayisi+0x1b0>
 80058e4:	0042      	lsls	r2, r0, #1
 80058e6:	429a      	cmp	r2, r3
 80058e8:	4611      	mov	r1, r2
 80058ea:	f300 808f 	bgt.w	8005a0c <satir_sayisi+0x168>
	}else if(satir >  blm0 * 2 && satir <  blm0 * 3){
 80058ee:	428b      	cmp	r3, r1
 80058f0:	dd62      	ble.n	80059b8 <satir_sayisi+0x114>
 80058f2:	1811      	adds	r1, r2, r0
 80058f4:	4299      	cmp	r1, r3
 80058f6:	f300 8091 	bgt.w	8005a1c <satir_sayisi+0x178>
	}else if(satir >  blm0 * 3 && satir <  blm0 * 4){
 80058fa:	4299      	cmp	r1, r3
 80058fc:	ea4f 0180 	mov.w	r1, r0, lsl #2
 8005900:	da02      	bge.n	8005908 <satir_sayisi+0x64>
 8005902:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 8005906:	db6d      	blt.n	80059e4 <satir_sayisi+0x140>
	}else if(satir >  blm0 * 4 && satir <  blm0 * 5){
 8005908:	4299      	cmp	r1, r3
 800590a:	4401      	add	r1, r0
 800590c:	da01      	bge.n	8005912 <satir_sayisi+0x6e>
 800590e:	4299      	cmp	r1, r3
 8005910:	dc70      	bgt.n	80059f4 <satir_sayisi+0x150>
	}else if(satir >  blm0 * 5 && satir <  blm0 * 6){
 8005912:	4299      	cmp	r1, r3
 8005914:	db52      	blt.n	80059bc <satir_sayisi+0x118>
 8005916:	4402      	add	r2, r0
 8005918:	0052      	lsls	r2, r2, #1
	}else if(satir >  blm0 * 6 && satir <  blm0 * 7){
 800591a:	429a      	cmp	r2, r3
 800591c:	da72      	bge.n	8005a04 <satir_sayisi+0x160>
 800591e:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005922:	429a      	cmp	r2, r3
 8005924:	ea4f 01c0 	mov.w	r1, r0, lsl #3
 8005928:	f300 808c 	bgt.w	8005a44 <satir_sayisi+0x1a0>
	}else if(satir >  blm0 * 7 && satir <  blm0 * 8 ){
 800592c:	429a      	cmp	r2, r3
 800592e:	da01      	bge.n	8005934 <satir_sayisi+0x90>
 8005930:	4299      	cmp	r1, r3
 8005932:	dc7f      	bgt.n	8005a34 <satir_sayisi+0x190>
		RGB_Write(0,  0, 10, 0);
 8005934:	2300      	movs	r3, #0
 8005936:	220a      	movs	r2, #10
 8005938:	4619      	mov	r1, r3
 800593a:	4618      	mov	r0, r3
 800593c:	f7fd fdd0 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 1);
 8005940:	2100      	movs	r1, #0
 8005942:	2301      	movs	r3, #1
 8005944:	4608      	mov	r0, r1
 8005946:	220a      	movs	r2, #10
 8005948:	f7fd fdca 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 2);
 800594c:	2100      	movs	r1, #0
 800594e:	2302      	movs	r3, #2
 8005950:	4608      	mov	r0, r1
 8005952:	220a      	movs	r2, #10
 8005954:	f7fd fdc4 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 3);
 8005958:	2100      	movs	r1, #0
 800595a:	2303      	movs	r3, #3
 800595c:	4608      	mov	r0, r1
 800595e:	220a      	movs	r2, #10
 8005960:	f7fd fdbe 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 4);
 8005964:	2100      	movs	r1, #0
 8005966:	2304      	movs	r3, #4
 8005968:	4608      	mov	r0, r1
 800596a:	220a      	movs	r2, #10
 800596c:	f7fd fdb8 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 5);
 8005970:	2100      	movs	r1, #0
 8005972:	2305      	movs	r3, #5
 8005974:	4608      	mov	r0, r1
 8005976:	220a      	movs	r2, #10
 8005978:	f7fd fdb2 	bl	80034e0 <RGB_Write>
		RGB_Write(0,  0, 10, 6);
 800597c:	2100      	movs	r1, #0
 800597e:	2306      	movs	r3, #6
 8005980:	4608      	mov	r0, r1
 8005982:	220a      	movs	r2, #10
 8005984:	f7fd fdac 	bl	80034e0 <RGB_Write>
	}
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0,  0, 10, 7);
 800598c:	2100      	movs	r1, #0
 800598e:	2307      	movs	r3, #7
 8005990:	4608      	mov	r0, r1
 8005992:	220a      	movs	r2, #10
 8005994:	f7fd bda4 	b.w	80034e0 <RGB_Write>
		satir = 0 ;
 8005998:	2300      	movs	r3, #0
 800599a:	4830      	ldr	r0, [pc, #192]	; (8005a5c <satir_sayisi+0x1b8>)
		blm0 = 0 ;
 800599c:	4a31      	ldr	r2, [pc, #196]	; (8005a64 <satir_sayisi+0x1c0>)
	if(hedef_satir > 0){
 800599e:	4299      	cmp	r1, r3
		satir = 0 ;
 80059a0:	6003      	str	r3, [r0, #0]
		blm0 = 0 ;
 80059a2:	6013      	str	r3, [r2, #0]
	if(hedef_satir > 0){
 80059a4:	dd42      	ble.n	8005a2c <satir_sayisi+0x188>
		hedef = hedef_satir;
 80059a6:	4c2e      	ldr	r4, [pc, #184]	; (8005a60 <satir_sayisi+0x1bc>)
		blm0 = hedef / 8 ;
 80059a8:	10c8      	asrs	r0, r1, #3
		hedef = hedef_satir;
 80059aa:	6021      	str	r1, [r4, #0]
		blm0 = hedef / 8 ;
 80059ac:	6010      	str	r0, [r2, #0]
	if(satir <  blm0 && satir > 0 ){
 80059ae:	b198      	cbz	r0, 80059d8 <satir_sayisi+0x134>
 80059b0:	0042      	lsls	r2, r0, #1
 80059b2:	4611      	mov	r1, r2
	}else if(satir >  blm0 * 2 && satir <  blm0 * 3){
 80059b4:	428b      	cmp	r3, r1
 80059b6:	dc9c      	bgt.n	80058f2 <satir_sayisi+0x4e>
 80059b8:	1811      	adds	r1, r2, r0
 80059ba:	e79e      	b.n	80058fa <satir_sayisi+0x56>
	}else if(satir >  blm0 * 5 && satir <  blm0 * 6){
 80059bc:	1811      	adds	r1, r2, r0
 80059be:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 80059c2:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80059c6:	daa8      	bge.n	800591a <satir_sayisi+0x76>
	}
 80059c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0,100, 0, 5);
 80059cc:	2200      	movs	r2, #0
 80059ce:	2305      	movs	r3, #5
 80059d0:	4610      	mov	r0, r2
 80059d2:	2164      	movs	r1, #100	; 0x64
 80059d4:	f7fd bd84 	b.w	80034e0 <RGB_Write>
		blm0 = hedef / 8 ;
 80059d8:	4604      	mov	r4, r0
 80059da:	0061      	lsls	r1, r4, #1
	if(satir <  blm0 && satir > 0 ){
 80059dc:	4603      	mov	r3, r0
 80059de:	460a      	mov	r2, r1
 80059e0:	4620      	mov	r0, r4
 80059e2:	e784      	b.n	80058ee <satir_sayisi+0x4a>
		RGB_Write(0, 100 , 0, 3);
 80059e4:	2200      	movs	r2, #0
	}
 80059e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100 , 0, 3);
 80059ea:	2303      	movs	r3, #3
 80059ec:	4610      	mov	r0, r2
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	f7fd bd76 	b.w	80034e0 <RGB_Write>
		RGB_Write(0, 100, 0, 4);
 80059f4:	2200      	movs	r2, #0
	}
 80059f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100, 0, 4);
 80059fa:	2304      	movs	r3, #4
 80059fc:	4610      	mov	r0, r2
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	f7fd bd6e 	b.w	80034e0 <RGB_Write>
 8005a04:	00c1      	lsls	r1, r0, #3
 8005a06:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005a0a:	e78f      	b.n	800592c <satir_sayisi+0x88>
		RGB_Write(0, 100 , 0, 1);
 8005a0c:	2200      	movs	r2, #0
	}
 8005a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100 , 0, 1);
 8005a12:	2301      	movs	r3, #1
 8005a14:	4610      	mov	r0, r2
 8005a16:	2164      	movs	r1, #100	; 0x64
 8005a18:	f7fd bd62 	b.w	80034e0 <RGB_Write>
		RGB_Write(0, 100, 0, 2);
 8005a1c:	2200      	movs	r2, #0
	}
 8005a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100, 0, 2);
 8005a22:	2302      	movs	r3, #2
 8005a24:	4610      	mov	r0, r2
 8005a26:	2164      	movs	r1, #100	; 0x64
 8005a28:	f7fd bd5a 	b.w	80034e0 <RGB_Write>
	if(satir <  blm0 && satir > 0 ){
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	1811      	adds	r1, r2, r0
 8005a32:	e762      	b.n	80058fa <satir_sayisi+0x56>
		RGB_Write(0,100, 0, 7);
 8005a34:	2200      	movs	r2, #0
	}
 8005a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0,100, 0, 7);
 8005a3a:	2307      	movs	r3, #7
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	f7fd bd4e 	b.w	80034e0 <RGB_Write>
		RGB_Write(0, 100 , 0, 6);
 8005a44:	2200      	movs	r2, #0
	}
 8005a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RGB_Write(0, 100 , 0, 6);
 8005a4a:	2306      	movs	r3, #6
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	2164      	movs	r1, #100	; 0x64
 8005a50:	f7fd bd46 	b.w	80034e0 <RGB_Write>
 8005a54:	4604      	mov	r4, r0
 8005a56:	4618      	mov	r0, r3
 8005a58:	e7bf      	b.n	80059da <satir_sayisi+0x136>
 8005a5a:	bf00      	nop
 8005a5c:	20000cf4 	.word	0x20000cf4
 8005a60:	20000cf0 	.word	0x20000cf0
 8005a64:	20000cec 	.word	0x20000cec

08005a68 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 8005a68:	b510      	push	{r4, lr}
  switch(status_code) {
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	b970      	cbnz	r0, 8005a8c <report_status_message+0x24>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); satir++; satir_sayisi(0,0); show_led(); break;
 8005a6e:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <report_status_message+0x3c>)
 8005a70:	f7fe ffc8 	bl	8004a04 <printString>
 8005a74:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <report_status_message+0x40>)
 8005a76:	4621      	mov	r1, r4
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	f7ff ff10 	bl	80058a4 <satir_sayisi>
    default:
      printPgmString(PSTR("error:"));
      print_uint8_base10(status_code);
      report_util_line_feed();
  }
}
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printPgmString(PSTR("ok\r\n")); satir++; satir_sayisi(0,0); show_led(); break;
 8005a88:	f7fd bea4 	b.w	80037d4 <show_led>
      printPgmString(PSTR("error:"));
 8005a8c:	4807      	ldr	r0, [pc, #28]	; (8005aac <report_status_message+0x44>)
 8005a8e:	f7fe ffb9 	bl	8004a04 <printString>
      print_uint8_base10(status_code);
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7fe ffc2 	bl	8004a1c <print_uint8_base10>
}
 8005a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a9c:	4804      	ldr	r0, [pc, #16]	; (8005ab0 <report_status_message+0x48>)
 8005a9e:	f7fe bfb1 	b.w	8004a04 <printString>
 8005aa2:	bf00      	nop
 8005aa4:	0800af00 	.word	0x0800af00
 8005aa8:	20000cf4 	.word	0x20000cf4
 8005aac:	0800af08 	.word	0x0800af08
 8005ab0:	0800af10 	.word	0x0800af10

08005ab4 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8005ab8:	4807      	ldr	r0, [pc, #28]	; (8005ad8 <report_alarm_message+0x24>)
 8005aba:	f7fe ffa3 	bl	8004a04 <printString>
  print_uint8_base10(alarm_code);
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f7fe ffac 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ac4:	4805      	ldr	r0, [pc, #20]	; (8005adc <report_alarm_message+0x28>)
 8005ac6:	f7fe ff9d 	bl	8004a04 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 8005aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8005ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ad2:	f7fe ba55 	b.w	8003f80 <delay_ms>
 8005ad6:	bf00      	nop
 8005ad8:	0800af14 	.word	0x0800af14
 8005adc:	0800af10 	.word	0x0800af10

08005ae0 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8005ae4:	4820      	ldr	r0, [pc, #128]	; (8005b68 <report_feedback_message+0x88>)
 8005ae6:	f7fe ff8d 	bl	8004a04 <printString>
  switch(message_code) {
 8005aea:	1e60      	subs	r0, r4, #1
 8005aec:	280a      	cmp	r0, #10
 8005aee:	d80a      	bhi.n	8005b06 <report_feedback_message+0x26>
 8005af0:	e8df f000 	tbb	[pc, r0]
 8005af4:	1d191511 	.word	0x1d191511
 8005af8:	2d292521 	.word	0x2d292521
 8005afc:	3531      	.short	0x3531
 8005afe:	06          	.byte	0x06
 8005aff:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8005b00:	481a      	ldr	r0, [pc, #104]	; (8005b6c <report_feedback_message+0x8c>)
 8005b02:	f7fe ff7f 	bl	8004a04 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005b06:	205d      	movs	r0, #93	; 0x5d
 8005b08:	f000 fe6e 	bl	80067e8 <serial_write>
  }
  report_util_feedback_line_feed();
}
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005b10:	4817      	ldr	r0, [pc, #92]	; (8005b70 <report_feedback_message+0x90>)
 8005b12:	f7fe bf77 	b.w	8004a04 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 8005b16:	4817      	ldr	r0, [pc, #92]	; (8005b74 <report_feedback_message+0x94>)
 8005b18:	f7fe ff74 	bl	8004a04 <printString>
 8005b1c:	e7f3      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8005b1e:	4816      	ldr	r0, [pc, #88]	; (8005b78 <report_feedback_message+0x98>)
 8005b20:	f7fe ff70 	bl	8004a04 <printString>
 8005b24:	e7ef      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 8005b26:	4815      	ldr	r0, [pc, #84]	; (8005b7c <report_feedback_message+0x9c>)
 8005b28:	f7fe ff6c 	bl	8004a04 <printString>
 8005b2c:	e7eb      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 8005b2e:	4814      	ldr	r0, [pc, #80]	; (8005b80 <report_feedback_message+0xa0>)
 8005b30:	f7fe ff68 	bl	8004a04 <printString>
 8005b34:	e7e7      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 8005b36:	4813      	ldr	r0, [pc, #76]	; (8005b84 <report_feedback_message+0xa4>)
 8005b38:	f7fe ff64 	bl	8004a04 <printString>
 8005b3c:	e7e3      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8005b3e:	4812      	ldr	r0, [pc, #72]	; (8005b88 <report_feedback_message+0xa8>)
 8005b40:	f7fe ff60 	bl	8004a04 <printString>
 8005b44:	e7df      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 8005b46:	4811      	ldr	r0, [pc, #68]	; (8005b8c <report_feedback_message+0xac>)
 8005b48:	f7fe ff5c 	bl	8004a04 <printString>
 8005b4c:	e7db      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <report_feedback_message+0xb0>)
 8005b50:	f7fe ff58 	bl	8004a04 <printString>
 8005b54:	e7d7      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 8005b56:	480f      	ldr	r0, [pc, #60]	; (8005b94 <report_feedback_message+0xb4>)
 8005b58:	f7fe ff54 	bl	8004a04 <printString>
 8005b5c:	e7d3      	b.n	8005b06 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8005b5e:	480e      	ldr	r0, [pc, #56]	; (8005b98 <report_feedback_message+0xb8>)
 8005b60:	f7fe ff50 	bl	8004a04 <printString>
 8005b64:	e7cf      	b.n	8005b06 <report_feedback_message+0x26>
 8005b66:	bf00      	nop
 8005b68:	0800af1c 	.word	0x0800af1c
 8005b6c:	0800afc0 	.word	0x0800afc0
 8005b70:	0800af10 	.word	0x0800af10
 8005b74:	0800af24 	.word	0x0800af24
 8005b78:	0800af38 	.word	0x0800af38
 8005b7c:	0800af4c 	.word	0x0800af4c
 8005b80:	0800af60 	.word	0x0800af60
 8005b84:	0800af68 	.word	0x0800af68
 8005b88:	0800af74 	.word	0x0800af74
 8005b8c:	0800af80 	.word	0x0800af80
 8005b90:	0800af90 	.word	0x0800af90
 8005b94:	0800af98 	.word	0x0800af98
 8005b98:	0800afac 	.word	0x0800afac

08005b9c <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nRX Laser " GRBL_VERSION " ['$' for help]\r\n"));
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <report_init_message+0x8>)
 8005b9e:	f7fe bf31 	b.w	8004a04 <printString>
 8005ba2:	bf00      	nop
 8005ba4:	0800afcc 	.word	0x0800afcc

08005ba8 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8005ba8:	4801      	ldr	r0, [pc, #4]	; (8005bb0 <report_grbl_help+0x8>)
 8005baa:	f7fe bf2b 	b.w	8004a04 <printString>
 8005bae:	bf00      	nop
 8005bb0:	0800aff0 	.word	0x0800aff0

08005bb4 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8005bb8:	4ce0      	ldr	r4, [pc, #896]	; (8005f3c <report_grbl_settings+0x388>)
void report_grbl_settings() {
 8005bba:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005bbc:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8005bbe:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005bc2:	f000 fe11 	bl	80067e8 <serial_write>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fe ff28 	bl	8004a1c <print_uint8_base10>
 8005bcc:	203d      	movs	r0, #61	; 0x3d
 8005bce:	f000 fe0b 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fe ff22 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005bd8:	48d9      	ldr	r0, [pc, #868]	; (8005f40 <report_grbl_settings+0x38c>)
 8005bda:	f7fe ff13 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005bde:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8005be0:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005be4:	f000 fe00 	bl	80067e8 <serial_write>
 8005be8:	2001      	movs	r0, #1
 8005bea:	f7fe ff17 	bl	8004a1c <print_uint8_base10>
 8005bee:	203d      	movs	r0, #61	; 0x3d
 8005bf0:	f000 fdfa 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f7fe ff11 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005bfa:	48d1      	ldr	r0, [pc, #836]	; (8005f40 <report_grbl_settings+0x38c>)
 8005bfc:	f7fe ff02 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c00:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 8005c02:	8e65      	ldrh	r5, [r4, #50]	; 0x32
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c04:	f000 fdf0 	bl	80067e8 <serial_write>
 8005c08:	2002      	movs	r0, #2
 8005c0a:	f7fe ff07 	bl	8004a1c <print_uint8_base10>
 8005c0e:	203d      	movs	r0, #61	; 0x3d
 8005c10:	f000 fdea 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005c14:	b2e8      	uxtb	r0, r5
 8005c16:	f7fe ff01 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c1a:	48c9      	ldr	r0, [pc, #804]	; (8005f40 <report_grbl_settings+0x38c>)
 8005c1c:	f7fe fef2 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c20:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8005c22:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c24:	f000 fde0 	bl	80067e8 <serial_write>
 8005c28:	2003      	movs	r0, #3
 8005c2a:	f7fe fef7 	bl	8004a1c <print_uint8_base10>
 8005c2e:	203d      	movs	r0, #61	; 0x3d
 8005c30:	f000 fdda 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005c34:	b2e8      	uxtb	r0, r5
 8005c36:	f7fe fef1 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c3a:	48c1      	ldr	r0, [pc, #772]	; (8005f40 <report_grbl_settings+0x38c>)
 8005c3c:	f7fe fee2 	bl	8004a04 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8005c40:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c44:	2024      	movs	r0, #36	; 0x24
 8005c46:	f000 fdcf 	bl	80067e8 <serial_write>
 8005c4a:	2004      	movs	r0, #4
 8005c4c:	f7fe fee6 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8005c50:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c54:	203d      	movs	r0, #61	; 0x3d
 8005c56:	f000 fdc7 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f7fe fede 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c60:	48b7      	ldr	r0, [pc, #732]	; (8005f40 <report_grbl_settings+0x38c>)
 8005c62:	f7fe fecf 	bl	8004a04 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8005c66:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c6a:	2024      	movs	r0, #36	; 0x24
 8005c6c:	f000 fdbc 	bl	80067e8 <serial_write>
 8005c70:	2005      	movs	r0, #5
 8005c72:	f7fe fed3 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8005c76:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c7a:	203d      	movs	r0, #61	; 0x3d
 8005c7c:	f000 fdb4 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005c80:	4628      	mov	r0, r5
 8005c82:	f7fe fecb 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c86:	48ae      	ldr	r0, [pc, #696]	; (8005f40 <report_grbl_settings+0x38c>)
 8005c88:	f7fe febc 	bl	8004a04 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8005c8c:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c90:	2024      	movs	r0, #36	; 0x24
 8005c92:	f000 fda9 	bl	80067e8 <serial_write>
 8005c96:	2006      	movs	r0, #6
 8005c98:	f7fe fec0 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8005c9c:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005c9e:	203d      	movs	r0, #61	; 0x3d
 8005ca0:	f000 fda2 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f7fe feb9 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005caa:	48a5      	ldr	r0, [pc, #660]	; (8005f40 <report_grbl_settings+0x38c>)
 8005cac:	f7fe feaa 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cb0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8005cb2:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cb6:	f000 fd97 	bl	80067e8 <serial_write>
 8005cba:	200a      	movs	r0, #10
 8005cbc:	f7fe feae 	bl	8004a1c <print_uint8_base10>
 8005cc0:	203d      	movs	r0, #61	; 0x3d
 8005cc2:	f000 fd91 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f7fe fea8 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ccc:	489c      	ldr	r0, [pc, #624]	; (8005f40 <report_grbl_settings+0x38c>)
 8005cce:	f7fe fe99 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cd2:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8005cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cd6:	f000 fd87 	bl	80067e8 <serial_write>
 8005cda:	200b      	movs	r0, #11
 8005cdc:	f7fe fe9e 	bl	8004a1c <print_uint8_base10>
 8005ce0:	203d      	movs	r0, #61	; 0x3d
 8005ce2:	f000 fd81 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005ce6:	2103      	movs	r1, #3
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7fe fed5 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005cee:	4894      	ldr	r0, [pc, #592]	; (8005f40 <report_grbl_settings+0x38c>)
 8005cf0:	f7fe fe88 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cf4:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8005cf6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005cf8:	f000 fd76 	bl	80067e8 <serial_write>
 8005cfc:	200c      	movs	r0, #12
 8005cfe:	f7fe fe8d 	bl	8004a1c <print_uint8_base10>
 8005d02:	203d      	movs	r0, #61	; 0x3d
 8005d04:	f000 fd70 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005d08:	2103      	movs	r1, #3
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7fe fec4 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d10:	488b      	ldr	r0, [pc, #556]	; (8005f40 <report_grbl_settings+0x38c>)
 8005d12:	f7fe fe77 	bl	8004a04 <printString>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8005d16:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d1a:	2024      	movs	r0, #36	; 0x24
 8005d1c:	f000 fd64 	bl	80067e8 <serial_write>
 8005d20:	200d      	movs	r0, #13
 8005d22:	f7fe fe7b 	bl	8004a1c <print_uint8_base10>
 8005d26:	f005 0501 	and.w	r5, r5, #1
 8005d2a:	203d      	movs	r0, #61	; 0x3d
 8005d2c:	f000 fd5c 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7fe fe73 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d36:	4882      	ldr	r0, [pc, #520]	; (8005f40 <report_grbl_settings+0x38c>)
 8005d38:	f7fe fe64 	bl	8004a04 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8005d3c:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d40:	2024      	movs	r0, #36	; 0x24
 8005d42:	f000 fd51 	bl	80067e8 <serial_write>
 8005d46:	2014      	movs	r0, #20
 8005d48:	f7fe fe68 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8005d4c:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d50:	203d      	movs	r0, #61	; 0x3d
 8005d52:	f000 fd49 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005d56:	4628      	mov	r0, r5
 8005d58:	f7fe fe60 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d5c:	4878      	ldr	r0, [pc, #480]	; (8005f40 <report_grbl_settings+0x38c>)
 8005d5e:	f7fe fe51 	bl	8004a04 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8005d62:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d66:	2024      	movs	r0, #36	; 0x24
 8005d68:	f000 fd3e 	bl	80067e8 <serial_write>
 8005d6c:	2015      	movs	r0, #21
 8005d6e:	f7fe fe55 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8005d72:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d76:	203d      	movs	r0, #61	; 0x3d
 8005d78:	f000 fd36 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f7fe fe4d 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d82:	486f      	ldr	r0, [pc, #444]	; (8005f40 <report_grbl_settings+0x38c>)
 8005d84:	f7fe fe3e 	bl	8004a04 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8005d88:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d8c:	2024      	movs	r0, #36	; 0x24
 8005d8e:	f000 fd2b 	bl	80067e8 <serial_write>
 8005d92:	2016      	movs	r0, #22
 8005d94:	f7fe fe42 	bl	8004a1c <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8005d98:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005d9c:	203d      	movs	r0, #61	; 0x3d
 8005d9e:	f000 fd23 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005da2:	4628      	mov	r0, r5
 8005da4:	f7fe fe3a 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005da8:	4865      	ldr	r0, [pc, #404]	; (8005f40 <report_grbl_settings+0x38c>)
 8005daa:	f7fe fe2b 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005dae:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8005db0:	f8b4 504a 	ldrh.w	r5, [r4, #74]	; 0x4a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005db4:	f000 fd18 	bl	80067e8 <serial_write>
 8005db8:	2017      	movs	r0, #23
 8005dba:	f7fe fe2f 	bl	8004a1c <print_uint8_base10>
 8005dbe:	203d      	movs	r0, #61	; 0x3d
 8005dc0:	f000 fd12 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005dc4:	b2e8      	uxtb	r0, r5
 8005dc6:	f7fe fe29 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005dca:	485d      	ldr	r0, [pc, #372]	; (8005f40 <report_grbl_settings+0x38c>)
 8005dcc:	f7fe fe1a 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005dd0:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8005dd2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005dd4:	f000 fd08 	bl	80067e8 <serial_write>
 8005dd8:	2018      	movs	r0, #24
 8005dda:	f7fe fe1f 	bl	8004a1c <print_uint8_base10>
 8005dde:	203d      	movs	r0, #61	; 0x3d
 8005de0:	f000 fd02 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005de4:	2103      	movs	r1, #3
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fe fe56 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005dec:	4854      	ldr	r0, [pc, #336]	; (8005f40 <report_grbl_settings+0x38c>)
 8005dee:	f7fe fe09 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005df2:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8005df4:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005df6:	f000 fcf7 	bl	80067e8 <serial_write>
 8005dfa:	2019      	movs	r0, #25
 8005dfc:	f7fe fe0e 	bl	8004a1c <print_uint8_base10>
 8005e00:	203d      	movs	r0, #61	; 0x3d
 8005e02:	f000 fcf1 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005e06:	2103      	movs	r1, #3
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f7fe fe45 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e0e:	484c      	ldr	r0, [pc, #304]	; (8005f40 <report_grbl_settings+0x38c>)
 8005e10:	f7fe fdf8 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e14:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8005e16:	f8b4 5054 	ldrh.w	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e1a:	f000 fce5 	bl	80067e8 <serial_write>
 8005e1e:	201a      	movs	r0, #26
 8005e20:	f7fe fdfc 	bl	8004a1c <print_uint8_base10>
 8005e24:	203d      	movs	r0, #61	; 0x3d
 8005e26:	f000 fcdf 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005e2a:	b2e8      	uxtb	r0, r5
 8005e2c:	f7fe fdf6 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e30:	4843      	ldr	r0, [pc, #268]	; (8005f40 <report_grbl_settings+0x38c>)
 8005e32:	f7fe fde7 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e36:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8005e38:	6da5      	ldr	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e3a:	f000 fcd5 	bl	80067e8 <serial_write>
 8005e3e:	201b      	movs	r0, #27
 8005e40:	f7fe fdec 	bl	8004a1c <print_uint8_base10>
 8005e44:	203d      	movs	r0, #61	; 0x3d
 8005e46:	f000 fccf 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005e4a:	2103      	movs	r1, #3
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f7fe fe23 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e52:	483b      	ldr	r0, [pc, #236]	; (8005f40 <report_grbl_settings+0x38c>)
 8005e54:	f7fe fdd6 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e58:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8005e5a:	6c25      	ldr	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e5c:	f000 fcc4 	bl	80067e8 <serial_write>
 8005e60:	201e      	movs	r0, #30
 8005e62:	f7fe fddb 	bl	8004a1c <print_uint8_base10>
 8005e66:	203d      	movs	r0, #61	; 0x3d
 8005e68:	f000 fcbe 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f7fe fe12 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e74:	4832      	ldr	r0, [pc, #200]	; (8005f40 <report_grbl_settings+0x38c>)
 8005e76:	f7fe fdc5 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e7a:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8005e7c:	6c65      	ldr	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e7e:	f000 fcb3 	bl	80067e8 <serial_write>
 8005e82:	201f      	movs	r0, #31
 8005e84:	f7fe fdca 	bl	8004a1c <print_uint8_base10>
 8005e88:	203d      	movs	r0, #61	; 0x3d
 8005e8a:	f000 fcad 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7fe fe01 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e96:	482a      	ldr	r0, [pc, #168]	; (8005f40 <report_grbl_settings+0x38c>)
 8005e98:	f7fe fdb4 	bl	8004a04 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005e9c:	2024      	movs	r0, #36	; 0x24
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8005e9e:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ea2:	f000 fca1 	bl	80067e8 <serial_write>
 8005ea6:	2020      	movs	r0, #32
 8005ea8:	f7fe fdb8 	bl	8004a1c <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8005eac:	f3c4 0440 	ubfx	r4, r4, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005eb0:	203d      	movs	r0, #61	; 0x3d
 8005eb2:	f000 fc99 	bl	80067e8 <serial_write>
  print_uint8_base10(val);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7fe fdb0 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ebc:	4820      	ldr	r0, [pc, #128]	; (8005f40 <report_grbl_settings+0x38c>)
 8005ebe:	f7fe fda1 	bl	8004a04 <printString>
 8005ec2:	2700      	movs	r7, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8005ec4:	f04f 0864 	mov.w	r8, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ec8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8005f40 <report_grbl_settings+0x38c>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 8005ecc:	2f02      	cmp	r7, #2
void report_grbl_settings() {
 8005ece:	f04f 0401 	mov.w	r4, #1
 8005ed2:	4e1a      	ldr	r6, [pc, #104]	; (8005f3c <report_grbl_settings+0x388>)
 8005ed4:	fa5f fb87 	uxtb.w	fp, r7
    for (idx=0; idx<N_AXIS; idx++) {
 8005ed8:	f108 3aff 	add.w	sl, r8, #4294967295
      switch (set_idx) {
 8005edc:	d023      	beq.n	8005f26 <report_grbl_settings+0x372>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005ede:	eb04 000a 	add.w	r0, r4, sl
      switch (set_idx) {
 8005ee2:	f1bb 0f03 	cmp.w	fp, #3
 8005ee6:	b2c5      	uxtb	r5, r0
 8005ee8:	d042      	beq.n	8005f70 <report_grbl_settings+0x3bc>
 8005eea:	f1bb 0f01 	cmp.w	fp, #1
 8005eee:	d038      	beq.n	8005f62 <report_grbl_settings+0x3ae>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ef0:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005ef2:	6832      	ldr	r2, [r6, #0]
 8005ef4:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ef6:	f000 fc77 	bl	80067e8 <serial_write>
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7fe fd8e 	bl	8004a1c <print_uint8_base10>
 8005f00:	203d      	movs	r0, #61	; 0x3d
 8005f02:	f000 fc71 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005f06:	9a01      	ldr	r2, [sp, #4]
 8005f08:	2103      	movs	r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fe fdc4 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f10:	4648      	mov	r0, r9
 8005f12:	f7fe fd77 	bl	8004a04 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005f16:	2c03      	cmp	r4, #3
 8005f18:	d017      	beq.n	8005f4a <report_grbl_settings+0x396>
 8005f1a:	3401      	adds	r4, #1
      switch (set_idx) {
 8005f1c:	2f02      	cmp	r7, #2
 8005f1e:	b2e4      	uxtb	r4, r4
 8005f20:	f106 0604 	add.w	r6, r6, #4
 8005f24:	d1db      	bne.n	8005ede <report_grbl_settings+0x32a>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005f26:	4907      	ldr	r1, [pc, #28]	; (8005f44 <report_grbl_settings+0x390>)
 8005f28:	69b0      	ldr	r0, [r6, #24]
 8005f2a:	f7fa fcb3 	bl	8000894 <__aeabi_fmul>
 8005f2e:	eb04 050a 	add.w	r5, r4, sl
 8005f32:	9001      	str	r0, [sp, #4]
 8005f34:	b2ed      	uxtb	r5, r5
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005f36:	2024      	movs	r0, #36	; 0x24
 8005f38:	e006      	b.n	8005f48 <report_grbl_settings+0x394>
 8005f3a:	bf00      	nop
 8005f3c:	20001834 	.word	0x20001834
 8005f40:	0800af10 	.word	0x0800af10
 8005f44:	3991a2b4 	.word	0x3991a2b4
 8005f48:	e7d5      	b.n	8005ef6 <report_grbl_settings+0x342>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8005f4a:	f108 080a 	add.w	r8, r8, #10
 8005f4e:	fa5f f888 	uxtb.w	r8, r8
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8005f52:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8005f56:	f107 0701 	add.w	r7, r7, #1
 8005f5a:	d1b7      	bne.n	8005ecc <report_grbl_settings+0x318>
  }
}
 8005f5c:	b003      	add	sp, #12
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005f62:	68f2      	ldr	r2, [r6, #12]
 8005f64:	eb04 050a 	add.w	r5, r4, sl
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005f68:	2024      	movs	r0, #36	; 0x24
 8005f6a:	b2ed      	uxtb	r5, r5
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005f6c:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005f6e:	e7c2      	b.n	8005ef6 <report_grbl_settings+0x342>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8005f70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005f72:	eb04 050a 	add.w	r5, r4, sl
 8005f76:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005f7a:	2024      	movs	r0, #36	; 0x24
 8005f7c:	b2ed      	uxtb	r5, r5
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8005f7e:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005f80:	f000 fc32 	bl	80067e8 <serial_write>
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7fe fd49 	bl	8004a1c <print_uint8_base10>
 8005f8a:	203d      	movs	r0, #61	; 0x3d
 8005f8c:	f000 fc2c 	bl	80067e8 <serial_write>
  printFloat(val, n_decimal);
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	4659      	mov	r1, fp
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7fe fd7f 	bl	8004a98 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	f7fe fd32 	bl	8004a04 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005fa0:	2c03      	cmp	r4, #3
 8005fa2:	d1ba      	bne.n	8005f1a <report_grbl_settings+0x366>
}
 8005fa4:	b003      	add	sp, #12
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	bf00      	nop

08005fac <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8005fac:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8005fae:	4813      	ldr	r0, [pc, #76]	; (8005ffc <report_probe_parameters+0x50>)
{
 8005fb0:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8005fb2:	f7fe fd27 	bl	8004a04 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005fb6:	4912      	ldr	r1, [pc, #72]	; (8006000 <report_probe_parameters+0x54>)
 8005fb8:	a801      	add	r0, sp, #4
 8005fba:	f002 fc13 	bl	80087e4 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8005fbe:	9801      	ldr	r0, [sp, #4]
 8005fc0:	f7fe fe60 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005fc4:	202c      	movs	r0, #44	; 0x2c
 8005fc6:	f000 fc0f 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005fca:	9802      	ldr	r0, [sp, #8]
 8005fcc:	f7fe fe5a 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005fd0:	202c      	movs	r0, #44	; 0x2c
 8005fd2:	f000 fc09 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005fd6:	9803      	ldr	r0, [sp, #12]
 8005fd8:	f7fe fe54 	bl	8004c84 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8005fdc:	203a      	movs	r0, #58	; 0x3a
 8005fde:	f000 fc03 	bl	80067e8 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8005fe2:	4b08      	ldr	r3, [pc, #32]	; (8006004 <report_probe_parameters+0x58>)
 8005fe4:	7958      	ldrb	r0, [r3, #5]
 8005fe6:	f7fe fd19 	bl	8004a1c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005fea:	205d      	movs	r0, #93	; 0x5d
 8005fec:	f000 fbfc 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ff0:	4805      	ldr	r0, [pc, #20]	; (8006008 <report_probe_parameters+0x5c>)
 8005ff2:	f7fe fd07 	bl	8004a04 <printString>
  report_util_feedback_line_feed();
}
 8005ff6:	b005      	add	sp, #20
 8005ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ffc:	0800b03c 	.word	0x0800b03c
 8006000:	20001390 	.word	0x20001390
 8006004:	20001378 	.word	0x20001378
 8006008:	0800af10 	.word	0x0800af10

0800600c <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 800600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006010:	2500      	movs	r5, #0
 8006012:	b086      	sub	sp, #24
 8006014:	b2ec      	uxtb	r4, r5
  float coord_data[N_AXIS];
  uint8_t coord_select;
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006016:	4620      	mov	r0, r4
 8006018:	4669      	mov	r1, sp
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 800601a:	4e56      	ldr	r6, [pc, #344]	; (8006174 <report_ngc_parameters+0x168>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 800601c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800619c <report_ngc_parameters+0x190>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006020:	4f55      	ldr	r7, [pc, #340]	; (8006178 <report_ngc_parameters+0x16c>)
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006022:	f000 fdd5 	bl	8006bd0 <settings_read_coord_data>
 8006026:	2800      	cmp	r0, #0
 8006028:	f000 8094 	beq.w	8006154 <report_ngc_parameters+0x148>
    printPgmString(PSTR("[G"));
 800602c:	4630      	mov	r0, r6
 800602e:	f7fe fce9 	bl	8004a04 <printString>
    switch (coord_select) {
 8006032:	2d06      	cmp	r5, #6
 8006034:	f000 809a 	beq.w	800616c <report_ngc_parameters+0x160>
 8006038:	2c07      	cmp	r4, #7
 800603a:	d165      	bne.n	8006108 <report_ngc_parameters+0xfc>
      case 7: printPgmString(PSTR("30")); break;
 800603c:	484f      	ldr	r0, [pc, #316]	; (800617c <report_ngc_parameters+0x170>)
 800603e:	f7fe fce1 	bl	8004a04 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006042:	203a      	movs	r0, #58	; 0x3a
 8006044:	f000 fbd0 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006048:	9800      	ldr	r0, [sp, #0]
 800604a:	f7fe fe1b 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800604e:	202c      	movs	r0, #44	; 0x2c
 8006050:	f000 fbca 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006054:	9801      	ldr	r0, [sp, #4]
 8006056:	f7fe fe15 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800605a:	202c      	movs	r0, #44	; 0x2c
 800605c:	f000 fbc4 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006060:	9802      	ldr	r0, [sp, #8]
 8006062:	f7fe fe0f 	bl	8004c84 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006066:	205d      	movs	r0, #93	; 0x5d
 8006068:	f000 fbbe 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800606c:	4c44      	ldr	r4, [pc, #272]	; (8006180 <report_ngc_parameters+0x174>)
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800606e:	4842      	ldr	r0, [pc, #264]	; (8006178 <report_ngc_parameters+0x16c>)
 8006070:	f7fe fcc8 	bl	8004a04 <printString>
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006074:	4843      	ldr	r0, [pc, #268]	; (8006184 <report_ngc_parameters+0x178>)
 8006076:	f7fe fcc5 	bl	8004a04 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800607a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800607c:	f7fe fe02 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006080:	202c      	movs	r0, #44	; 0x2c
 8006082:	f000 fbb1 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006086:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006088:	f7fe fdfc 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800608c:	202c      	movs	r0, #44	; 0x2c
 800608e:	f000 fbab 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006092:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006094:	f7fe fdf6 	bl	8004c84 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006098:	205d      	movs	r0, #93	; 0x5d
 800609a:	f000 fba5 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800609e:	4836      	ldr	r0, [pc, #216]	; (8006178 <report_ngc_parameters+0x16c>)
 80060a0:	f7fe fcb0 	bl	8004a04 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 80060a4:	4838      	ldr	r0, [pc, #224]	; (8006188 <report_ngc_parameters+0x17c>)
 80060a6:	f7fe fcad 	bl	8004a04 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 80060aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80060ac:	f7fe fdea 	bl	8004c84 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80060b0:	205d      	movs	r0, #93	; 0x5d
 80060b2:	f000 fb99 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80060b6:	4830      	ldr	r0, [pc, #192]	; (8006178 <report_ngc_parameters+0x16c>)
 80060b8:	f7fe fca4 	bl	8004a04 <printString>
  printPgmString(PSTR("[PRB:"));
 80060bc:	4833      	ldr	r0, [pc, #204]	; (800618c <report_ngc_parameters+0x180>)
 80060be:	f7fe fca1 	bl	8004a04 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 80060c2:	4933      	ldr	r1, [pc, #204]	; (8006190 <report_ngc_parameters+0x184>)
 80060c4:	a803      	add	r0, sp, #12
 80060c6:	f002 fb8d 	bl	80087e4 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 80060ca:	9803      	ldr	r0, [sp, #12]
 80060cc:	f7fe fdda 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80060d0:	202c      	movs	r0, #44	; 0x2c
 80060d2:	f000 fb89 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80060d6:	9804      	ldr	r0, [sp, #16]
 80060d8:	f7fe fdd4 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80060dc:	202c      	movs	r0, #44	; 0x2c
 80060de:	f000 fb83 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80060e2:	9805      	ldr	r0, [sp, #20]
 80060e4:	f7fe fdce 	bl	8004c84 <printFloat_CoordValue>
  serial_write(':');
 80060e8:	203a      	movs	r0, #58	; 0x3a
 80060ea:	f000 fb7d 	bl	80067e8 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 80060ee:	4b29      	ldr	r3, [pc, #164]	; (8006194 <report_ngc_parameters+0x188>)
 80060f0:	7958      	ldrb	r0, [r3, #5]
 80060f2:	f7fe fc93 	bl	8004a1c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80060f6:	205d      	movs	r0, #93	; 0x5d
 80060f8:	f000 fb76 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80060fc:	481e      	ldr	r0, [pc, #120]	; (8006178 <report_ngc_parameters+0x16c>)
 80060fe:	f7fe fc81 	bl	8004a04 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006102:	b006      	add	sp, #24
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006108:	f104 0036 	add.w	r0, r4, #54	; 0x36
 800610c:	b2c0      	uxtb	r0, r0
 800610e:	f7fe fc85 	bl	8004a1c <print_uint8_base10>
    serial_write(':');
 8006112:	203a      	movs	r0, #58	; 0x3a
 8006114:	f000 fb68 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006118:	9800      	ldr	r0, [sp, #0]
 800611a:	f7fe fdb3 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800611e:	202c      	movs	r0, #44	; 0x2c
 8006120:	f000 fb62 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006124:	9801      	ldr	r0, [sp, #4]
 8006126:	f7fe fdad 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800612a:	202c      	movs	r0, #44	; 0x2c
 800612c:	f000 fb5c 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006130:	9802      	ldr	r0, [sp, #8]
 8006132:	f7fe fda7 	bl	8004c84 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006136:	3501      	adds	r5, #1
 8006138:	205d      	movs	r0, #93	; 0x5d
 800613a:	f000 fb55 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800613e:	b2ec      	uxtb	r4, r5
 8006140:	4638      	mov	r0, r7
 8006142:	f7fe fc5f 	bl	8004a04 <printString>
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006146:	4620      	mov	r0, r4
 8006148:	4669      	mov	r1, sp
 800614a:	f000 fd41 	bl	8006bd0 <settings_read_coord_data>
 800614e:	2800      	cmp	r0, #0
 8006150:	f47f af6c 	bne.w	800602c <report_ngc_parameters+0x20>
      printPgmString(PSTR("error:"));
 8006154:	4810      	ldr	r0, [pc, #64]	; (8006198 <report_ngc_parameters+0x18c>)
 8006156:	f7fe fc55 	bl	8004a04 <printString>
      print_uint8_base10(status_code);
 800615a:	2007      	movs	r0, #7
 800615c:	f7fe fc5e 	bl	8004a1c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006160:	4805      	ldr	r0, [pc, #20]	; (8006178 <report_ngc_parameters+0x16c>)
 8006162:	f7fe fc4f 	bl	8004a04 <printString>
}
 8006166:	b006      	add	sp, #24
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      case 6: printPgmString(PSTR("28")); break;
 800616c:	4640      	mov	r0, r8
 800616e:	f7fe fc49 	bl	8004a04 <printString>
    serial_write(':');
 8006172:	e7ce      	b.n	8006112 <report_ngc_parameters+0x106>
 8006174:	0800b044 	.word	0x0800b044
 8006178:	0800af10 	.word	0x0800af10
 800617c:	0800b04c 	.word	0x0800b04c
 8006180:	20001288 	.word	0x20001288
 8006184:	0800b050 	.word	0x0800b050
 8006188:	0800b058 	.word	0x0800b058
 800618c:	0800b03c 	.word	0x0800b03c
 8006190:	20001390 	.word	0x20001390
 8006194:	20001378 	.word	0x20001378
 8006198:	0800af08 	.word	0x0800af08
 800619c:	0800b048 	.word	0x0800b048

080061a0 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 80061a0:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 80061a2:	4c52      	ldr	r4, [pc, #328]	; (80062ec <report_gcode_modes+0x14c>)
  printPgmString(PSTR("[GC:G"));
 80061a4:	4852      	ldr	r0, [pc, #328]	; (80062f0 <report_gcode_modes+0x150>)
 80061a6:	f7fe fc2d 	bl	8004a04 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 80061aa:	7820      	ldrb	r0, [r4, #0]
 80061ac:	288b      	cmp	r0, #139	; 0x8b
 80061ae:	d95f      	bls.n	8006270 <report_gcode_modes+0xd0>
    printPgmString(PSTR("38."));
 80061b0:	4850      	ldr	r0, [pc, #320]	; (80062f4 <report_gcode_modes+0x154>)
 80061b2:	f7fe fc27 	bl	8004a04 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 80061b6:	7820      	ldrb	r0, [r4, #0]
 80061b8:	3076      	adds	r0, #118	; 0x76
 80061ba:	b2c0      	uxtb	r0, r0
 80061bc:	f7fe fc2e 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80061c0:	484d      	ldr	r0, [pc, #308]	; (80062f8 <report_gcode_modes+0x158>)
 80061c2:	f7fe fc1f 	bl	8004a04 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 80061c6:	79a0      	ldrb	r0, [r4, #6]
 80061c8:	3036      	adds	r0, #54	; 0x36
 80061ca:	b2c0      	uxtb	r0, r0
 80061cc:	f7fe fc26 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80061d0:	4849      	ldr	r0, [pc, #292]	; (80062f8 <report_gcode_modes+0x158>)
 80061d2:	f7fe fc17 	bl	8004a04 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 80061d6:	7920      	ldrb	r0, [r4, #4]
 80061d8:	3011      	adds	r0, #17
 80061da:	b2c0      	uxtb	r0, r0
 80061dc:	f7fe fc1e 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80061e0:	4845      	ldr	r0, [pc, #276]	; (80062f8 <report_gcode_modes+0x158>)
 80061e2:	f7fe fc0f 	bl	8004a04 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 80061e6:	78a0      	ldrb	r0, [r4, #2]
 80061e8:	f1c0 0015 	rsb	r0, r0, #21
 80061ec:	b2c0      	uxtb	r0, r0
 80061ee:	f7fe fc15 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80061f2:	4841      	ldr	r0, [pc, #260]	; (80062f8 <report_gcode_modes+0x158>)
 80061f4:	f7fe fc06 	bl	8004a04 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 80061f8:	78e0      	ldrb	r0, [r4, #3]
 80061fa:	305a      	adds	r0, #90	; 0x5a
 80061fc:	b2c0      	uxtb	r0, r0
 80061fe:	f7fe fc0d 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006202:	483d      	ldr	r0, [pc, #244]	; (80062f8 <report_gcode_modes+0x158>)
 8006204:	f7fe fbfe 	bl	8004a04 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006208:	7860      	ldrb	r0, [r4, #1]
 800620a:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 800620e:	b2c0      	uxtb	r0, r0
 8006210:	f7fe fc04 	bl	8004a1c <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006214:	79e3      	ldrb	r3, [r4, #7]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d13b      	bne.n	8006292 <report_gcode_modes+0xf2>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800621a:	4838      	ldr	r0, [pc, #224]	; (80062fc <report_gcode_modes+0x15c>)
 800621c:	f7fe fbf2 	bl	8004a04 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006220:	7a63      	ldrb	r3, [r4, #9]
 8006222:	2b10      	cmp	r3, #16
 8006224:	d047      	beq.n	80062b6 <report_gcode_modes+0x116>
 8006226:	2b20      	cmp	r3, #32
 8006228:	d04d      	beq.n	80062c6 <report_gcode_modes+0x126>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d047      	beq.n	80062be <report_gcode_modes+0x11e>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  //report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 800622e:	7a23      	ldrb	r3, [r4, #8]
 8006230:	b343      	cbz	r3, 8006284 <report_gcode_modes+0xe4>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006232:	061a      	lsls	r2, r3, #24
 8006234:	d44b      	bmi.n	80062ce <report_gcode_modes+0x12e>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006236:	065b      	lsls	r3, r3, #25
 8006238:	d41d      	bmi.n	8006276 <report_gcode_modes+0xd6>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 800623a:	4831      	ldr	r0, [pc, #196]	; (8006300 <report_gcode_modes+0x160>)
 800623c:	f7fe fbe2 	bl	8004a04 <printString>
  print_uint8_base10(gc_state.tool);
 8006240:	7d20      	ldrb	r0, [r4, #20]
 8006242:	f7fe fbeb 	bl	8004a1c <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006246:	482f      	ldr	r0, [pc, #188]	; (8006304 <report_gcode_modes+0x164>)
 8006248:	f7fe fbdc 	bl	8004a04 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 800624c:	6920      	ldr	r0, [r4, #16]
 800624e:	f7fe fe23 	bl	8004e98 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006252:	482d      	ldr	r0, [pc, #180]	; (8006308 <report_gcode_modes+0x168>)
 8006254:	f7fe fbd6 	bl	8004a04 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006258:	68e0      	ldr	r0, [r4, #12]
 800625a:	2100      	movs	r1, #0
 800625c:	f7fe fc1c 	bl	8004a98 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006260:	205d      	movs	r0, #93	; 0x5d
 8006262:	f000 fac1 	bl	80067e8 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800626a:	4828      	ldr	r0, [pc, #160]	; (800630c <report_gcode_modes+0x16c>)
 800626c:	f7fe bbca 	b.w	8004a04 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006270:	f7fe fbd4 	bl	8004a1c <print_uint8_base10>
 8006274:	e7a4      	b.n	80061c0 <report_gcode_modes+0x20>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006276:	4821      	ldr	r0, [pc, #132]	; (80062fc <report_gcode_modes+0x15c>)
 8006278:	f7fe fbc4 	bl	8004a04 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 800627c:	2038      	movs	r0, #56	; 0x38
 800627e:	f000 fab3 	bl	80067e8 <serial_write>
 8006282:	e7da      	b.n	800623a <report_gcode_modes+0x9a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006284:	481d      	ldr	r0, [pc, #116]	; (80062fc <report_gcode_modes+0x15c>)
 8006286:	f7fe fbbd 	bl	8004a04 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 800628a:	2039      	movs	r0, #57	; 0x39
 800628c:	f000 faac 	bl	80067e8 <serial_write>
 8006290:	e7d3      	b.n	800623a <report_gcode_modes+0x9a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006292:	481a      	ldr	r0, [pc, #104]	; (80062fc <report_gcode_modes+0x15c>)
 8006294:	f7fe fbb6 	bl	8004a04 <printString>
    switch (gc_state.modal.program_flow) {
 8006298:	79e0      	ldrb	r0, [r4, #7]
 800629a:	2803      	cmp	r0, #3
 800629c:	d021      	beq.n	80062e2 <report_gcode_modes+0x142>
 800629e:	281e      	cmp	r0, #30
 80062a0:	d001      	beq.n	80062a6 <report_gcode_modes+0x106>
 80062a2:	2802      	cmp	r0, #2
 80062a4:	d1b9      	bne.n	800621a <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 80062a6:	f7fe fbb9 	bl	8004a1c <print_uint8_base10>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80062aa:	4814      	ldr	r0, [pc, #80]	; (80062fc <report_gcode_modes+0x15c>)
 80062ac:	f7fe fbaa 	bl	8004a04 <printString>
  switch (gc_state.modal.spindle) {
 80062b0:	7a63      	ldrb	r3, [r4, #9]
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d1b7      	bne.n	8006226 <report_gcode_modes+0x86>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 80062b6:	2033      	movs	r0, #51	; 0x33
 80062b8:	f000 fa96 	bl	80067e8 <serial_write>
 80062bc:	e7b7      	b.n	800622e <report_gcode_modes+0x8e>
    case SPINDLE_DISABLE : serial_write('5'); break;
 80062be:	2035      	movs	r0, #53	; 0x35
 80062c0:	f000 fa92 	bl	80067e8 <serial_write>
 80062c4:	e7b3      	b.n	800622e <report_gcode_modes+0x8e>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 80062c6:	2034      	movs	r0, #52	; 0x34
 80062c8:	f000 fa8e 	bl	80067e8 <serial_write>
 80062cc:	e7af      	b.n	800622e <report_gcode_modes+0x8e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80062ce:	480b      	ldr	r0, [pc, #44]	; (80062fc <report_gcode_modes+0x15c>)
 80062d0:	f7fe fb98 	bl	8004a04 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 80062d4:	2037      	movs	r0, #55	; 0x37
 80062d6:	f000 fa87 	bl	80067e8 <serial_write>
 80062da:	7a23      	ldrb	r3, [r4, #8]
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 80062dc:	065b      	lsls	r3, r3, #25
 80062de:	d5ac      	bpl.n	800623a <report_gcode_modes+0x9a>
 80062e0:	e7c9      	b.n	8006276 <report_gcode_modes+0xd6>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 80062e2:	2030      	movs	r0, #48	; 0x30
 80062e4:	f000 fa80 	bl	80067e8 <serial_write>
 80062e8:	e797      	b.n	800621a <report_gcode_modes+0x7a>
 80062ea:	bf00      	nop
 80062ec:	20001288 	.word	0x20001288
 80062f0:	0800b060 	.word	0x0800b060
 80062f4:	0800b068 	.word	0x0800b068
 80062f8:	0800b06c 	.word	0x0800b06c
 80062fc:	0800b070 	.word	0x0800b070
 8006300:	0800b074 	.word	0x0800b074
 8006304:	0800b078 	.word	0x0800b078
 8006308:	0800b07c 	.word	0x0800b07c
 800630c:	0800af10 	.word	0x0800af10

08006310 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8006316:	4808      	ldr	r0, [pc, #32]	; (8006338 <report_startup_line+0x28>)
 8006318:	f7fe fb74 	bl	8004a04 <printString>
  print_uint8_base10(n);
 800631c:	4628      	mov	r0, r5
 800631e:	f7fe fb7d 	bl	8004a1c <print_uint8_base10>
  serial_write('=');
 8006322:	203d      	movs	r0, #61	; 0x3d
 8006324:	f000 fa60 	bl	80067e8 <serial_write>
  printString(line);
 8006328:	4620      	mov	r0, r4
 800632a:	f7fe fb6b 	bl	8004a04 <printString>
  report_util_line_feed();
}
 800632e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006332:	4802      	ldr	r0, [pc, #8]	; (800633c <report_startup_line+0x2c>)
 8006334:	f7fe bb66 	b.w	8004a04 <printString>
 8006338:	0800b080 	.word	0x0800b080
 800633c:	0800af10 	.word	0x0800af10

08006340 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4605      	mov	r5, r0
 8006344:	460c      	mov	r4, r1
  serial_write('>');
 8006346:	203e      	movs	r0, #62	; 0x3e
 8006348:	f000 fa4e 	bl	80067e8 <serial_write>
  printString(line);
 800634c:	4628      	mov	r0, r5
 800634e:	f7fe fb59 	bl	8004a04 <printString>
  serial_write(':');
 8006352:	203a      	movs	r0, #58	; 0x3a
 8006354:	f000 fa48 	bl	80067e8 <serial_write>
  switch(status_code) {
 8006358:	b974      	cbnz	r4, 8006378 <report_execute_startup_message+0x38>
      printPgmString(PSTR("ok\r\n")); satir++; satir_sayisi(0,0); show_led(); break;
 800635a:	480d      	ldr	r0, [pc, #52]	; (8006390 <report_execute_startup_message+0x50>)
 800635c:	f7fe fb52 	bl	8004a04 <printString>
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <report_execute_startup_message+0x54>)
 8006362:	4621      	mov	r1, r4
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	4620      	mov	r0, r4
 8006368:	3301      	adds	r3, #1
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	f7ff fa9a 	bl	80058a4 <satir_sayisi>
  report_status_message(status_code);
}
 8006370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); satir++; satir_sayisi(0,0); show_led(); break;
 8006374:	f7fd ba2e 	b.w	80037d4 <show_led>
      printPgmString(PSTR("error:"));
 8006378:	4807      	ldr	r0, [pc, #28]	; (8006398 <report_execute_startup_message+0x58>)
 800637a:	f7fe fb43 	bl	8004a04 <printString>
      print_uint8_base10(status_code);
 800637e:	4620      	mov	r0, r4
 8006380:	f7fe fb4c 	bl	8004a1c <print_uint8_base10>
}
 8006384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006388:	4804      	ldr	r0, [pc, #16]	; (800639c <report_execute_startup_message+0x5c>)
 800638a:	f7fe bb3b 	b.w	8004a04 <printString>
 800638e:	bf00      	nop
 8006390:	0800af00 	.word	0x0800af00
 8006394:	20000cf4 	.word	0x20000cf4
 8006398:	0800af08 	.word	0x0800af08
 800639c:	0800af10 	.word	0x0800af10

080063a0 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 80063a0:	b510      	push	{r4, lr}
 80063a2:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 80063a4:	4814      	ldr	r0, [pc, #80]	; (80063f8 <report_build_info+0x58>)
 80063a6:	f7fe fb2d 	bl	8004a04 <printString>
  printString(line);
 80063aa:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063ac:	4c13      	ldr	r4, [pc, #76]	; (80063fc <report_build_info+0x5c>)
  printString(line);
 80063ae:	f7fe fb29 	bl	8004a04 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80063b2:	205d      	movs	r0, #93	; 0x5d
 80063b4:	f000 fa18 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7fe fb23 	bl	8004a04 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 80063be:	4810      	ldr	r0, [pc, #64]	; (8006400 <report_build_info+0x60>)
 80063c0:	f7fe fb20 	bl	8004a04 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 80063c4:	2056      	movs	r0, #86	; 0x56
 80063c6:	f000 fa0f 	bl	80067e8 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 80063ca:	204d      	movs	r0, #77	; 0x4d
 80063cc:	f000 fa0c 	bl	80067e8 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 80063d0:	202c      	movs	r0, #44	; 0x2c
 80063d2:	f000 fa09 	bl	80067e8 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 80063d6:	2023      	movs	r0, #35	; 0x23
 80063d8:	f7fe fb20 	bl	8004a1c <print_uint8_base10>
	serial_write(',');
 80063dc:	202c      	movs	r0, #44	; 0x2c
 80063de:	f000 fa03 	bl	80067e8 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 80063e2:	20fe      	movs	r0, #254	; 0xfe
 80063e4:	f7fe fb1a 	bl	8004a1c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80063e8:	205d      	movs	r0, #93	; 0x5d
 80063ea:	f000 f9fd 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063ee:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80063f4:	f7fe bb06 	b.w	8004a04 <printString>
 80063f8:	0800b084 	.word	0x0800b084
 80063fc:	0800af10 	.word	0x0800af10
 8006400:	0800b098 	.word	0x0800b098

08006404 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006406:	4aaa      	ldr	r2, [pc, #680]	; (80066b0 <report_realtime_status+0x2ac>)
{
 8006408:	b08b      	sub	sp, #44	; 0x2c
  memcpy(current_position, sys_position, sizeof(sys_position));
 800640a:	ab01      	add	r3, sp, #4
 800640c:	ca07      	ldmia	r2, {r0, r1, r2}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 800640e:	4ca9      	ldr	r4, [pc, #676]	; (80066b4 <report_realtime_status+0x2b0>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006414:	4619      	mov	r1, r3
 8006416:	a804      	add	r0, sp, #16
 8006418:	f002 f9e4 	bl	80087e4 <system_convert_array_steps_to_mpos>
  serial_write('<');
 800641c:	203c      	movs	r0, #60	; 0x3c
 800641e:	f000 f9e3 	bl	80067e8 <serial_write>
  switch (sys.state) {
 8006422:	7823      	ldrb	r3, [r4, #0]
 8006424:	2b20      	cmp	r3, #32
 8006426:	d824      	bhi.n	8006472 <report_realtime_status+0x6e>
 8006428:	2b20      	cmp	r3, #32
 800642a:	d82a      	bhi.n	8006482 <report_realtime_status+0x7e>
 800642c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006430:	0160013b 	.word	0x0160013b
 8006434:	00290164 	.word	0x00290164
 8006438:	00290168 	.word	0x00290168
 800643c:	00290029 	.word	0x00290029
 8006440:	0029016c 	.word	0x0029016c
 8006444:	00290029 	.word	0x00290029
 8006448:	00290029 	.word	0x00290029
 800644c:	00290029 	.word	0x00290029
 8006450:	00290133 	.word	0x00290133
 8006454:	00290029 	.word	0x00290029
 8006458:	00290029 	.word	0x00290029
 800645c:	00290029 	.word	0x00290029
 8006460:	00290029 	.word	0x00290029
 8006464:	00290029 	.word	0x00290029
 8006468:	00290029 	.word	0x00290029
 800646c:	00290029 	.word	0x00290029
 8006470:	0137      	.short	0x0137
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	f000 8161 	beq.w	800673a <report_realtime_status+0x336>
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d102      	bne.n	8006482 <report_realtime_status+0x7e>
      else {
        serial_write('2'); // Retracting
      }
    }
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 800647c:	488e      	ldr	r0, [pc, #568]	; (80066b8 <report_realtime_status+0x2b4>)
 800647e:	f7fe fac1 	bl	8004a04 <printString>
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006482:	4e8e      	ldr	r6, [pc, #568]	; (80066bc <report_realtime_status+0x2b8>)
 8006484:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 8006488:	07d8      	lsls	r0, r3, #31
 800648a:	f140 8090 	bpl.w	80065ae <report_realtime_status+0x1aa>
 800648e:	7b63      	ldrb	r3, [r4, #13]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d045      	beq.n	8006520 <report_realtime_status+0x11c>
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
 8006494:	488a      	ldr	r0, [pc, #552]	; (80066c0 <report_realtime_status+0x2bc>)
 8006496:	f7fe fab5 	bl	8004a04 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800649a:	9804      	ldr	r0, [sp, #16]
 800649c:	f7fe fbf2 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80064a0:	202c      	movs	r0, #44	; 0x2c
 80064a2:	f000 f9a1 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80064a6:	9805      	ldr	r0, [sp, #20]
 80064a8:	f7fe fbec 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80064ac:	202c      	movs	r0, #44	; 0x2c
 80064ae:	f000 f99b 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80064b2:	9806      	ldr	r0, [sp, #24]
 80064b4:	f7fe fbe6 	bl	8004c84 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 80064b8:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 80064bc:	0799      	lsls	r1, r3, #30
 80064be:	f100 80be 	bmi.w	800663e <report_realtime_status+0x23a>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80064c2:	4880      	ldr	r0, [pc, #512]	; (80066c4 <report_realtime_status+0x2c0>)
 80064c4:	f7fe fa9e 	bl	8004a04 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80064c8:	f001 ff26 	bl	8008318 <st_get_realtime_rate>
 80064cc:	f7fe fce4 	bl	8004e98 <printFloat_RateValue>
  serial_write(',');
 80064d0:	202c      	movs	r0, #44	; 0x2c
 80064d2:	f000 f989 	bl	80067e8 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80064d6:	2100      	movs	r1, #0
 80064d8:	6920      	ldr	r0, [r4, #16]
 80064da:	f7fe fadd 	bl	8004a98 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80064de:	f7fc fc71 	bl	8002dc4 <limits_get_state>
 80064e2:	4606      	mov	r6, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 80064e4:	f001 ff64 	bl	80083b0 <system_control_get_state>
 80064e8:	4605      	mov	r5, r0
  uint8_t prb_pin_state = probe_get_state();
 80064ea:	f7fe fda9 	bl	8005040 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80064ee:	ea46 0305 	orr.w	r3, r6, r5
 80064f2:	4303      	orrs	r3, r0
 80064f4:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 80064f8:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80064fa:	f040 80af 	bne.w	800665c <report_realtime_status+0x258>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80064fe:	7b63      	ldrb	r3, [r4, #13]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d07e      	beq.n	8006602 <report_realtime_status+0x1fe>
 8006504:	3b01      	subs	r3, #1
 8006506:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8006508:	7b23      	ldrb	r3, [r4, #12]
 800650a:	b303      	cbz	r3, 800654e <report_realtime_status+0x14a>
 800650c:	3b01      	subs	r3, #1
 800650e:	7323      	strb	r3, [r4, #12]
        #endif
      }
    }
  #endif

  serial_write('>');
 8006510:	203e      	movs	r0, #62	; 0x3e
 8006512:	f000 f969 	bl	80067e8 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006516:	486c      	ldr	r0, [pc, #432]	; (80066c8 <report_realtime_status+0x2c4>)
 8006518:	f7fe fa74 	bl	8004a04 <printString>
  report_util_line_feed();
}
 800651c:	b00b      	add	sp, #44	; 0x2c
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006520:	4d6a      	ldr	r5, [pc, #424]	; (80066cc <report_realtime_status+0x2c8>)
 8006522:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006524:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006526:	f7fa f8ad 	bl	8000684 <__addsf3>
 800652a:	4603      	mov	r3, r0
 800652c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800652e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006530:	9307      	str	r3, [sp, #28]
 8006532:	f7fa f8a7 	bl	8000684 <__addsf3>
 8006536:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006538:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800653a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800653c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	f7fa f8a0 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa f89d 	bl	8000684 <__addsf3>
 800654a:	9009      	str	r0, [sp, #36]	; 0x24
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 800654c:	e7a2      	b.n	8006494 <report_realtime_status+0x90>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 800654e:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 8006550:	485f      	ldr	r0, [pc, #380]	; (80066d0 <report_realtime_status+0x2cc>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8006552:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8006556:	bf14      	ite	ne
 8006558:	2313      	movne	r3, #19
 800655a:	2309      	moveq	r3, #9
 800655c:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 800655e:	f7fe fa51 	bl	8004a04 <printString>
      print_uint8_base10(sys.f_override);
 8006562:	7a20      	ldrb	r0, [r4, #8]
 8006564:	f7fe fa5a 	bl	8004a1c <print_uint8_base10>
      serial_write(',');
 8006568:	202c      	movs	r0, #44	; 0x2c
 800656a:	f000 f93d 	bl	80067e8 <serial_write>
      print_uint8_base10(sys.r_override);
 800656e:	7a60      	ldrb	r0, [r4, #9]
 8006570:	f7fe fa54 	bl	8004a1c <print_uint8_base10>
      serial_write(',');
 8006574:	202c      	movs	r0, #44	; 0x2c
 8006576:	f000 f937 	bl	80067e8 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 800657a:	7aa0      	ldrb	r0, [r4, #10]
 800657c:	f7fe fa4e 	bl	8004a1c <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 8006580:	f000 fd3a 	bl	8006ff8 <spindle_get_state>
 8006584:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8006586:	f7fb f8d5 	bl	8001734 <coolant_get_state>
 800658a:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 800658c:	2d00      	cmp	r5, #0
 800658e:	f040 80c5 	bne.w	800671c <report_realtime_status+0x318>
 8006592:	2800      	cmp	r0, #0
 8006594:	d0bc      	beq.n	8006510 <report_realtime_status+0x10c>
        printPgmString(PSTR("|A:"));
 8006596:	484f      	ldr	r0, [pc, #316]	; (80066d4 <report_realtime_status+0x2d0>)
 8006598:	f7fe fa34 	bl	8004a04 <printString>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800659c:	07e2      	lsls	r2, r4, #31
 800659e:	f100 80c8 	bmi.w	8006732 <report_realtime_status+0x32e>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 80065a2:	07a3      	lsls	r3, r4, #30
 80065a4:	d5b4      	bpl.n	8006510 <report_realtime_status+0x10c>
 80065a6:	204d      	movs	r0, #77	; 0x4d
 80065a8:	f000 f91e 	bl	80067e8 <serial_write>
 80065ac:	e7b0      	b.n	8006510 <report_realtime_status+0x10c>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065ae:	4d47      	ldr	r5, [pc, #284]	; (80066cc <report_realtime_status+0x2c8>)
 80065b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80065b2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80065b4:	f7fa f866 	bl	8000684 <__addsf3>
 80065b8:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 80065ba:	9804      	ldr	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065bc:	9107      	str	r1, [sp, #28]
        print_position[idx] -= wco[idx];
 80065be:	f7fa f85f 	bl	8000680 <__aeabi_fsub>
 80065c2:	4603      	mov	r3, r0
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065c4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80065c6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        print_position[idx] -= wco[idx];
 80065c8:	9304      	str	r3, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065ca:	f7fa f85b 	bl	8000684 <__addsf3>
 80065ce:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 80065d0:	9805      	ldr	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065d2:	9108      	str	r1, [sp, #32]
        print_position[idx] -= wco[idx];
 80065d4:	f7fa f854 	bl	8000680 <__aeabi_fsub>
 80065d8:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80065da:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80065de:	6be8      	ldr	r0, [r5, #60]	; 0x3c
        print_position[idx] -= wco[idx];
 80065e0:	9305      	str	r3, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80065e2:	f7fa f84f 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7fa f84c 	bl	8000684 <__addsf3>
 80065ec:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 80065ee:	9806      	ldr	r0, [sp, #24]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80065f0:	9109      	str	r1, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 80065f2:	f7fa f845 	bl	8000680 <__aeabi_fsub>
 80065f6:	4603      	mov	r3, r0
    printPgmString(PSTR("|WPos:"));
 80065f8:	4837      	ldr	r0, [pc, #220]	; (80066d8 <report_realtime_status+0x2d4>)
        print_position[idx] -= wco[idx];
 80065fa:	9306      	str	r3, [sp, #24]
    printPgmString(PSTR("|WPos:"));
 80065fc:	f7fe fa02 	bl	8004a04 <printString>
 8006600:	e74b      	b.n	800649a <report_realtime_status+0x96>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8006602:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8006604:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 8006606:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 800660a:	bf14      	ite	ne
 800660c:	221d      	movne	r2, #29
 800660e:	2209      	moveq	r2, #9
 8006610:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8006612:	b90b      	cbnz	r3, 8006618 <report_realtime_status+0x214>
 8006614:	2301      	movs	r3, #1
 8006616:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 8006618:	4830      	ldr	r0, [pc, #192]	; (80066dc <report_realtime_status+0x2d8>)
 800661a:	f7fe f9f3 	bl	8004a04 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800661e:	9807      	ldr	r0, [sp, #28]
 8006620:	f7fe fb30 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006624:	202c      	movs	r0, #44	; 0x2c
 8006626:	f000 f8df 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800662a:	9808      	ldr	r0, [sp, #32]
 800662c:	f7fe fb2a 	bl	8004c84 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006630:	202c      	movs	r0, #44	; 0x2c
 8006632:	f000 f8d9 	bl	80067e8 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006638:	f7fe fb24 	bl	8004c84 <printFloat_CoordValue>
  for (idx=0; idx<N_AXIS; idx++) {
 800663c:	e764      	b.n	8006508 <report_realtime_status+0x104>
    printPgmString(PSTR("|Bf:"));
 800663e:	4828      	ldr	r0, [pc, #160]	; (80066e0 <report_realtime_status+0x2dc>)
 8006640:	f7fe f9e0 	bl	8004a04 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8006644:	f7fe f9bc 	bl	80049c0 <plan_get_block_buffer_available>
 8006648:	f7fe f9e8 	bl	8004a1c <print_uint8_base10>
    serial_write(',');
 800664c:	202c      	movs	r0, #44	; 0x2c
 800664e:	f000 f8cb 	bl	80067e8 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8006652:	f000 f8b5 	bl	80067c0 <serial_get_rx_buffer_available>
 8006656:	f7fe f9e1 	bl	8004a1c <print_uint8_base10>
 800665a:	e732      	b.n	80064c2 <report_realtime_status+0xbe>
    printPgmString(PSTR("|Pn:"));
 800665c:	4821      	ldr	r0, [pc, #132]	; (80066e4 <report_realtime_status+0x2e0>)
 800665e:	f7fe f9d1 	bl	8004a04 <printString>
    if (prb_pin_state) { serial_write('P'); }
 8006662:	2f00      	cmp	r7, #0
 8006664:	d154      	bne.n	8006710 <report_realtime_status+0x30c>
    if (lim_pin_state) {
 8006666:	b146      	cbz	r6, 800667a <report_realtime_status+0x276>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8006668:	07f2      	lsls	r2, r6, #31
 800666a:	d47c      	bmi.n	8006766 <report_realtime_status+0x362>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800666c:	07b3      	lsls	r3, r6, #30
 800666e:	d476      	bmi.n	800675e <report_realtime_status+0x35a>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8006670:	0777      	lsls	r7, r6, #29
 8006672:	d502      	bpl.n	800667a <report_realtime_status+0x276>
 8006674:	205a      	movs	r0, #90	; 0x5a
 8006676:	f000 f8b7 	bl	80067e8 <serial_write>
    if (ctrl_pin_state) {
 800667a:	2d00      	cmp	r5, #0
 800667c:	f43f af3f 	beq.w	80064fe <report_realtime_status+0xfa>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8006680:	07ee      	lsls	r6, r5, #31
 8006682:	d478      	bmi.n	8006776 <report_realtime_status+0x372>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8006684:	07a8      	lsls	r0, r5, #30
 8006686:	d472      	bmi.n	800676e <report_realtime_status+0x36a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8006688:	0769      	lsls	r1, r5, #29
 800668a:	f57f af38 	bpl.w	80064fe <report_realtime_status+0xfa>
 800668e:	2053      	movs	r0, #83	; 0x53
 8006690:	f000 f8aa 	bl	80067e8 <serial_write>
 8006694:	e733      	b.n	80064fe <report_realtime_status+0xfa>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006696:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da6f      	bge.n	800677e <report_realtime_status+0x37a>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 800669e:	4812      	ldr	r0, [pc, #72]	; (80066e8 <report_realtime_status+0x2e4>)
 80066a0:	f7fe f9b0 	bl	8004a04 <printString>
 80066a4:	e6ed      	b.n	8006482 <report_realtime_status+0x7e>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 80066a6:	4811      	ldr	r0, [pc, #68]	; (80066ec <report_realtime_status+0x2e8>)
 80066a8:	f7fe f9ac 	bl	8004a04 <printString>
 80066ac:	e6e9      	b.n	8006482 <report_realtime_status+0x7e>
 80066ae:	bf00      	nop
 80066b0:	2000139c 	.word	0x2000139c
 80066b4:	20001378 	.word	0x20001378
 80066b8:	0800b0d8 	.word	0x0800b0d8
 80066bc:	20001834 	.word	0x20001834
 80066c0:	0800b0e0 	.word	0x0800b0e0
 80066c4:	0800b0f0 	.word	0x0800b0f0
 80066c8:	0800af10 	.word	0x0800af10
 80066cc:	20001288 	.word	0x20001288
 80066d0:	0800b108 	.word	0x0800b108
 80066d4:	0800b110 	.word	0x0800b110
 80066d8:	0800b114 	.word	0x0800b114
 80066dc:	0800b100 	.word	0x0800b100
 80066e0:	0800b0e8 	.word	0x0800b0e8
 80066e4:	0800b0f8 	.word	0x0800b0f8
 80066e8:	0800b0b4 	.word	0x0800b0b4
 80066ec:	0800b0a0 	.word	0x0800b0a0
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80066f0:	482c      	ldr	r0, [pc, #176]	; (80067a4 <report_realtime_status+0x3a0>)
 80066f2:	f7fe f987 	bl	8004a04 <printString>
 80066f6:	e6c4      	b.n	8006482 <report_realtime_status+0x7e>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80066f8:	482b      	ldr	r0, [pc, #172]	; (80067a8 <report_realtime_status+0x3a4>)
 80066fa:	f7fe f983 	bl	8004a04 <printString>
 80066fe:	e6c0      	b.n	8006482 <report_realtime_status+0x7e>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8006700:	482a      	ldr	r0, [pc, #168]	; (80067ac <report_realtime_status+0x3a8>)
 8006702:	f7fe f97f 	bl	8004a04 <printString>
 8006706:	e6bc      	b.n	8006482 <report_realtime_status+0x7e>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8006708:	4829      	ldr	r0, [pc, #164]	; (80067b0 <report_realtime_status+0x3ac>)
 800670a:	f7fe f97b 	bl	8004a04 <printString>
 800670e:	e6b8      	b.n	8006482 <report_realtime_status+0x7e>
    if (prb_pin_state) { serial_write('P'); }
 8006710:	2050      	movs	r0, #80	; 0x50
 8006712:	f000 f869 	bl	80067e8 <serial_write>
    if (lim_pin_state) {
 8006716:	2e00      	cmp	r6, #0
 8006718:	d0af      	beq.n	800667a <report_realtime_status+0x276>
 800671a:	e7a5      	b.n	8006668 <report_realtime_status+0x264>
        printPgmString(PSTR("|A:"));
 800671c:	4825      	ldr	r0, [pc, #148]	; (80067b4 <report_realtime_status+0x3b0>)
 800671e:	f7fe f971 	bl	8004a04 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8006722:	2d01      	cmp	r5, #1
 8006724:	d017      	beq.n	8006756 <report_realtime_status+0x352>
              else { serial_write('C'); } // CCW
 8006726:	2043      	movs	r0, #67	; 0x43
 8006728:	f000 f85e 	bl	80067e8 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800672c:	07e2      	lsls	r2, r4, #31
 800672e:	f57f af38 	bpl.w	80065a2 <report_realtime_status+0x19e>
 8006732:	2046      	movs	r0, #70	; 0x46
 8006734:	f000 f858 	bl	80067e8 <serial_write>
 8006738:	e733      	b.n	80065a2 <report_realtime_status+0x19e>
    printPgmString(PSTR("Door:"));
 800673a:	481f      	ldr	r0, [pc, #124]	; (80067b8 <report_realtime_status+0x3b4>)
 800673c:	f7fe f962 	bl	8004a04 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8006740:	78a3      	ldrb	r3, [r4, #2]
 8006742:	071f      	lsls	r7, r3, #28
 8006744:	d429      	bmi.n	800679a <report_realtime_status+0x396>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006746:	075e      	lsls	r6, r3, #29
 8006748:	d523      	bpl.n	8006792 <report_realtime_status+0x38e>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 800674a:	069d      	lsls	r5, r3, #26
 800674c:	d51d      	bpl.n	800678a <report_realtime_status+0x386>
      else { serial_write('1'); } // Actively holding
 800674e:	2031      	movs	r0, #49	; 0x31
 8006750:	f000 f84a 	bl	80067e8 <serial_write>
 8006754:	e695      	b.n	8006482 <report_realtime_status+0x7e>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8006756:	2053      	movs	r0, #83	; 0x53
 8006758:	f000 f846 	bl	80067e8 <serial_write>
 800675c:	e71e      	b.n	800659c <report_realtime_status+0x198>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800675e:	2059      	movs	r0, #89	; 0x59
 8006760:	f000 f842 	bl	80067e8 <serial_write>
 8006764:	e784      	b.n	8006670 <report_realtime_status+0x26c>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8006766:	2058      	movs	r0, #88	; 0x58
 8006768:	f000 f83e 	bl	80067e8 <serial_write>
 800676c:	e77e      	b.n	800666c <report_realtime_status+0x268>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800676e:	2048      	movs	r0, #72	; 0x48
 8006770:	f000 f83a 	bl	80067e8 <serial_write>
 8006774:	e788      	b.n	8006688 <report_realtime_status+0x284>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8006776:	2052      	movs	r0, #82	; 0x52
 8006778:	f000 f836 	bl	80067e8 <serial_write>
 800677c:	e782      	b.n	8006684 <report_realtime_status+0x280>
      printPgmString(PSTR("Hold:"));
 800677e:	480f      	ldr	r0, [pc, #60]	; (80067bc <report_realtime_status+0x3b8>)
 8006780:	f7fe f940 	bl	8004a04 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8006784:	78a3      	ldrb	r3, [r4, #2]
 8006786:	07db      	lsls	r3, r3, #31
 8006788:	d5e1      	bpl.n	800674e <report_realtime_status+0x34a>
 800678a:	2030      	movs	r0, #48	; 0x30
 800678c:	f000 f82c 	bl	80067e8 <serial_write>
 8006790:	e677      	b.n	8006482 <report_realtime_status+0x7e>
        serial_write('2'); // Retracting
 8006792:	2032      	movs	r0, #50	; 0x32
 8006794:	f000 f828 	bl	80067e8 <serial_write>
 8006798:	e673      	b.n	8006482 <report_realtime_status+0x7e>
      serial_write('3'); // Restoring
 800679a:	2033      	movs	r0, #51	; 0x33
 800679c:	f000 f824 	bl	80067e8 <serial_write>
 80067a0:	e66f      	b.n	8006482 <report_realtime_status+0x7e>
 80067a2:	bf00      	nop
 80067a4:	0800b0c0 	.word	0x0800b0c0
 80067a8:	0800b0c8 	.word	0x0800b0c8
 80067ac:	0800b0b8 	.word	0x0800b0b8
 80067b0:	0800b0a8 	.word	0x0800b0a8
 80067b4:	0800b110 	.word	0x0800b110
 80067b8:	0800b0d0 	.word	0x0800b0d0
 80067bc:	0800b0ac 	.word	0x0800b0ac

080067c0 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80067c0:	4a06      	ldr	r2, [pc, #24]	; (80067dc <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80067c4:	7811      	ldrb	r1, [r2, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80067c6:	781a      	ldrb	r2, [r3, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80067c8:	b2cb      	uxtb	r3, r1
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80067ca:	428a      	cmp	r2, r1
 80067cc:	bf2c      	ite	cs
 80067ce:	1e98      	subcs	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 80067d0:	f103 30ff 	addcc.w	r0, r3, #4294967295
 80067d4:	1a80      	subs	r0, r0, r2
 80067d6:	b2c0      	uxtb	r0, r0
}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000cf9 	.word	0x20000cf9
 80067e0:	20000cf8 	.word	0x20000cf8

080067e4 <serial_init>:
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 80067e8:	4601      	mov	r1, r0
 80067ea:	b508      	push	{r3, lr}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
  #ifdef STM32F103C8
//#ifndef aUSEUSB
	USART_SendData(USART1, data);
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <serial_write+0x14>)
 80067ee:	f7fa ff75 	bl	80016dc <USART_SendData>
	while (!(USART1->SR & USART_FLAG_TXE));
 80067f2:	4a02      	ldr	r2, [pc, #8]	; (80067fc <serial_write+0x14>)
 80067f4:	8813      	ldrh	r3, [r2, #0]
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	d5fc      	bpl.n	80067f4 <serial_write+0xc>

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 80067fa:	bd08      	pop	{r3, pc}
 80067fc:	40013800 	.word	0x40013800

08006800 <serial_read>:

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
  if (serial_rx_buffer_head == tail) {
 8006800:	4908      	ldr	r1, [pc, #32]	; (8006824 <serial_read+0x24>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <serial_read+0x28>)
  if (serial_rx_buffer_head == tail) {
 8006804:	7808      	ldrb	r0, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006806:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 8006808:	4298      	cmp	r0, r3
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800680a:	b2d9      	uxtb	r1, r3
  if (serial_rx_buffer_head == tail) {
 800680c:	d008      	beq.n	8006820 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 800680e:	1c4b      	adds	r3, r1, #1
 8006810:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8006812:	2bfe      	cmp	r3, #254	; 0xfe
 8006814:	bf08      	it	eq
 8006816:	2300      	moveq	r3, #0
    uint8_t data = serial_rx_buffer[tail];
 8006818:	4804      	ldr	r0, [pc, #16]	; (800682c <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 800681a:	7013      	strb	r3, [r2, #0]
    uint8_t data = serial_rx_buffer[tail];
 800681c:	5c40      	ldrb	r0, [r0, r1]

    return data;
 800681e:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8006820:	20ff      	movs	r0, #255	; 0xff
  }
}
 8006822:	4770      	bx	lr
 8006824:	20000cf8 	.word	0x20000cf8
 8006828:	20000cf9 	.word	0x20000cf9
 800682c:	20001734 	.word	0x20001734

08006830 <USART1_IRQHandler>:
/*----------------------------------------------------------------------------
  USART1_IRQHandler
  Handles USART1 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART1_IRQHandler (void) 
{
 8006830:	b510      	push	{r4, lr}
    volatile unsigned int IIR;
    uint8_t data;
    IIR = USART1->SR;
 8006832:	4a67      	ldr	r2, [pc, #412]	; (80069d0 <USART1_IRQHandler+0x1a0>)
{
 8006834:	b082      	sub	sp, #8
    IIR = USART1->SR;
 8006836:	8813      	ldrh	r3, [r2, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	9301      	str	r3, [sp, #4]
    if (IIR & USART_FLAG_RXNE) 
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	0699      	lsls	r1, r3, #26
 8006840:	d401      	bmi.n	8006846 <USART1_IRQHandler+0x16>
    {                  // read interrupt
        data = USART1->DR & 0x1FF;
        storeHandleDataIn(data);
        USART1->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
    }
}
 8006842:	b002      	add	sp, #8
 8006844:	bd10      	pop	{r4, pc}
        data = USART1->DR & 0x1FF;
 8006846:	8892      	ldrh	r2, [r2, #4]
 8006848:	b2d3      	uxtb	r3, r2
	switch (data) {
 800684a:	2b3f      	cmp	r3, #63	; 0x3f
        data = USART1->DR & 0x1FF;
 800684c:	b292      	uxth	r2, r2
	switch (data) {
 800684e:	d019      	beq.n	8006884 <USART1_IRQHandler+0x54>
 8006850:	d80f      	bhi.n	8006872 <USART1_IRQHandler+0x42>
 8006852:	2b18      	cmp	r3, #24
 8006854:	d013      	beq.n	800687e <USART1_IRQHandler+0x4e>
 8006856:	2b21      	cmp	r3, #33	; 0x21
 8006858:	d118      	bne.n	800688c <USART1_IRQHandler+0x5c>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 800685a:	2008      	movs	r0, #8
 800685c:	f002 f80c 	bl	8008878 <system_set_exec_state_flag>
        USART1->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 8006860:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <USART1_IRQHandler+0x1a0>)
 8006862:	8813      	ldrh	r3, [r2, #0]
 8006864:	f023 0320 	bic.w	r3, r3, #32
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	8013      	strh	r3, [r2, #0]
}
 800686e:	b002      	add	sp, #8
 8006870:	bd10      	pop	{r4, pc}
	switch (data) {
 8006872:	2b7e      	cmp	r3, #126	; 0x7e
 8006874:	d10a      	bne.n	800688c <USART1_IRQHandler+0x5c>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8006876:	2002      	movs	r0, #2
 8006878:	f001 fffe 	bl	8008878 <system_set_exec_state_flag>
 800687c:	e7f0      	b.n	8006860 <USART1_IRQHandler+0x30>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 800687e:	f7fd fa83 	bl	8003d88 <mc_reset>
 8006882:	e7ed      	b.n	8006860 <USART1_IRQHandler+0x30>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8006884:	2001      	movs	r0, #1
 8006886:	f001 fff7 	bl	8008878 <system_set_exec_state_flag>
 800688a:	e7e9      	b.n	8006860 <USART1_IRQHandler+0x30>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 800688c:	0612      	lsls	r2, r2, #24
 800688e:	d40e      	bmi.n	80068ae <USART1_IRQHandler+0x7e>
        next_head = serial_rx_buffer_head + 1;
 8006890:	4850      	ldr	r0, [pc, #320]	; (80069d4 <USART1_IRQHandler+0x1a4>)
        if (next_head != serial_rx_buffer_tail) {
 8006892:	4a51      	ldr	r2, [pc, #324]	; (80069d8 <USART1_IRQHandler+0x1a8>)
        next_head = serial_rx_buffer_head + 1;
 8006894:	7801      	ldrb	r1, [r0, #0]
        if (next_head != serial_rx_buffer_tail) {
 8006896:	7814      	ldrb	r4, [r2, #0]
        next_head = serial_rx_buffer_head + 1;
 8006898:	1c4a      	adds	r2, r1, #1
 800689a:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 800689c:	2afe      	cmp	r2, #254	; 0xfe
 800689e:	bf08      	it	eq
 80068a0:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 80068a2:	4294      	cmp	r4, r2
 80068a4:	d0dc      	beq.n	8006860 <USART1_IRQHandler+0x30>
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80068a6:	4c4d      	ldr	r4, [pc, #308]	; (80069dc <USART1_IRQHandler+0x1ac>)
          serial_rx_buffer_head = next_head;
 80068a8:	7002      	strb	r2, [r0, #0]
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80068aa:	5463      	strb	r3, [r4, r1]
          serial_rx_buffer_head = next_head;
 80068ac:	e7d8      	b.n	8006860 <USART1_IRQHandler+0x30>
        switch(data) {
 80068ae:	3b84      	subs	r3, #132	; 0x84
 80068b0:	2b1d      	cmp	r3, #29
 80068b2:	d8d5      	bhi.n	8006860 <USART1_IRQHandler+0x30>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USART1_IRQHandler+0x8c>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080069c7 	.word	0x080069c7
 80068c0:	080069b5 	.word	0x080069b5
 80068c4:	08006861 	.word	0x08006861
 80068c8:	08006861 	.word	0x08006861
 80068cc:	08006861 	.word	0x08006861
 80068d0:	08006861 	.word	0x08006861
 80068d4:	08006861 	.word	0x08006861
 80068d8:	08006861 	.word	0x08006861
 80068dc:	08006861 	.word	0x08006861
 80068e0:	08006861 	.word	0x08006861
 80068e4:	08006861 	.word	0x08006861
 80068e8:	08006861 	.word	0x08006861
 80068ec:	080069ad 	.word	0x080069ad
 80068f0:	080069a5 	.word	0x080069a5
 80068f4:	0800699d 	.word	0x0800699d
 80068f8:	08006995 	.word	0x08006995
 80068fc:	0800698d 	.word	0x0800698d
 8006900:	08006985 	.word	0x08006985
 8006904:	0800697d 	.word	0x0800697d
 8006908:	08006975 	.word	0x08006975
 800690c:	08006861 	.word	0x08006861
 8006910:	0800696d 	.word	0x0800696d
 8006914:	08006965 	.word	0x08006965
 8006918:	0800695d 	.word	0x0800695d
 800691c:	08006955 	.word	0x08006955
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006945 	.word	0x08006945
 8006928:	08006861 	.word	0x08006861
 800692c:	0800693d 	.word	0x0800693d
 8006930:	08006935 	.word	0x08006935
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8006934:	2080      	movs	r0, #128	; 0x80
 8006936:	f001 ffcd 	bl	80088d4 <system_set_exec_accessory_override_flag>
 800693a:	e791      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 800693c:	2040      	movs	r0, #64	; 0x40
 800693e:	f001 ffc9 	bl	80088d4 <system_set_exec_accessory_override_flag>
 8006942:	e78d      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8006944:	2020      	movs	r0, #32
 8006946:	f001 ffc5 	bl	80088d4 <system_set_exec_accessory_override_flag>
 800694a:	e789      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 800694c:	2010      	movs	r0, #16
 800694e:	f001 ffc1 	bl	80088d4 <system_set_exec_accessory_override_flag>
 8006952:	e785      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8006954:	2008      	movs	r0, #8
 8006956:	f001 ffbd 	bl	80088d4 <system_set_exec_accessory_override_flag>
 800695a:	e781      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 800695c:	2004      	movs	r0, #4
 800695e:	f001 ffb9 	bl	80088d4 <system_set_exec_accessory_override_flag>
 8006962:	e77d      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8006964:	2002      	movs	r0, #2
 8006966:	f001 ffb5 	bl	80088d4 <system_set_exec_accessory_override_flag>
 800696a:	e779      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 800696c:	2001      	movs	r0, #1
 800696e:	f001 ffb1 	bl	80088d4 <system_set_exec_accessory_override_flag>
 8006972:	e775      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8006974:	2080      	movs	r0, #128	; 0x80
 8006976:	f001 ffa3 	bl	80088c0 <system_set_exec_motion_override_flag>
 800697a:	e771      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 800697c:	2040      	movs	r0, #64	; 0x40
 800697e:	f001 ff9f 	bl	80088c0 <system_set_exec_motion_override_flag>
 8006982:	e76d      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8006984:	2020      	movs	r0, #32
 8006986:	f001 ff9b 	bl	80088c0 <system_set_exec_motion_override_flag>
 800698a:	e769      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 800698c:	2010      	movs	r0, #16
 800698e:	f001 ff97 	bl	80088c0 <system_set_exec_motion_override_flag>
 8006992:	e765      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8006994:	2008      	movs	r0, #8
 8006996:	f001 ff93 	bl	80088c0 <system_set_exec_motion_override_flag>
 800699a:	e761      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 800699c:	2004      	movs	r0, #4
 800699e:	f001 ff8f 	bl	80088c0 <system_set_exec_motion_override_flag>
 80069a2:	e75d      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80069a4:	2002      	movs	r0, #2
 80069a6:	f001 ff8b 	bl	80088c0 <system_set_exec_motion_override_flag>
 80069aa:	e759      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80069ac:	2001      	movs	r0, #1
 80069ae:	f001 ff87 	bl	80088c0 <system_set_exec_motion_override_flag>
 80069b2:	e755      	b.n	8006860 <USART1_IRQHandler+0x30>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <USART1_IRQHandler+0x1b0>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	069b      	lsls	r3, r3, #26
 80069ba:	f57f af51 	bpl.w	8006860 <USART1_IRQHandler+0x30>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 80069be:	2040      	movs	r0, #64	; 0x40
 80069c0:	f001 ff5a 	bl	8008878 <system_set_exec_state_flag>
 80069c4:	e74c      	b.n	8006860 <USART1_IRQHandler+0x30>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80069c6:	2020      	movs	r0, #32
 80069c8:	f001 ff56 	bl	8008878 <system_set_exec_state_flag>
 80069cc:	e748      	b.n	8006860 <USART1_IRQHandler+0x30>
 80069ce:	bf00      	nop
 80069d0:	40013800 	.word	0x40013800
 80069d4:	20000cf8 	.word	0x20000cf8
 80069d8:	20000cf9 	.word	0x20000cf9
 80069dc:	20001734 	.word	0x20001734
 80069e0:	20001378 	.word	0x20001378

080069e4 <serial_reset_read_buffer>:
#endif  // end of STM32STM32F103C8


void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 80069e4:	4a02      	ldr	r2, [pc, #8]	; (80069f0 <serial_reset_read_buffer+0xc>)
 80069e6:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <serial_reset_read_buffer+0x10>)
 80069e8:	7812      	ldrb	r2, [r2, #0]
 80069ea:	701a      	strb	r2, [r3, #0]
}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000cf8 	.word	0x20000cf8
 80069f4:	20000cf9 	.word	0x20000cf9

080069f8 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4604      	mov	r4, r0
 80069fc:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80069fe:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8006a02:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8006a06:	f7fe ff31 	bl	800586c <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8006a10:	2250      	movs	r2, #80	; 0x50
}
 8006a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006a16:	f7fa bf27 	b.w	8001868 <memcpy_to_eeprom_with_checksum>
 8006a1a:	bf00      	nop

08006a1c <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 8006a1c:	4601      	mov	r1, r0
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006a1e:	2250      	movs	r2, #80	; 0x50
 8006a20:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8006a24:	f7fa bf20 	b.w	8001868 <memcpy_to_eeprom_with_checksum>

08006a28 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8006a2e:	f7fe ff1d 	bl	800586c <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8006a32:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8006a36:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006a3a:	4629      	mov	r1, r5
}
 8006a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006a40:	220c      	movs	r2, #12
 8006a42:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006a46:	f7fa bf0f 	b.w	8001868 <memcpy_to_eeprom_with_checksum>
 8006a4a:	bf00      	nop

08006a4c <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006a50:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 8006a52:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006a54:	d407      	bmi.n	8006a66 <settings_restore+0x1a>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006a56:	07a9      	lsls	r1, r5, #30
 8006a58:	d441      	bmi.n	8006ade <settings_restore+0x92>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006a5a:	076a      	lsls	r2, r5, #29
 8006a5c:	d452      	bmi.n	8006b04 <settings_restore+0xb8>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8006a5e:	072b      	lsls	r3, r5, #28
 8006a60:	d466      	bmi.n	8006b30 <settings_restore+0xe4>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
  }
}
 8006a62:	b005      	add	sp, #20
 8006a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8006a66:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006a6a:	4c37      	ldr	r4, [pc, #220]	; (8006b48 <settings_restore+0xfc>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8006a6c:	211f      	movs	r1, #31
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8006a6e:	f8c4 2032 	str.w	r2, [r4, #50]	; 0x32
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8006a72:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006a76:	65a2      	str	r2, [r4, #88]	; 0x58
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006a78:	4a34      	ldr	r2, [pc, #208]	; (8006b4c <settings_restore+0x100>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006a7a:	26fa      	movs	r6, #250	; 0xfa
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8006a7c:	2344      	movs	r3, #68	; 0x44
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006a7e:	63e2      	str	r2, [r4, #60]	; 0x3c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006a80:	2200      	movs	r2, #0
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8006a82:	2000      	movs	r0, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006a84:	2706      	movs	r7, #6
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8006a86:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8006a8a:	4931      	ldr	r1, [pc, #196]	; (8006b50 <settings_restore+0x104>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006a8c:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8006a90:	64e1      	str	r1, [r4, #76]	; 0x4c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8006a92:	4930      	ldr	r1, [pc, #192]	; (8006b54 <settings_restore+0x108>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8006a94:	4e30      	ldr	r6, [pc, #192]	; (8006b58 <settings_restore+0x10c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8006a96:	6521      	str	r1, [r4, #80]	; 0x50
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006a98:	4930      	ldr	r1, [pc, #192]	; (8006b5c <settings_restore+0x110>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006a9a:	6462      	str	r2, [r4, #68]	; 0x44
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006a9c:	63a1      	str	r1, [r4, #56]	; 0x38
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8006a9e:	4930      	ldr	r1, [pc, #192]	; (8006b60 <settings_restore+0x114>)
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006aa0:	4a30      	ldr	r2, [pc, #192]	; (8006b64 <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8006aa2:	6421      	str	r1, [r4, #64]	; 0x40
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8006aa4:	4930      	ldr	r1, [pc, #192]	; (8006b68 <settings_restore+0x11c>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8006aa6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006aaa:	4b30      	ldr	r3, [pc, #192]	; (8006b6c <settings_restore+0x120>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8006aac:	86e0      	strh	r0, [r4, #54]	; 0x36
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8006aae:	60e1      	str	r1, [r4, #12]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8006ab0:	6121      	str	r1, [r4, #16]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8006ab2:	6161      	str	r1, [r4, #20]
  eeprom_put_char(0, SETTINGS_VERSION);
 8006ab4:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006ab6:	61a2      	str	r2, [r4, #24]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8006ab8:	61e2      	str	r2, [r4, #28]
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8006aba:	6222      	str	r2, [r4, #32]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006abc:	6263      	str	r3, [r4, #36]	; 0x24
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8006abe:	62a3      	str	r3, [r4, #40]	; 0x28
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8006ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006ac2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8006ac6:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8006ac8:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8006aca:	60a6      	str	r6, [r4, #8]
  eeprom_put_char(0, SETTINGS_VERSION);
 8006acc:	f7fa fec6 	bl	800185c <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	225c      	movs	r2, #92	; 0x5c
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f7fa fec7 	bl	8001868 <memcpy_to_eeprom_with_checksum>
  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006ada:	07a9      	lsls	r1, r5, #30
 8006adc:	d5bd      	bpl.n	8006a5a <settings_restore+0xe>
    memset(&coord_data, 0, sizeof(coord_data));
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006ae4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006ae8:	9303      	str	r3, [sp, #12]
    protocol_buffer_synchronize();
 8006aea:	f7fe febf 	bl	800586c <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006aee:	4620      	mov	r0, r4
 8006af0:	220c      	movs	r2, #12
 8006af2:	a901      	add	r1, sp, #4
 8006af4:	340d      	adds	r4, #13
 8006af6:	f7fa feb7 	bl	8001868 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8006afa:	f5b4 7f1a 	cmp.w	r4, #616	; 0x268
 8006afe:	d1f4      	bne.n	8006aea <settings_restore+0x9e>
  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006b00:	076a      	lsls	r2, r5, #29
 8006b02:	d5ac      	bpl.n	8006a5e <settings_restore+0x12>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8006b04:	2100      	movs	r1, #0
 8006b06:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006b0a:	f7fa fea7 	bl	800185c <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f240 3001 	movw	r0, #769	; 0x301
 8006b14:	f7fa fea2 	bl	800185c <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f240 3051 	movw	r0, #849	; 0x351
 8006b1e:	f7fa fe9d 	bl	800185c <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8006b22:	2100      	movs	r1, #0
 8006b24:	f240 3052 	movw	r0, #850	; 0x352
 8006b28:	f7fa fe98 	bl	800185c <eeprom_put_char>
  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8006b2c:	072b      	lsls	r3, r5, #28
 8006b2e:	d598      	bpl.n	8006a62 <settings_restore+0x16>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8006b30:	2100      	movs	r1, #0
 8006b32:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8006b36:	f7fa fe91 	bl	800185c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	f240 30c1 	movw	r0, #961	; 0x3c1
 8006b40:	f7fa fe8c 	bl	800185c <eeprom_put_char>
}
 8006b44:	b005      	add	sp, #20
 8006b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b48:	20001834 	.word	0x20001834
 8006b4c:	3b03126f 	.word	0x3b03126f
 8006b50:	41200000 	.word	0x41200000
 8006b54:	42c80000 	.word	0x42c80000
 8006b58:	45a00000 	.word	0x45a00000
 8006b5c:	3c23d70a 	.word	0x3c23d70a
 8006b60:	447a0000 	.word	0x447a0000
 8006b64:	4bdbba00 	.word	0x4bdbba00
 8006b68:	44fa0000 	.word	0x44fa0000
 8006b6c:	c38c0000 	.word	0xc38c0000

08006b70 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8006b74:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006b78:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006b7c:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8006b80:	4621      	mov	r1, r4
 8006b82:	4630      	mov	r0, r6
 8006b84:	2250      	movs	r2, #80	; 0x50
 8006b86:	f7fa febd 	bl	8001904 <memcpy_from_eeprom_with_checksum>
 8006b8a:	b108      	cbz	r0, 8006b90 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8006b8c:	2001      	movs	r0, #1
}
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 8006b92:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8006b94:	f7fe fe6a 	bl	800586c <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006b98:	4620      	mov	r0, r4
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	2250      	movs	r2, #80	; 0x50
 8006b9e:	f7fa fe63 	bl	8001868 <memcpy_to_eeprom_with_checksum>
    return(false);
 8006ba2:	4628      	mov	r0, r5
}
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
 8006ba6:	bf00      	nop

08006ba8 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8006ba8:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8006baa:	2250      	movs	r2, #80	; 0x50
 8006bac:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8006bb0:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8006bb2:	f7fa fea7 	bl	8001904 <memcpy_from_eeprom_with_checksum>
 8006bb6:	b108      	cbz	r0, 8006bbc <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8006bb8:	2001      	movs	r0, #1
}
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 8006bbe:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	2250      	movs	r2, #80	; 0x50
 8006bc4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8006bc8:	f7fa fe4e 	bl	8001868 <memcpy_to_eeprom_with_checksum>
    return(false);
 8006bcc:	4620      	mov	r0, r4
}
 8006bce:	bd38      	pop	{r3, r4, r5, pc}

08006bd0 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8006bd4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8006bd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8006bdc:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8006be0:	4621      	mov	r1, r4
 8006be2:	4630      	mov	r0, r6
 8006be4:	220c      	movs	r2, #12
 8006be6:	f7fa fe8d 	bl	8001904 <memcpy_from_eeprom_with_checksum>
 8006bea:	b108      	cbz	r0, 8006bf0 <settings_read_coord_data+0x20>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8006bec:	2001      	movs	r0, #1
}
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 8006bf6:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8006bf8:	60b3      	str	r3, [r6, #8]
    protocol_buffer_synchronize();
 8006bfa:	f7fe fe37 	bl	800586c <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4631      	mov	r1, r6
 8006c02:	220c      	movs	r2, #12
 8006c04:	f7fa fe30 	bl	8001868 <memcpy_to_eeprom_with_checksum>
    return(false);
 8006c08:	4628      	mov	r0, r5
}
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}

08006c0c <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	460d      	mov	r5, r1
 8006c10:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8006c12:	2100      	movs	r1, #0
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7f9 ffdb 	bl	8000bd0 <__aeabi_fcmplt>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d16c      	bne.n	8006cf8 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8006c1e:	2c63      	cmp	r4, #99	; 0x63
 8006c20:	d91e      	bls.n	8006c60 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8006c22:	f1a4 0264 	sub.w	r2, r4, #100	; 0x64
 8006c26:	b2d2      	uxtb	r2, r2
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8006c28:	2a02      	cmp	r2, #2
 8006c2a:	f240 8114 	bls.w	8006e56 <settings_store_global_setting+0x24a>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006c2e:	2a09      	cmp	r2, #9
 8006c30:	d914      	bls.n	8006c5c <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006c32:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 8006c36:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	f240 80fe 	bls.w	8006e3a <settings_store_global_setting+0x22e>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d90c      	bls.n	8006c5c <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006c42:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8006c46:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f240 80fb 	bls.w	8006e44 <settings_store_global_setting+0x238>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d904      	bls.n	8006c5c <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006c52:	347e      	adds	r4, #126	; 0x7e
 8006c54:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 8006c56:	2c02      	cmp	r4, #2
 8006c58:	f240 8101 	bls.w	8006e5e <settings_store_global_setting+0x252>
      }
    }
  } else {
    // Store non-axis Grbl settings
    uint8_t int_value = truncf(value);
 8006c5c:	2003      	movs	r0, #3
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
  return(STATUS_OK);
}
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7fa f819 	bl	8000c98 <__aeabi_f2uiz>
 8006c66:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8006c68:	2c20      	cmp	r4, #32
 8006c6a:	d8f7      	bhi.n	8006c5c <settings_store_global_setting+0x50>
 8006c6c:	a301      	add	r3, pc, #4	; (adr r3, 8006c74 <settings_store_global_setting+0x68>)
 8006c6e:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006d27 	.word	0x08006d27
 8006c78:	08006d35 	.word	0x08006d35
 8006c7c:	08006d5d 	.word	0x08006d5d
 8006c80:	08006d3d 	.word	0x08006d3d
 8006c84:	08006d47 	.word	0x08006d47
 8006c88:	08006d67 	.word	0x08006d67
 8006c8c:	08006d7d 	.word	0x08006d7d
 8006c90:	08006c5d 	.word	0x08006c5d
 8006c94:	08006c5d 	.word	0x08006c5d
 8006c98:	08006c5d 	.word	0x08006c5d
 8006c9c:	08006de7 	.word	0x08006de7
 8006ca0:	08006def 	.word	0x08006def
 8006ca4:	08006dab 	.word	0x08006dab
 8006ca8:	08006e25 	.word	0x08006e25
 8006cac:	08006c5d 	.word	0x08006c5d
 8006cb0:	08006c5d 	.word	0x08006c5d
 8006cb4:	08006c5d 	.word	0x08006c5d
 8006cb8:	08006c5d 	.word	0x08006c5d
 8006cbc:	08006c5d 	.word	0x08006c5d
 8006cc0:	08006c5d 	.word	0x08006c5d
 8006cc4:	08006df5 	.word	0x08006df5
 8006cc8:	08006e0d 	.word	0x08006e0d
 8006ccc:	08006d97 	.word	0x08006d97
 8006cd0:	08006ddf 	.word	0x08006ddf
 8006cd4:	08006dd3 	.word	0x08006dd3
 8006cd8:	08006dd9 	.word	0x08006dd9
 8006cdc:	08006db1 	.word	0x08006db1
 8006ce0:	08006db9 	.word	0x08006db9
 8006ce4:	08006c5d 	.word	0x08006c5d
 8006ce8:	08006c5d 	.word	0x08006c5d
 8006cec:	08006dbf 	.word	0x08006dbf
 8006cf0:	08006dc9 	.word	0x08006dc9
 8006cf4:	08006cfd 	.word	0x08006cfd
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8006cf8:	2004      	movs	r0, #4
}
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8006cfc:	4a6e      	ldr	r2, [pc, #440]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006cfe:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f000 80b2 	beq.w	8006e6c <settings_store_global_setting+0x260>
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
  eeprom_put_char(0, SETTINGS_VERSION);
 8006d10:	210a      	movs	r1, #10
 8006d12:	2000      	movs	r0, #0
 8006d14:	f7fa fda2 	bl	800185c <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8006d18:	225c      	movs	r2, #92	; 0x5c
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	4966      	ldr	r1, [pc, #408]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d1e:	f7fa fda3 	bl	8001868 <memcpy_to_eeprom_with_checksum>
  return(STATUS_OK);
 8006d22:	2000      	movs	r0, #0
}
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8006d26:	2802      	cmp	r0, #2
 8006d28:	f240 80c2 	bls.w	8006eb0 <settings_store_global_setting+0x2a4>
        settings.pulse_microseconds = int_value; break;
 8006d2c:	4b62      	ldr	r3, [pc, #392]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d2e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
 8006d32:	e7ed      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8006d34:	4b60      	ldr	r3, [pc, #384]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d36:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 8006d3a:	e7e9      	b.n	8006d10 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8006d3c:	4b5e      	ldr	r3, [pc, #376]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d3e:	8698      	strh	r0, [r3, #52]	; 0x34
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8006d40:	f000 fcbc 	bl	80076bc <st_generate_step_dir_invert_masks>
        break;
 8006d44:	e7e4      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8006d46:	4a5c      	ldr	r2, [pc, #368]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d48:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f000 809d 	beq.w	8006e8c <settings_store_global_setting+0x280>
 8006d52:	f043 0304 	orr.w	r3, r3, #4
 8006d56:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006d5a:	e7d9      	b.n	8006d10 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8006d5c:	4b56      	ldr	r3, [pc, #344]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d5e:	8658      	strh	r0, [r3, #50]	; 0x32
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8006d60:	f000 fcac 	bl	80076bc <st_generate_step_dir_invert_masks>
        break;
 8006d64:	e7d4      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8006d66:	4a54      	ldr	r2, [pc, #336]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d68:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f000 8088 	beq.w	8006e82 <settings_store_global_setting+0x276>
 8006d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d76:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006d7a:	e7c9      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006d7c:	4b4e      	ldr	r3, [pc, #312]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d7e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d07a      	beq.n	8006e7c <settings_store_global_setting+0x270>
 8006d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006d90:	f7fe f942 	bl	8005018 <probe_configure_invert_mask>
        break;
 8006d94:	e7bc      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8006d96:	4a48      	ldr	r2, [pc, #288]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006d98:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d07f      	beq.n	8006ea0 <settings_store_global_setting+0x294>
 8006da0:	f043 0310 	orr.w	r3, r3, #16
 8006da4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006da8:	e7b2      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8006daa:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dac:	63dd      	str	r5, [r3, #60]	; 0x3c
 8006dae:	e7af      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006db2:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
 8006db6:	e7ab      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8006db8:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dba:	659d      	str	r5, [r3, #88]	; 0x58
 8006dbc:	e7a8      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006dbe:	4b3e      	ldr	r3, [pc, #248]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dc0:	641d      	str	r5, [r3, #64]	; 0x40
 8006dc2:	f000 f897 	bl	8006ef4 <spindle_init>
 8006dc6:	e7a3      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006dc8:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dca:	645d      	str	r5, [r3, #68]	; 0x44
 8006dcc:	f000 f892 	bl	8006ef4 <spindle_init>
 8006dd0:	e79e      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dd4:	64dd      	str	r5, [r3, #76]	; 0x4c
 8006dd6:	e79b      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8006dd8:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006dda:	651d      	str	r5, [r3, #80]	; 0x50
 8006ddc:	e798      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006de0:	f8a3 004a 	strh.w	r0, [r3, #74]	; 0x4a
 8006de4:	e794      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8006de6:	4b34      	ldr	r3, [pc, #208]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006de8:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
 8006dec:	e790      	b.n	8006d10 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8006dee:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006df0:	639d      	str	r5, [r3, #56]	; 0x38
 8006df2:	e78d      	b.n	8006d10 <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006df4:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006df6:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
        if (int_value) {
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d04b      	beq.n	8006e96 <settings_store_global_setting+0x28a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006dfe:	06d9      	lsls	r1, r3, #27
 8006e00:	d558      	bpl.n	8006eb4 <settings_store_global_setting+0x2a8>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8006e02:	f043 0320 	orr.w	r3, r3, #32
 8006e06:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006e0a:	e781      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e0e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d049      	beq.n	8006eaa <settings_store_global_setting+0x29e>
 8006e16:	f042 0208 	orr.w	r2, r2, #8
 8006e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8006e1e:	f7fb ff7b 	bl	8002d18 <limits_init>
        break;
 8006e22:	e775      	b.n	8006d10 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e2a:	b320      	cbz	r0, 8006e76 <settings_store_global_setting+0x26a>
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8006e34:	f001 fccc 	bl	80087d0 <system_flag_wco_change>
        break;
 8006e38:	e76a      	b.n	8006d10 <settings_store_global_setting+0x104>
            settings.max_rate[parameter] = value;
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e40:	60dd      	str	r5, [r3, #12]
            break;
 8006e42:	e765      	b.n	8006d10 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8006e44:	4628      	mov	r0, r5
 8006e46:	491d      	ldr	r1, [pc, #116]	; (8006ebc <settings_store_global_setting+0x2b0>)
 8006e48:	1d9c      	adds	r4, r3, #6
 8006e4a:	f7f9 fd23 	bl	8000894 <__aeabi_fmul>
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e54:	e75c      	b.n	8006d10 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8006e56:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
            break;
 8006e5c:	e758      	b.n	8006d10 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8006e5e:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <settings_store_global_setting+0x2ac>)
 8006e60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e64:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006e68:	6263      	str	r3, [r4, #36]	; 0x24
 8006e6a:	e751      	b.n	8006d10 <settings_store_global_setting+0x104>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8006e6c:	f023 0302 	bic.w	r3, r3, #2
 8006e70:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006e74:	e74c      	b.n	8006d10 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8006e76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e7a:	e7d9      	b.n	8006e30 <settings_store_global_setting+0x224>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006e7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e80:	e783      	b.n	8006d8a <settings_store_global_setting+0x17e>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8006e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e86:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006e8a:	e741      	b.n	8006d10 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8006e8c:	f023 0304 	bic.w	r3, r3, #4
 8006e90:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006e94:	e73c      	b.n	8006d10 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8006e96:	f023 0320 	bic.w	r3, r3, #32
 8006e9a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006e9e:	e737      	b.n	8006d10 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8006ea0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006ea4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006ea8:	e732      	b.n	8006d10 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8006eaa:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8006eae:	e7b4      	b.n	8006e1a <settings_store_global_setting+0x20e>
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8006eb0:	2006      	movs	r0, #6
}
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006eb4:	200a      	movs	r0, #10
}
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20001834 	.word	0x20001834
 8006ebc:	45610000 	.word	0x45610000

08006ec0 <settings_init>:
  uint8_t version = eeprom_get_char(0);
 8006ec0:	2000      	movs	r0, #0


// Initialize the config subsystem
void settings_init() {
 8006ec2:	b508      	push	{r3, lr}
  uint8_t version = eeprom_get_char(0);
 8006ec4:	f7fa fcc4 	bl	8001850 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8006ec8:	280a      	cmp	r0, #10
 8006eca:	d009      	beq.n	8006ee0 <settings_init+0x20>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8006ecc:	2007      	movs	r0, #7
 8006ece:	f7fe fdcb 	bl	8005a68 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 8006ed2:	20ff      	movs	r0, #255	; 0xff
 8006ed4:	f7ff fdba 	bl	8006a4c <settings_restore>
    report_grbl_settings();
  }
}
 8006ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_grbl_settings();
 8006edc:	f7fe be6a 	b.w	8005bb4 <report_grbl_settings>
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8006ee0:	225c      	movs	r2, #92	; 0x5c
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4802      	ldr	r0, [pc, #8]	; (8006ef0 <settings_init+0x30>)
 8006ee6:	f7fa fd0d 	bl	8001904 <memcpy_from_eeprom_with_checksum>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d0ee      	beq.n	8006ecc <settings_init+0xc>
}
 8006eee:	bd08      	pop	{r3, pc}
 8006ef0:	20001834 	.word	0x20001834

08006ef4 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8006ef4:	b570      	push	{r4, r5, r6, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006ef6:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <spindle_init+0xd4>)
{
 8006ef8:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006efa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006efc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006efe:	f7f9 fbbf 	bl	8000680 <__aeabi_fsub>
 8006f02:	4601      	mov	r1, r0
 8006f04:	4831      	ldr	r0, [pc, #196]	; (8006fcc <spindle_init+0xd8>)
 8006f06:	f7f9 fd79 	bl	80009fc <__aeabi_fdiv>
 8006f0a:	4602      	mov	r2, r0
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8006f0c:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006f0e:	4b30      	ldr	r3, [pc, #192]	; (8006fd0 <spindle_init+0xdc>)
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006f10:	4e30      	ldr	r6, [pc, #192]	; (8006fd4 <spindle_init+0xe0>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8006f12:	2101      	movs	r1, #1
 8006f14:	2008      	movs	r0, #8
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006f16:	601a      	str	r2, [r3, #0]
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8006f18:	f7fa fa74 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <spindle_init+0xe4>)
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8006f22:	9300      	str	r3, [sp, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006f24:	f7fa f840 	bl	8000fa8 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8006f28:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <spindle_init+0xe8>)
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8006f2a:	4669      	mov	r1, sp
 8006f2c:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8006f2e:	9300      	str	r3, [sp, #0]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8006f30:	f7fa f83a 	bl	8000fa8 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8006f34:	2101      	movs	r1, #1
 8006f36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f3a:	f7fa fa63 	bl	8001404 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8006f3e:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8006f40:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006f44:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8006f48:	f7fa fb04 	bl	8001554 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8006f4c:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <spindle_init+0xec>)
 8006f50:	4824      	ldr	r0, [pc, #144]	; (8006fe4 <spindle_init+0xf0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006f54:	4d24      	ldr	r5, [pc, #144]	; (8006fe8 <spindle_init+0xf4>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006f56:	fba0 0303 	umull	r0, r3, r0, r3
 8006f5a:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006f60:	3b01      	subs	r3, #1
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8006f62:	9202      	str	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006f64:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006f68:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8006f6c:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006f70:	f7fa fa54 	bl	800141c <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8006f74:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <spindle_init+0xf8>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8006f76:	4628      	mov	r0, r5
 8006f78:	a904      	add	r1, sp, #16
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8006f7a:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8006f7c:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8006f80:	f7fa faa2 	bl	80014c8 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8006f84:	4628      	mov	r0, r5
 8006f86:	2108      	movs	r1, #8
 8006f88:	f7fa fb14 	bl	80015b4 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7fa faf6 	bl	8001580 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8006f94:	4628      	mov	r0, r5
 8006f96:	2101      	movs	r1, #1
 8006f98:	f7fa fae4 	bl	8001564 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	2004      	movs	r0, #4
 8006fa0:	f7fa fa30 	bl	8001404 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8006fa4:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <spindle_init+0xfc>)
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8006fa6:	4669      	mov	r1, sp
 8006fa8:	4812      	ldr	r0, [pc, #72]	; (8006ff4 <spindle_init+0x100>)
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8006faa:	9300      	str	r3, [sp, #0]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8006fac:	f7f9 fffc 	bl	8000fa8 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7fa fae4 	bl	8001580 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	f7fa f985 	bl	80012cc <GPIO_WriteBit>
}
 8006fc2:	b008      	add	sp, #32
 8006fc4:	bd70      	pop	{r4, r5, r6, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20001834 	.word	0x20001834
 8006fcc:	42c60000 	.word	0x42c60000
 8006fd0:	20000cfc 	.word	0x20000cfc
 8006fd4:	40010c00 	.word	0x40010c00
 8006fd8:	10030001 	.word	0x10030001
 8006fdc:	10030002 	.word	0x10030002
 8006fe0:	20000018 	.word	0x20000018
 8006fe4:	431bde83 	.word	0x431bde83
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	00010060 	.word	0x00010060
 8006ff0:	18030100 	.word	0x18030100
 8006ff4:	40010800 	.word	0x40010800

08006ff8 <spindle_get_state>:
{
 8006ff8:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <spindle_get_state+0x18>)
 8006ffc:	f7fa f95a 	bl	80012b4 <GPIO_ReadInputData>
 8007000:	b2c3      	uxtb	r3, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8007002:	f010 0002 	ands.w	r0, r0, #2
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007006:	bf1c      	itt	ne
 8007008:	f003 0001 	andne.w	r0, r3, #1
 800700c:	3001      	addne	r0, #1
}
 800700e:	bd08      	pop	{r3, pc}
 8007010:	40010c00 	.word	0x40010c00

08007014 <spindle_stop>:
{
 8007014:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007016:	2100      	movs	r1, #0
 8007018:	4804      	ldr	r0, [pc, #16]	; (800702c <spindle_stop+0x18>)
 800701a:	f7fa fab1 	bl	8001580 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 800701e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 8007022:	2200      	movs	r2, #0
 8007024:	2102      	movs	r1, #2
 8007026:	4802      	ldr	r0, [pc, #8]	; (8007030 <spindle_stop+0x1c>)
 8007028:	f7fa b950 	b.w	80012cc <GPIO_WriteBit>
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40010c00 	.word	0x40010c00

08007034 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007034:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007036:	4803      	ldr	r0, [pc, #12]	; (8007044 <spindle_set_speed+0x10>)
 8007038:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 800703a:	b101      	cbz	r1, 800703e <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800703c:	2101      	movs	r1, #1
 800703e:	f7fa ba9f 	b.w	8001580 <TIM_CtrlPWMOutputs>
 8007042:	bf00      	nop
 8007044:	40012c00 	.word	0x40012c00

08007048 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <spindle_compute_pwm_value+0x7c>)
	{
 800704c:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800704e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8007050:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8007052:	4630      	mov	r0, r6
 8007054:	4629      	mov	r1, r5
 8007056:	f7f9 fdcf 	bl	8000bf8 <__aeabi_fcmpge>
 800705a:	4f1b      	ldr	r7, [pc, #108]	; (80070c8 <spindle_compute_pwm_value+0x80>)
 800705c:	b9e0      	cbnz	r0, 8007098 <spindle_compute_pwm_value+0x50>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800705e:	7ab8      	ldrb	r0, [r7, #10]
 8007060:	f7f9 fbc4 	bl	80007ec <__aeabi_i2f>
 8007064:	4621      	mov	r1, r4
 8007066:	f7f9 fc15 	bl	8000894 <__aeabi_fmul>
 800706a:	4918      	ldr	r1, [pc, #96]	; (80070cc <spindle_compute_pwm_value+0x84>)
 800706c:	f7f9 fc12 	bl	8000894 <__aeabi_fmul>
 8007070:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007072:	4628      	mov	r0, r5
 8007074:	4621      	mov	r1, r4
 8007076:	f7f9 fdb5 	bl	8000be4 <__aeabi_fcmple>
 800707a:	b968      	cbnz	r0, 8007098 <spindle_compute_pwm_value+0x50>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
			pwm_value = SPINDLE_PWM_MAX_VALUE;
		}
		else if (rpm <= settings.rpm_min) {
 800707c:	4621      	mov	r1, r4
 800707e:	4630      	mov	r0, r6
 8007080:	f7f9 fdba 	bl	8000bf8 <__aeabi_fcmpge>
 8007084:	b158      	cbz	r0, 800709e <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8007086:	2500      	movs	r5, #0
 8007088:	4620      	mov	r0, r4
 800708a:	4629      	mov	r1, r5
 800708c:	f7f9 fd96 	bl	8000bbc <__aeabi_fcmpeq>
 8007090:	b1a8      	cbz	r0, 80070be <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007092:	2000      	movs	r0, #0
				sys.spindle_speed = 0.0f;
 8007094:	613d      	str	r5, [r7, #16]
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
		}
		return(pwm_value);
	}
 8007096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007098:	2064      	movs	r0, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 800709a:	613d      	str	r5, [r7, #16]
	}
 800709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800709e:	4631      	mov	r1, r6
 80070a0:	4620      	mov	r0, r4
			sys.spindle_speed = rpm;
 80070a2:	613c      	str	r4, [r7, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80070a4:	f7f9 faec 	bl	8000680 <__aeabi_fsub>
 80070a8:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <spindle_compute_pwm_value+0x88>)
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	f7f9 fbf2 	bl	8000894 <__aeabi_fmul>
 80070b0:	f002 ff0e 	bl	8009ed0 <floorf>
 80070b4:	f7f9 fdf0 	bl	8000c98 <__aeabi_f2uiz>
 80070b8:	3001      	adds	r0, #1
 80070ba:	b280      	uxth	r0, r0
	}
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 80070be:	2001      	movs	r0, #1
				sys.spindle_speed = settings.rpm_min;
 80070c0:	613e      	str	r6, [r7, #16]
	}
 80070c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c4:	20001834 	.word	0x20001834
 80070c8:	20001378 	.word	0x20001378
 80070cc:	3c23d70a 	.word	0x3c23d70a
 80070d0:	20000cfc 	.word	0x20000cfc

080070d4 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 80070d6:	4d3f      	ldr	r5, [pc, #252]	; (80071d4 <spindle_set_state+0x100>)
 80070d8:	786a      	ldrb	r2, [r5, #1]
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d144      	bne.n	8007168 <spindle_set_state+0x94>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 80070de:	4604      	mov	r4, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d034      	beq.n	800714e <spindle_set_state+0x7a>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 80070e4:	2810      	cmp	r0, #16
 80070e6:	460e      	mov	r6, r1
 80070e8:	d051      	beq.n	800718e <spindle_set_state+0xba>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 80070ea:	2201      	movs	r2, #1
 80070ec:	483a      	ldr	r0, [pc, #232]	; (80071d8 <spindle_set_state+0x104>)
 80070ee:	4611      	mov	r1, r2
 80070f0:	f7fa f8ec 	bl	80012cc <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 80070f4:	4b39      	ldr	r3, [pc, #228]	; (80071dc <spindle_set_state+0x108>)
 80070f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80070fa:	0792      	lsls	r2, r2, #30
 80070fc:	d443      	bmi.n	8007186 <spindle_set_state+0xb2>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80070fe:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8007100:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007102:	4638      	mov	r0, r7
 8007104:	4621      	mov	r1, r4
 8007106:	f7f9 fd77 	bl	8000bf8 <__aeabi_fcmpge>
 800710a:	2800      	cmp	r0, #0
 800710c:	d12d      	bne.n	800716a <spindle_set_state+0x96>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800710e:	7aa8      	ldrb	r0, [r5, #10]
 8007110:	f7f9 fb6c 	bl	80007ec <__aeabi_i2f>
 8007114:	4932      	ldr	r1, [pc, #200]	; (80071e0 <spindle_set_state+0x10c>)
 8007116:	f7f9 fbbd 	bl	8000894 <__aeabi_fmul>
 800711a:	4631      	mov	r1, r6
 800711c:	f7f9 fbba 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007120:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007122:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007124:	f7f9 fd68 	bl	8000bf8 <__aeabi_fcmpge>
 8007128:	b9f8      	cbnz	r0, 800716a <spindle_set_state+0x96>
		else if (rpm <= settings.rpm_min) {
 800712a:	4639      	mov	r1, r7
 800712c:	4630      	mov	r0, r6
 800712e:	f7f9 fd59 	bl	8000be4 <__aeabi_fcmple>
 8007132:	2800      	cmp	r0, #0
 8007134:	d031      	beq.n	800719a <spindle_set_state+0xc6>
			if (rpm == 0.0f) { // S0 disables spindle
 8007136:	2400      	movs	r4, #0
 8007138:	4630      	mov	r0, r6
 800713a:	4621      	mov	r1, r4
 800713c:	f7f9 fd3e 	bl	8000bbc <__aeabi_fcmpeq>
 8007140:	2800      	cmp	r0, #0
 8007142:	d042      	beq.n	80071ca <spindle_set_state+0xf6>
		TIM1->CCR1 = pwm_value;
 8007144:	2200      	movs	r2, #0
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <spindle_set_state+0x110>)
				sys.spindle_speed = 0.0f;
 8007148:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 800714a:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 800714c:	e038      	b.n	80071c0 <spindle_set_state+0xec>
      sys.spindle_speed = 0.0f;
 800714e:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007150:	4601      	mov	r1, r0
 8007152:	4824      	ldr	r0, [pc, #144]	; (80071e4 <spindle_set_state+0x110>)
      sys.spindle_speed = 0.0f;
 8007154:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007156:	f7fa fa13 	bl	8001580 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 800715a:	4622      	mov	r2, r4
 800715c:	2102      	movs	r1, #2
 800715e:	481e      	ldr	r0, [pc, #120]	; (80071d8 <spindle_set_state+0x104>)
 8007160:	f7fa f8b4 	bl	80012cc <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007164:	2300      	movs	r3, #0
 8007166:	732b      	strb	r3, [r5, #12]
}
 8007168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TIM1->CCR1 = pwm_value;
 800716a:	2264      	movs	r2, #100	; 0x64
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <spindle_set_state+0x110>)
			sys.spindle_speed = settings.rpm_max;
 800716e:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8007170:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007172:	2101      	movs	r1, #1
 8007174:	481b      	ldr	r0, [pc, #108]	; (80071e4 <spindle_set_state+0x110>)
 8007176:	f7fa fa03 	bl	8001580 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 800717a:	2201      	movs	r2, #1
 800717c:	2102      	movs	r1, #2
 800717e:	4816      	ldr	r0, [pc, #88]	; (80071d8 <spindle_set_state+0x104>)
 8007180:	f7fa f8a4 	bl	80012cc <GPIO_WriteBit>
 8007184:	e7ee      	b.n	8007164 <spindle_set_state+0x90>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007186:	2c20      	cmp	r4, #32
 8007188:	bf08      	it	eq
 800718a:	2600      	moveq	r6, #0
 800718c:	e7b7      	b.n	80070fe <spindle_set_state+0x2a>
        ResetSpindleDirectionBit();
 800718e:	2101      	movs	r1, #1
 8007190:	4811      	ldr	r0, [pc, #68]	; (80071d8 <spindle_set_state+0x104>)
 8007192:	f7fa f89b 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <spindle_set_state+0x108>)
 8007198:	e7b1      	b.n	80070fe <spindle_set_state+0x2a>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800719a:	4639      	mov	r1, r7
 800719c:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 800719e:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80071a0:	f7f9 fa6e 	bl	8000680 <__aeabi_fsub>
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <spindle_set_state+0x114>)
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	f7f9 fb74 	bl	8000894 <__aeabi_fmul>
 80071ac:	f002 fe90 	bl	8009ed0 <floorf>
 80071b0:	f7f9 fd72 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <spindle_set_state+0x110>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80071b6:	3001      	adds	r0, #1
 80071b8:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 80071ba:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80071bc:	2800      	cmp	r0, #0
 80071be:	d1d8      	bne.n	8007172 <spindle_set_state+0x9e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80071c0:	2100      	movs	r1, #0
 80071c2:	4808      	ldr	r0, [pc, #32]	; (80071e4 <spindle_set_state+0x110>)
 80071c4:	f7fa f9dc 	bl	8001580 <TIM_CtrlPWMOutputs>
	}
 80071c8:	e7d7      	b.n	800717a <spindle_set_state+0xa6>
		TIM1->CCR1 = pwm_value;
 80071ca:	2201      	movs	r2, #1
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <spindle_set_state+0x110>)
				sys.spindle_speed = settings.rpm_min;
 80071ce:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 80071d0:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80071d2:	e7ce      	b.n	8007172 <spindle_set_state+0x9e>
 80071d4:	20001378 	.word	0x20001378
 80071d8:	40010c00 	.word	0x40010c00
 80071dc:	20001834 	.word	0x20001834
 80071e0:	3c23d70a 	.word	0x3c23d70a
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	20000cfc 	.word	0x20000cfc

080071ec <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 80071ee:	4d40      	ldr	r5, [pc, #256]	; (80072f0 <spindle_sync+0x104>)
 80071f0:	782b      	ldrb	r3, [r5, #0]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d04c      	beq.n	8007290 <spindle_sync+0xa4>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 80071f6:	4604      	mov	r4, r0
 80071f8:	460e      	mov	r6, r1
 80071fa:	f7fe fb37 	bl	800586c <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 80071fe:	786a      	ldrb	r2, [r5, #1]
 8007200:	2a00      	cmp	r2, #0
 8007202:	d145      	bne.n	8007290 <spindle_sync+0xa4>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007204:	2c00      	cmp	r4, #0
 8007206:	d04a      	beq.n	800729e <spindle_sync+0xb2>
      if (state == SPINDLE_ENABLE_CW) {
 8007208:	2c10      	cmp	r4, #16
 800720a:	d042      	beq.n	8007292 <spindle_sync+0xa6>
      SetSpindleDirectionBit();
 800720c:	2201      	movs	r2, #1
 800720e:	4839      	ldr	r0, [pc, #228]	; (80072f4 <spindle_sync+0x108>)
 8007210:	4611      	mov	r1, r2
 8007212:	f7fa f85b 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007216:	4b38      	ldr	r3, [pc, #224]	; (80072f8 <spindle_sync+0x10c>)
 8007218:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800721c:	0792      	lsls	r2, r2, #30
 800721e:	d502      	bpl.n	8007226 <spindle_sync+0x3a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007220:	2c20      	cmp	r4, #32
 8007222:	bf08      	it	eq
 8007224:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007226:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8007228:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800722a:	4638      	mov	r0, r7
 800722c:	4621      	mov	r1, r4
 800722e:	f7f9 fce3 	bl	8000bf8 <__aeabi_fcmpge>
 8007232:	b9f0      	cbnz	r0, 8007272 <spindle_sync+0x86>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007234:	7aa8      	ldrb	r0, [r5, #10]
 8007236:	f7f9 fad9 	bl	80007ec <__aeabi_i2f>
 800723a:	4930      	ldr	r1, [pc, #192]	; (80072fc <spindle_sync+0x110>)
 800723c:	f7f9 fb2a 	bl	8000894 <__aeabi_fmul>
 8007240:	4631      	mov	r1, r6
 8007242:	f7f9 fb27 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007246:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007248:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800724a:	f7f9 fcd5 	bl	8000bf8 <__aeabi_fcmpge>
 800724e:	b980      	cbnz	r0, 8007272 <spindle_sync+0x86>
		else if (rpm <= settings.rpm_min) {
 8007250:	4639      	mov	r1, r7
 8007252:	4630      	mov	r0, r6
 8007254:	f7f9 fcc6 	bl	8000be4 <__aeabi_fcmple>
 8007258:	b368      	cbz	r0, 80072b6 <spindle_sync+0xca>
			if (rpm == 0.0f) { // S0 disables spindle
 800725a:	2400      	movs	r4, #0
 800725c:	4630      	mov	r0, r6
 800725e:	4621      	mov	r1, r4
 8007260:	f7f9 fcac 	bl	8000bbc <__aeabi_fcmpeq>
 8007264:	2800      	cmp	r0, #0
 8007266:	d03e      	beq.n	80072e6 <spindle_sync+0xfa>
		TIM1->CCR1 = pwm_value;
 8007268:	2200      	movs	r2, #0
 800726a:	4b25      	ldr	r3, [pc, #148]	; (8007300 <spindle_sync+0x114>)
				sys.spindle_speed = 0.0f;
 800726c:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 800726e:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007270:	e034      	b.n	80072dc <spindle_sync+0xf0>
		TIM1->CCR1 = pwm_value;
 8007272:	2264      	movs	r2, #100	; 0x64
 8007274:	4b22      	ldr	r3, [pc, #136]	; (8007300 <spindle_sync+0x114>)
			sys.spindle_speed = settings.rpm_max;
 8007276:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8007278:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800727a:	2101      	movs	r1, #1
 800727c:	4820      	ldr	r0, [pc, #128]	; (8007300 <spindle_sync+0x114>)
 800727e:	f7fa f97f 	bl	8001580 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8007282:	2201      	movs	r2, #1
 8007284:	2102      	movs	r1, #2
 8007286:	481b      	ldr	r0, [pc, #108]	; (80072f4 <spindle_sync+0x108>)
 8007288:	f7fa f820 	bl	80012cc <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 800728c:	2300      	movs	r3, #0
 800728e:	732b      	strb	r3, [r5, #12]
    spindle_set_state(state,rpm);
  }
 8007290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ResetSpindleDirectionBit();
 8007292:	2101      	movs	r1, #1
 8007294:	4817      	ldr	r0, [pc, #92]	; (80072f4 <spindle_sync+0x108>)
 8007296:	f7fa f819 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 800729a:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <spindle_sync+0x10c>)
 800729c:	e7c3      	b.n	8007226 <spindle_sync+0x3a>
      sys.spindle_speed = 0.0f;
 800729e:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80072a0:	4621      	mov	r1, r4
 80072a2:	4817      	ldr	r0, [pc, #92]	; (8007300 <spindle_sync+0x114>)
      sys.spindle_speed = 0.0f;
 80072a4:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80072a6:	f7fa f96b 	bl	8001580 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 80072aa:	4622      	mov	r2, r4
 80072ac:	2102      	movs	r1, #2
 80072ae:	4811      	ldr	r0, [pc, #68]	; (80072f4 <spindle_sync+0x108>)
 80072b0:	f7fa f80c 	bl	80012cc <GPIO_WriteBit>
}
 80072b4:	e7ea      	b.n	800728c <spindle_sync+0xa0>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80072b6:	4639      	mov	r1, r7
 80072b8:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 80072ba:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80072bc:	f7f9 f9e0 	bl	8000680 <__aeabi_fsub>
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <spindle_sync+0x118>)
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	f7f9 fae6 	bl	8000894 <__aeabi_fmul>
 80072c8:	f002 fe02 	bl	8009ed0 <floorf>
 80072cc:	f7f9 fce4 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 80072d0:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <spindle_sync+0x114>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 80072d6:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1ce      	bne.n	800727a <spindle_sync+0x8e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80072dc:	2100      	movs	r1, #0
 80072de:	4808      	ldr	r0, [pc, #32]	; (8007300 <spindle_sync+0x114>)
 80072e0:	f7fa f94e 	bl	8001580 <TIM_CtrlPWMOutputs>
	}
 80072e4:	e7cd      	b.n	8007282 <spindle_sync+0x96>
		TIM1->CCR1 = pwm_value;
 80072e6:	2201      	movs	r2, #1
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <spindle_sync+0x114>)
				sys.spindle_speed = settings.rpm_min;
 80072ea:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 80072ec:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80072ee:	e7c4      	b.n	800727a <spindle_sync+0x8e>
 80072f0:	20001378 	.word	0x20001378
 80072f4:	40010c00 	.word	0x40010c00
 80072f8:	20001834 	.word	0x20001834
 80072fc:	3c23d70a 	.word	0x3c23d70a
 8007300:	40012c00 	.word	0x40012c00
 8007304:	20000cfc 	.word	0x20000cfc

08007308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800730c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800730e:	e003      	b.n	8007318 <LoopCopyDataInit>

08007310 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8007312:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007314:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007316:	3104      	adds	r1, #4

08007318 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007318:	480b      	ldr	r0, [pc, #44]	; (8007348 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800731c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800731e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007320:	d3f6      	bcc.n	8007310 <CopyDataInit>
	ldr	r2, =_sbss
 8007322:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8007324:	e002      	b.n	800732c <LoopFillZerobss>

08007326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007326:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007328:	f842 3b04 	str.w	r3, [r2], #4

0800732c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800732e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007330:	d3f9      	bcc.n	8007326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007332:	f001 fae9 	bl	8008908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007336:	f002 fcb7 	bl	8009ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800733a:	f7fb fffd 	bl	8003338 <main>
	bx	lr
 800733e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007340:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8007344:	0800b5dc 	.word	0x0800b5dc
	ldr	r0, =_sdata
 8007348:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800734c:	20000510 	.word	0x20000510
	ldr	r2, =_sbss
 8007350:	20000510 	.word	0x20000510
	ldr	r3, = _ebss
 8007354:	20001918 	.word	0x20001918

08007358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007358:	e7fe      	b.n	8007358 <ADC1_2_IRQHandler>
	...

0800735c <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 800735c:	b570      	push	{r4, r5, r6, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 800735e:	4d18      	ldr	r5, [pc, #96]	; (80073c0 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 8007360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8007364:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
	  SetStepperDisableBit();
 8007368:	4816      	ldr	r0, [pc, #88]	; (80073c4 <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 800736a:	075b      	lsls	r3, r3, #29
 800736c:	d525      	bpl.n	80073ba <st_wake_up+0x5e>
	  SetStepperDisableBit();
 800736e:	f7f9 ffa9 	bl	80012c4 <GPIO_SetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8007372:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 8007374:	f64f 76fe 	movw	r6, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007378:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <st_wake_up+0x6c>)
 800737e:	4813      	ldr	r0, [pc, #76]	; (80073cc <st_wake_up+0x70>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007386:	fba0 0202 	umull	r0, r2, r0, r2
 800738a:	0c92      	lsrs	r2, r2, #18
 800738c:	fb03 f302 	mul.w	r3, r3, r2
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8007390:	480f      	ldr	r0, [pc, #60]	; (80073d0 <st_wake_up+0x74>)
  st.step_outbits = step_port_invert_mask;
 8007392:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <st_wake_up+0x78>)
 8007394:	4d10      	ldr	r5, [pc, #64]	; (80073d8 <st_wake_up+0x7c>)
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8007396:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8007398:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 800739a:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800739c:	8284      	strh	r4, [r0, #20]
  TIM3->SR = ~TIM_SR_UIF;
 800739e:	8206      	strh	r6, [r0, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80073a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80073a2:	81d3      	strh	r3, [r2, #14]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80073a4:	8843      	ldrh	r3, [r0, #2]
  st.step_outbits = step_port_invert_mask;
 80073a6:	8215      	strh	r5, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 80073ae:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 80073b0:	880b      	ldrh	r3, [r1, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4323      	orrs	r3, r4
 80073b6:	800b      	strh	r3, [r1, #0]
#endif
}
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
	  ResetStepperDisableBit();
 80073ba:	f7f9 ff85 	bl	80012c8 <GPIO_ResetBits>
 80073be:	e7d8      	b.n	8007372 <st_wake_up+0x16>
 80073c0:	20001834 	.word	0x20001834
 80073c4:	40010800 	.word	0x40010800
 80073c8:	20000018 	.word	0x20000018
 80073cc:	431bde83 	.word	0x431bde83
 80073d0:	40000400 	.word	0x40000400
 80073d4:	20000d94 	.word	0x20000d94
 80073d8:	20000e78 	.word	0x20000e78

080073dc <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80073dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 80073e0:	2100      	movs	r1, #0
{
 80073e2:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80073e4:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80073e6:	4c18      	ldr	r4, [pc, #96]	; (8007448 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80073e8:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80073ec:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  busy = false;
 80073f0:	4d16      	ldr	r5, [pc, #88]	; (800744c <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80073f6:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80073f8:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 80073fa:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 80073fc:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80073fe:	d00e      	beq.n	800741e <st_go_idle+0x42>
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <st_go_idle+0x74>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d112      	bne.n	800742e <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8007408:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800740c:	075a      	lsls	r2, r3, #29
 800740e:	d514      	bpl.n	800743a <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 8007410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 8007414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007418:	480e      	ldr	r0, [pc, #56]	; (8007454 <st_go_idle+0x78>)
 800741a:	f7f9 bf53 	b.w	80012c4 <GPIO_SetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800741e:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <st_go_idle+0x7c>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1ec      	bne.n	8007400 <st_go_idle+0x24>
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <st_go_idle+0x74>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b80      	cmp	r3, #128	; 0x80
 800742c:	d1ec      	bne.n	8007408 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 800742e:	f7fc fda7 	bl	8003f80 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8007432:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8007436:	075b      	lsls	r3, r3, #29
 8007438:	d5ea      	bpl.n	8007410 <st_go_idle+0x34>
}
 800743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 800743e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007442:	4804      	ldr	r0, [pc, #16]	; (8007454 <st_go_idle+0x78>)
 8007444:	f7f9 bf40 	b.w	80012c8 <GPIO_ResetBits>
 8007448:	20001834 	.word	0x20001834
 800744c:	20000d00 	.word	0x20000d00
 8007450:	20001378 	.word	0x20001378
 8007454:	40010800 	.word	0x40010800
 8007458:	200016b0 	.word	0x200016b0

0800745c <TIM2_IRQHandler>:
#ifdef WIN32
void Timer1Proc()
#endif
{
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 800745c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8007464:	8a13      	ldrh	r3, [r2, #16]
{
 8007466:	b082      	sub	sp, #8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8007468:	f013 0501 	ands.w	r5, r3, #1
 800746c:	f000 8088 	beq.w	8007580 <TIM2_IRQHandler+0x124>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 8007470:	2300      	movs	r3, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8007472:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8007476:	4e74      	ldr	r6, [pc, #464]	; (8007648 <TIM2_IRQHandler+0x1ec>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8007478:	8211      	strh	r1, [r2, #16]
		TIM2->CNT = 0;
 800747a:	8493      	strh	r3, [r2, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 800747c:	7833      	ldrb	r3, [r6, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d17e      	bne.n	8007580 <TIM2_IRQHandler+0x124>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8007482:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 8007486:	2101      	movs	r1, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8007488:	4870      	ldr	r0, [pc, #448]	; (800764c <TIM2_IRQHandler+0x1f0>)
 800748a:	4c71      	ldr	r4, [pc, #452]	; (8007650 <TIM2_IRQHandler+0x1f4>)
 800748c:	68c7      	ldr	r7, [r0, #12]
 800748e:	8a63      	ldrh	r3, [r4, #18]
 8007490:	f027 0770 	bic.w	r7, r7, #112	; 0x70
 8007494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007498:	433b      	orrs	r3, r7
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800749a:	4f6e      	ldr	r7, [pc, #440]	; (8007654 <TIM2_IRQHandler+0x1f8>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 800749c:	60c3      	str	r3, [r0, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800749e:	f8a7 c010 	strh.w	ip, [r7, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 80074a2:	68c3      	ldr	r3, [r0, #12]
 80074a4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80074a8:	f023 0307 	bic.w	r3, r3, #7
 80074ac:	ea43 030c 	orr.w	r3, r3, ip
 80074b0:	60c3      	str	r3, [r0, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 80074b2:	883b      	ldrh	r3, [r7, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 80074b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  TIM3->CR1 |= TIM_CR1_CEN;
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	430b      	orrs	r3, r1
 80074ba:	803b      	strh	r3, [r7, #0]
  busy = true;
 80074bc:	7031      	strb	r1, [r6, #0]
  if (st.exec_segment == NULL) {
 80074be:	2800      	cmp	r0, #0
 80074c0:	d06a      	beq.n	8007598 <TIM2_IRQHandler+0x13c>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80074c2:	4b65      	ldr	r3, [pc, #404]	; (8007658 <TIM2_IRQHandler+0x1fc>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	f000 80a8 	beq.w	800761c <TIM2_IRQHandler+0x1c0>

  // Reset step out bits.
  st.step_outbits = 0;
 80074cc:	2200      	movs	r2, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 80074ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    st.counter_x += st.steps[X_AXIS];
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	6967      	ldr	r7, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 80074d4:	68c1      	ldr	r1, [r0, #12]
    st.counter_x += st.steps[X_AXIS];
 80074d6:	443b      	add	r3, r7
  if (st.counter_x > st.exec_block->step_event_count) {
 80074d8:	428b      	cmp	r3, r1
    st.counter_x += st.steps[X_AXIS];
 80074da:	6023      	str	r3, [r4, #0]
  st.step_outbits = 0;
 80074dc:	8222      	strh	r2, [r4, #16]
  if (st.counter_x > st.exec_block->step_event_count) {
 80074de:	d952      	bls.n	8007586 <TIM2_IRQHandler+0x12a>
    st.step_outbits |= (1<<X_STEP_BIT);
 80074e0:	2201      	movs	r2, #1
    st.counter_x -= st.exec_block->step_event_count;
 80074e2:	1a5b      	subs	r3, r3, r1
 80074e4:	6023      	str	r3, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 80074e6:	8a03      	ldrh	r3, [r0, #16]
    st.step_outbits |= (1<<X_STEP_BIT);
 80074e8:	8222      	strh	r2, [r4, #16]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 80074ea:	2203      	movs	r2, #3
 80074ec:	4f5b      	ldr	r7, [pc, #364]	; (800765c <TIM2_IRQHandler+0x200>)
 80074ee:	f013 0f10 	tst.w	r3, #16
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	bf14      	ite	ne
 80074f6:	f103 33ff 	addne.w	r3, r3, #4294967295
    else { sys_position[X_AXIS]++; }
 80074fa:	3301      	addeq	r3, #1
 80074fc:	603b      	str	r3, [r7, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 80074fe:	6863      	ldr	r3, [r4, #4]
 8007500:	69a7      	ldr	r7, [r4, #24]
 8007502:	443b      	add	r3, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8007504:	4299      	cmp	r1, r3
    st.counter_y += st.steps[Y_AXIS];
 8007506:	6063      	str	r3, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8007508:	d20a      	bcs.n	8007520 <TIM2_IRQHandler+0xc4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800750a:	8a05      	ldrh	r5, [r0, #16]
    st.counter_y -= st.exec_block->step_event_count;
 800750c:	1a5b      	subs	r3, r3, r1
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800750e:	06ad      	lsls	r5, r5, #26
    st.counter_y -= st.exec_block->step_event_count;
 8007510:	6063      	str	r3, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8007512:	8222      	strh	r2, [r4, #16]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8007514:	d53a      	bpl.n	800758c <TIM2_IRQHandler+0x130>
 8007516:	4615      	mov	r5, r2
 8007518:	4f50      	ldr	r7, [pc, #320]	; (800765c <TIM2_IRQHandler+0x200>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3b01      	subs	r3, #1
 800751e:	607b      	str	r3, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8007520:	68a2      	ldr	r2, [r4, #8]
 8007522:	69e3      	ldr	r3, [r4, #28]
 8007524:	441a      	add	r2, r3
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8007526:	4291      	cmp	r1, r2
    st.counter_z += st.steps[Z_AXIS];
 8007528:	60a2      	str	r2, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 800752a:	d20e      	bcs.n	800754a <TIM2_IRQHandler+0xee>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
 800752c:	1a52      	subs	r2, r2, r1
 800752e:	60a2      	str	r2, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8007530:	4a4a      	ldr	r2, [pc, #296]	; (800765c <TIM2_IRQHandler+0x200>)
 8007532:	8a00      	ldrh	r0, [r0, #16]
    st.step_outbits |= (1<<Z_STEP_BIT);
 8007534:	f045 0304 	orr.w	r3, r5, #4
 8007538:	b29d      	uxth	r5, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800753a:	6893      	ldr	r3, [r2, #8]
 800753c:	0641      	lsls	r1, r0, #25
 800753e:	bf4c      	ite	mi
 8007540:	f103 33ff 	addmi.w	r3, r3, #4294967295
    else { sys_position[Z_AXIS]++; }
 8007544:	3301      	addpl	r3, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 8007546:	8225      	strh	r5, [r4, #16]
    else { sys_position[Z_AXIS]++; }
 8007548:	6093      	str	r3, [r2, #8]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 800754a:	4b45      	ldr	r3, [pc, #276]	; (8007660 <TIM2_IRQHandler+0x204>)
 800754c:	781a      	ldrb	r2, [r3, #0]
 800754e:	2a04      	cmp	r2, #4
 8007550:	d102      	bne.n	8007558 <TIM2_IRQHandler+0xfc>
 8007552:	88db      	ldrh	r3, [r3, #6]
 8007554:	401d      	ands	r5, r3
 8007556:	8225      	strh	r5, [r4, #16]

  st.step_count--; // Decrement step events count
 8007558:	8c22      	ldrh	r2, [r4, #32]
 800755a:	3a01      	subs	r2, #1
 800755c:	b292      	uxth	r2, r2
 800755e:	8422      	strh	r2, [r4, #32]
  if (st.step_count == 0) {
 8007560:	b942      	cbnz	r2, 8007574 <TIM2_IRQHandler+0x118>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8007562:	4940      	ldr	r1, [pc, #256]	; (8007664 <TIM2_IRQHandler+0x208>)
    st.exec_segment = NULL;
 8007564:	62a2      	str	r2, [r4, #40]	; 0x28
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8007566:	780b      	ldrb	r3, [r1, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	b2db      	uxtb	r3, r3
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 800756c:	2b0a      	cmp	r3, #10
 800756e:	bf08      	it	eq
 8007570:	2300      	moveq	r3, #0
	segment_buffer_tail = segment_tail_next;
 8007572:	700b      	strb	r3, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8007574:	2200      	movs	r2, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8007576:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <TIM2_IRQHandler+0x20c>)
  busy = false;
 8007578:	7032      	strb	r2, [r6, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	406b      	eors	r3, r5
 800757e:	8223      	strh	r3, [r4, #16]
}
 8007580:	b002      	add	sp, #8
 8007582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007586:	4615      	mov	r5, r2
 8007588:	2202      	movs	r2, #2
 800758a:	e7b8      	b.n	80074fe <TIM2_IRQHandler+0xa2>
    else { sys_position[Y_AXIS]++; }
 800758c:	4615      	mov	r5, r2
 800758e:	4a33      	ldr	r2, [pc, #204]	; (800765c <TIM2_IRQHandler+0x200>)
 8007590:	6853      	ldr	r3, [r2, #4]
 8007592:	3301      	adds	r3, #1
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	e7c3      	b.n	8007520 <TIM2_IRQHandler+0xc4>
    if (segment_buffer_head != segment_buffer_tail) {
 8007598:	4b32      	ldr	r3, [pc, #200]	; (8007664 <TIM2_IRQHandler+0x208>)
 800759a:	4f34      	ldr	r7, [pc, #208]	; (800766c <TIM2_IRQHandler+0x210>)
 800759c:	7819      	ldrb	r1, [r3, #0]
 800759e:	783f      	ldrb	r7, [r7, #0]
 80075a0:	428f      	cmp	r7, r1
 80075a2:	d040      	beq.n	8007626 <TIM2_IRQHandler+0x1ca>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	4932      	ldr	r1, [pc, #200]	; (8007670 <TIM2_IRQHandler+0x214>)
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80075a8:	f894 c022 	ldrb.w	ip, [r4, #34]	; 0x22
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80075ac:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80075b0:	8878      	ldrh	r0, [r7, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80075b2:	62a7      	str	r7, [r4, #40]	; 0x28
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80075b4:	3801      	subs	r0, #1
 80075b6:	b280      	uxth	r0, r0
 80075b8:	8590      	strh	r0, [r2, #44]	; 0x2c
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80075ba:	7938      	ldrb	r0, [r7, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80075bc:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80075c0:	4584      	cmp	ip, r0
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80075c2:	ea4f 02c3 	mov.w	r2, r3, lsl #3
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80075c6:	8427      	strh	r7, [r4, #32]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80075c8:	d02b      	beq.n	8007622 <TIM2_IRQHandler+0x1c6>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80075ca:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <TIM2_IRQHandler+0x218>)
 80075cc:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 80075d0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 80075d4:	68df      	ldr	r7, [r3, #12]
        st.exec_block_index = st.exec_segment->st_block_index;
 80075d6:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 80075da:	087f      	lsrs	r7, r7, #1
 80075dc:	e9c4 7701 	strd	r7, r7, [r4, #4]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80075e0:	6263      	str	r3, [r4, #36]	; 0x24
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 80075e2:	6027      	str	r7, [r4, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80075e4:	4824      	ldr	r0, [pc, #144]	; (8007678 <TIM2_IRQHandler+0x21c>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80075e6:	4411      	add	r1, r2
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80075e8:	8a1f      	ldrh	r7, [r3, #16]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80075ea:	f891 e005 	ldrb.w	lr, [r1, #5]
 80075ee:	f8d3 c000 	ldr.w	ip, [r3]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80075f2:	f8b0 8000 	ldrh.w	r8, [r0]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80075f6:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80075fa:	88c8      	ldrh	r0, [r1, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80075fc:	fa2c fc0e 	lsr.w	ip, ip, lr
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8007600:	ea87 0108 	eor.w	r1, r7, r8
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8007604:	fa22 f20e 	lsr.w	r2, r2, lr
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8007608:	fa23 f30e 	lsr.w	r3, r3, lr
 800760c:	e9c4 2306 	strd	r2, r3, [r4, #24]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8007610:	f8c4 c014 	str.w	ip, [r4, #20]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8007614:	8261      	strh	r1, [r4, #18]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8007616:	f7ff fd0d 	bl	8007034 <spindle_set_speed>
 800761a:	e752      	b.n	80074c2 <TIM2_IRQHandler+0x66>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800761c:	f7fd fd20 	bl	8005060 <probe_state_monitor>
 8007620:	e754      	b.n	80074cc <TIM2_IRQHandler+0x70>
 8007622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007624:	e7de      	b.n	80075e4 <TIM2_IRQHandler+0x188>
      st_go_idle();
 8007626:	9001      	str	r0, [sp, #4]
 8007628:	f7ff fed8 	bl	80073dc <st_go_idle>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 800762c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800762e:	9801      	ldr	r0, [sp, #4]
 8007630:	7c9b      	ldrb	r3, [r3, #18]
 8007632:	b92b      	cbnz	r3, 8007640 <TIM2_IRQHandler+0x1e4>
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8007634:	2004      	movs	r0, #4
}
 8007636:	b002      	add	sp, #8
 8007638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 800763c:	f001 b91c 	b.w	8008878 <system_set_exec_state_flag>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8007640:	f7ff fcf8 	bl	8007034 <spindle_set_speed>
 8007644:	e7f6      	b.n	8007634 <TIM2_IRQHandler+0x1d8>
 8007646:	bf00      	nop
 8007648:	20000d00 	.word	0x20000d00
 800764c:	40010800 	.word	0x40010800
 8007650:	20000d94 	.word	0x20000d94
 8007654:	40000400 	.word	0x40000400
 8007658:	2000138e 	.word	0x2000138e
 800765c:	2000139c 	.word	0x2000139c
 8007660:	20001378 	.word	0x20001378
 8007664:	20000d91 	.word	0x20000d91
 8007668:	20000e78 	.word	0x20000e78
 800766c:	20000d90 	.word	0x20000d90
 8007670:	20000d40 	.word	0x20000d40
 8007674:	20000dc0 	.word	0x20000dc0
 8007678:	20000d02 	.word	0x20000d02

0800767c <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 800767c:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 800767e:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8007680:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007684:	490a      	ldr	r1, [pc, #40]	; (80076b0 <TIM3_IRQHandler+0x34>)
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <TIM3_IRQHandler+0x38>)
 8007688:	68ca      	ldr	r2, [r1, #12]
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	f022 0207 	bic.w	r2, r2, #7
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007698:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 800769a:	8813      	ldrh	r3, [r2, #0]
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80076a6:	8214      	strh	r4, [r2, #16]
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80076a8:	bc10      	pop	{r4}
		TIM3->CNT = 0;
 80076aa:	8490      	strh	r0, [r2, #36]	; 0x24
}
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010800 	.word	0x40010800
 80076b4:	20000e78 	.word	0x20000e78
 80076b8:	40000400 	.word	0x40000400

080076bc <st_generate_step_dir_invert_masks>:
{
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <st_generate_step_dir_invert_masks+0x48>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80076be:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80076c0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80076c2:	f012 0301 	ands.w	r3, r2, #1
 80076c6:	bf18      	it	ne
 80076c8:	2310      	movne	r3, #16
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80076ca:	f000 0101 	and.w	r1, r0, #1
 80076ce:	f010 0f02 	tst.w	r0, #2
 80076d2:	bf18      	it	ne
 80076d4:	f041 0102 	orrne.w	r1, r1, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80076d8:	f012 0f02 	tst.w	r2, #2
 80076dc:	bf1c      	itt	ne
 80076de:	f043 0320 	orrne.w	r3, r3, #32
 80076e2:	b29b      	uxthne	r3, r3
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80076e4:	0740      	lsls	r0, r0, #29
 80076e6:	bf48      	it	mi
 80076e8:	f041 0104 	orrmi.w	r1, r1, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80076ec:	0752      	lsls	r2, r2, #29
 80076ee:	bf48      	it	mi
 80076f0:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80076f4:	4804      	ldr	r0, [pc, #16]	; (8007708 <st_generate_step_dir_invert_masks+0x4c>)
 80076f6:	4a05      	ldr	r2, [pc, #20]	; (800770c <st_generate_step_dir_invert_masks+0x50>)
 80076f8:	bf48      	it	mi
 80076fa:	b29b      	uxthmi	r3, r3
  for (idx=0; idx<N_AXIS; idx++) {
 80076fc:	8001      	strh	r1, [r0, #0]
 80076fe:	8013      	strh	r3, [r2, #0]
  }
}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20001834 	.word	0x20001834
 8007708:	20000e78 	.word	0x20000e78
 800770c:	20000d02 	.word	0x20000d02

08007710 <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(&st, 0, sizeof(stepper_t));
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8007712:	2601      	movs	r6, #1
  memset(&st, 0, sizeof(stepper_t));
 8007714:	4d29      	ldr	r5, [pc, #164]	; (80077bc <st_reset+0xac>)
  st_go_idle();
 8007716:	f7ff fe61 	bl	80073dc <st_go_idle>
  memset(&prep, 0, sizeof(st_prep_t));
 800771a:	2238      	movs	r2, #56	; 0x38
 800771c:	2100      	movs	r1, #0
 800771e:	4828      	ldr	r0, [pc, #160]	; (80077c0 <st_reset+0xb0>)
 8007720:	f002 faf4 	bl	8009d0c <memset>
  memset(&st, 0, sizeof(stepper_t));
 8007724:	2228      	movs	r2, #40	; 0x28
 8007726:	2100      	movs	r1, #0
 8007728:	4628      	mov	r0, r5
 800772a:	f002 faef 	bl	8009d0c <memset>
  st.exec_segment = NULL;
 800772e:	2100      	movs	r1, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007730:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <st_reset+0xb4>)
  segment_buffer_tail = 0;
 8007732:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80077e4 <st_reset+0xd4>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007736:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007738:	8e50      	ldrh	r0, [r2, #50]	; 0x32
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800773a:	ea13 0206 	ands.w	r2, r3, r6
 800773e:	bf18      	it	ne
 8007740:	2210      	movne	r2, #16
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8007742:	4f21      	ldr	r7, [pc, #132]	; (80077c8 <st_reset+0xb8>)
  segment_buffer_tail = 0;
 8007744:	f88c 1000 	strb.w	r1, [ip]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8007748:	6039      	str	r1, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 800774a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80077e8 <st_reset+0xd8>
  busy = false;
 800774e:	4f1f      	ldr	r7, [pc, #124]	; (80077cc <st_reset+0xbc>)
  st.exec_segment = NULL;
 8007750:	62a9      	str	r1, [r5, #40]	; 0x28
  busy = false;
 8007752:	7039      	strb	r1, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 8007754:	f88c 1000 	strb.w	r1, [ip]
  segment_next_head = 1;
 8007758:	491d      	ldr	r1, [pc, #116]	; (80077d0 <st_reset+0xc0>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800775a:	ea00 0406 	and.w	r4, r0, r6
 800775e:	0787      	lsls	r7, r0, #30
  segment_next_head = 1;
 8007760:	700e      	strb	r6, [r1, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007762:	bf48      	it	mi
 8007764:	f044 0402 	orrmi.w	r4, r4, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007768:	079e      	lsls	r6, r3, #30
 800776a:	bf44      	itt	mi
 800776c:	f042 0220 	orrmi.w	r2, r2, #32
 8007770:	b292      	uxthmi	r2, r2
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007772:	0740      	lsls	r0, r0, #29
 8007774:	bf48      	it	mi
 8007776:	f044 0404 	orrmi.w	r4, r4, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800777a:	0759      	lsls	r1, r3, #29
 800777c:	bf48      	it	mi
 800777e:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8007782:	4814      	ldr	r0, [pc, #80]	; (80077d4 <st_reset+0xc4>)
 8007784:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <st_reset+0xc8>)
 8007786:	bf48      	it	mi
 8007788:	b292      	uxthmi	r2, r2
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800778a:	4914      	ldr	r1, [pc, #80]	; (80077dc <st_reset+0xcc>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800778c:	826a      	strh	r2, [r5, #18]
 800778e:	8004      	strh	r4, [r0, #0]
 8007790:	801a      	strh	r2, [r3, #0]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8007792:	880b      	ldrh	r3, [r1, #0]
 8007794:	07db      	lsls	r3, r3, #31
 8007796:	d4fc      	bmi.n	8007792 <st_reset+0x82>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8007798:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800779c:	4810      	ldr	r0, [pc, #64]	; (80077e0 <st_reset+0xd0>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 800779e:	820b      	strh	r3, [r1, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80077a0:	68c3      	ldr	r3, [r0, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80077a2:	f002 0270 	and.w	r2, r2, #112	; 0x70
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80077a6:	f023 0307 	bic.w	r3, r3, #7
 80077aa:	4323      	orrs	r3, r4
 80077ac:	60c3      	str	r3, [r0, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80077ae:	68c3      	ldr	r3, [r0, #12]
 80077b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b4:	431a      	orrs	r2, r3
 80077b6:	60c2      	str	r2, [r0, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 80077b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000d94 	.word	0x20000d94
 80077c0:	20000d08 	.word	0x20000d08
 80077c4:	20001834 	.word	0x20001834
 80077c8:	20000d04 	.word	0x20000d04
 80077cc:	20000d00 	.word	0x20000d00
 80077d0:	20000d92 	.word	0x20000d92
 80077d4:	20000e78 	.word	0x20000e78
 80077d8:	20000d02 	.word	0x20000d02
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40010800 	.word	0x40010800
 80077e4:	20000d91 	.word	0x20000d91
 80077e8:	20000d90 	.word	0x20000d90

080077ec <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 80077ec:	b570      	push	{r4, r5, r6, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80077ee:	2101      	movs	r1, #1
{
 80077f0:	b086      	sub	sp, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80077f2:	4c49      	ldr	r4, [pc, #292]	; (8007918 <stepper_init+0x12c>)
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80077f4:	2004      	movs	r0, #4
 80077f6:	f7f9 fe05 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80077fa:	4b48      	ldr	r3, [pc, #288]	; (800791c <stepper_init+0x130>)
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80077fc:	4620      	mov	r0, r4
 80077fe:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8007800:	9301      	str	r3, [sp, #4]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8007802:	f7f9 fbd1 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 8007806:	2101      	movs	r1, #1
 8007808:	2004      	movs	r0, #4
 800780a:	f7f9 fdfb 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 800780e:	2307      	movs	r3, #7
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8007810:	4620      	mov	r0, r4
 8007812:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8007814:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8007818:	f7f9 fbc6 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 800781c:	2101      	movs	r1, #1
 800781e:	2004      	movs	r0, #4
 8007820:	f7f9 fdf0 	bl	8001404 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8007824:	2370      	movs	r3, #112	; 0x70
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8007826:	2500      	movs	r5, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8007828:	4e3d      	ldr	r6, [pc, #244]	; (8007920 <stepper_init+0x134>)
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 800782a:	4620      	mov	r0, r4
 800782c:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 800782e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8007832:	f7f9 fbb9 	bl	8000fa8 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8007836:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007838:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007840:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8007844:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007848:	f7f9 fde8 	bl	800141c <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800784c:	2101      	movs	r1, #1
 800784e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007852:	f7f9 feb7 	bl	80015c4 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8007856:	2201      	movs	r2, #1
 8007858:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800785c:	4611      	mov	r1, r2
 800785e:	f7f9 fe9f 	bl	80015a0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8007862:	2101      	movs	r1, #1
 8007864:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007868:	f7f9 fe7c 	bl	8001564 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800786c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007870:	f7f9 fa32 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8007874:	4b2b      	ldr	r3, [pc, #172]	; (8007924 <stepper_init+0x138>)
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8007876:	a802      	add	r0, sp, #8
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8007878:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 800787a:	f7f9 fa37 	bl	8000cec <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 800787e:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007880:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8007884:	f043 0302 	orr.w	r3, r3, #2
 8007888:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800788a:	4620      	mov	r0, r4
 800788c:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 800788e:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007892:	f7f9 fdc3 	bl	800141c <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8007896:	4620      	mov	r0, r4
 8007898:	2101      	movs	r1, #1
 800789a:	f7f9 fe93 	bl	80015c4 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 800789e:	2201      	movs	r2, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	4611      	mov	r1, r2
 80078a4:	f7f9 fe7c 	bl	80015a0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 80078a8:	2101      	movs	r1, #1
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7f9 fe5a 	bl	8001564 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80078b0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80078b4:	f7f9 fa10 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <stepper_init+0x13c>)
	NVIC_Init(&NVIC_InitStructure);
 80078ba:	a802      	add	r0, sp, #8
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 80078bc:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 80078be:	f7f9 fa15 	bl	8000cec <NVIC_Init>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80078c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80078c6:	2610      	movs	r6, #16
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80078c8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80078cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80078d0:	8813      	ldrh	r3, [r2, #0]
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	40b3      	lsls	r3, r6
 80078d8:	40f3      	lsrs	r3, r6
 80078da:	8013      	strh	r3, [r2, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 80078dc:	8a13      	ldrh	r3, [r2, #16]
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	40b3      	lsls	r3, r6
 80078e4:	40f3      	lsrs	r3, r6
 80078e6:	8213      	strh	r3, [r2, #16]
	TIM2->CNT = 0;
 80078e8:	8495      	strh	r5, [r2, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80078ea:	8823      	ldrh	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80078ec:	4a0f      	ldr	r2, [pc, #60]	; (800792c <stepper_init+0x140>)
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	40b3      	lsls	r3, r6
 80078f4:	40f3      	lsrs	r3, r6
 80078f6:	8023      	strh	r3, [r4, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 80078f8:	8a23      	ldrh	r3, [r4, #16]
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	40b3      	lsls	r3, r6
 8007900:	40f3      	lsrs	r3, r6
 8007902:	8223      	strh	r3, [r4, #16]
	TIM3->CNT = 0;
 8007904:	84a5      	strh	r5, [r4, #36]	; 0x24
 8007906:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 800790a:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800790e:	6010      	str	r0, [r2, #0]
 8007910:	6011      	str	r1, [r2, #0]
}
 8007912:	b006      	add	sp, #24
 8007914:	bd70      	pop	{r4, r5, r6, pc}
 8007916:	bf00      	nop
 8007918:	40010800 	.word	0x40010800
 800791c:	10038000 	.word	0x10038000
 8007920:	40021000 	.word	0x40021000
 8007924:	0101011c 	.word	0x0101011c
 8007928:	0101011d 	.word	0x0101011d
 800792c:	e000e100 	.word	0xe000e100

08007930 <st_update_plan_block_parameters>:
{
 8007930:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8007932:	4c08      	ldr	r4, [pc, #32]	; (8007954 <st_update_plan_block_parameters+0x24>)
 8007934:	6825      	ldr	r5, [r4, #0]
 8007936:	b15d      	cbz	r5, 8007950 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <st_update_plan_block_parameters+0x28>)
 800793a:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 800793c:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007944:	4608      	mov	r0, r1
 8007946:	f7f8 ffa5 	bl	8000894 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800794a:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 800794c:	6168      	str	r0, [r5, #20]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800794e:	6023      	str	r3, [r4, #0]
}
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	bf00      	nop
 8007954:	20000d04 	.word	0x20000d04
 8007958:	20000d08 	.word	0x20000d08

0800795c <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 800795c:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <st_prep_buffer+0xc0>)
 800795e:	791b      	ldrb	r3, [r3, #4]
 8007960:	07da      	lsls	r2, r3, #31
 8007962:	f100 8478 	bmi.w	8008256 <st_prep_buffer+0x8fa>
{
 8007966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	b08f      	sub	sp, #60	; 0x3c
 800796c:	4b2c      	ldr	r3, [pc, #176]	; (8007a20 <st_prep_buffer+0xc4>)
 800796e:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007970:	4b2c      	ldr	r3, [pc, #176]	; (8007a24 <st_prep_buffer+0xc8>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	42bb      	cmp	r3, r7
 8007976:	f000 824e 	beq.w	8007e16 <st_prep_buffer+0x4ba>
    if (pl_block == NULL) {
 800797a:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <st_prep_buffer+0xcc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 824b 	beq.w	8007e1c <st_prep_buffer+0x4c0>
 8007986:	4c29      	ldr	r4, [pc, #164]	; (8007a2c <st_prep_buffer+0xd0>)
 8007988:	f8d3 a020 	ldr.w	sl, [r3, #32]
 800798c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800798e:	4650      	mov	r0, sl
 8007990:	4619      	mov	r1, r3
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	9402      	str	r4, [sp, #8]
 8007996:	f7f8 fe73 	bl	8000680 <__aeabi_fsub>
 800799a:	4607      	mov	r7, r0
 800799c:	6a22      	ldr	r2, [r4, #32]
 800799e:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <st_prep_buffer+0xd4>)
 80079a0:	9201      	str	r2, [sp, #4]
 80079a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80079a4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80079a8:	9205      	str	r2, [sp, #20]
 80079aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079ac:	7d25      	ldrb	r5, [r4, #20]
 80079ae:	9208      	str	r2, [sp, #32]
 80079b0:	930d      	str	r3, [sp, #52]	; 0x34
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <st_prep_buffer+0xd8>)
    prep_segment->st_block_index = prep.st_block_index;
 80079b4:	9902      	ldr	r1, [sp, #8]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80079b6:	781c      	ldrb	r4, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 80079b8:	481f      	ldr	r0, [pc, #124]	; (8007a38 <st_prep_buffer+0xdc>)
 80079ba:	780a      	ldrb	r2, [r1, #0]
 80079bc:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 80079c0:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 80079c2:	6909      	ldr	r1, [r1, #16]
 80079c4:	4650      	mov	r0, sl
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80079c6:	940b      	str	r4, [sp, #44]	; 0x2c
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 80079c8:	f7f8 fe5a 	bl	8000680 <__aeabi_fsub>
 80079cc:	2100      	movs	r1, #0
 80079ce:	9004      	str	r0, [sp, #16]
    if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 80079d0:	f7f9 f912 	bl	8000bf8 <__aeabi_fcmpge>
    prep_segment->st_block_index = prep.st_block_index;
 80079d4:	00e3      	lsls	r3, r4, #3
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	b908      	cbnz	r0, 80079de <st_prep_buffer+0x82>
 80079da:	2300      	movs	r3, #0
 80079dc:	9304      	str	r3, [sp, #16]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80079de:	4639      	mov	r1, r7
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7f8 fe4f 	bl	8000684 <__addsf3>
 80079e6:	4603      	mov	r3, r0
 80079e8:	9901      	ldr	r1, [sp, #4]
 80079ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80079ee:	9306      	str	r3, [sp, #24]
 80079f0:	f7f9 f804 	bl	80009fc <__aeabi_fdiv>
 80079f4:	4603      	mov	r3, r0
 80079f6:	9903      	ldr	r1, [sp, #12]
 80079f8:	9805      	ldr	r0, [sp, #20]
 80079fa:	9309      	str	r3, [sp, #36]	; 0x24
 80079fc:	f7f9 f8de 	bl	8000bbc <__aeabi_fcmpeq>
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	69df      	ldr	r7, [r3, #28]
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f000 81bd 	beq.w	8007d84 <st_prep_buffer+0x428>
 8007a0a:	f04f 0202 	mov.w	r2, #2
 8007a0e:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8007a3c <st_prep_buffer+0xe0>
 8007a12:	b2d3      	uxtb	r3, r2
 8007a14:	2400      	movs	r4, #0
 8007a16:	465e      	mov	r6, fp
 8007a18:	930a      	str	r3, [sp, #40]	; 0x28
 8007a1a:	e01c      	b.n	8007a56 <st_prep_buffer+0xfa>
 8007a1c:	20001378 	.word	0x20001378
 8007a20:	20000d92 	.word	0x20000d92
 8007a24:	20000d91 	.word	0x20000d91
 8007a28:	20000d04 	.word	0x20000d04
 8007a2c:	20000d08 	.word	0x20000d08
 8007a30:	20000e74 	.word	0x20000e74
 8007a34:	20000d90 	.word	0x20000d90
 8007a38:	20000d40 	.word	0x20000d40
 8007a3c:	392ec33e 	.word	0x392ec33e
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007a40:	4621      	mov	r1, r4
 8007a42:	4630      	mov	r0, r6
 8007a44:	f7f8 fe1c 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007a48:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007a4a:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f7f9 f8dd 	bl	8000c0c <__aeabi_fcmpgt>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d050      	beq.n	8007af8 <st_prep_buffer+0x19c>
      switch (prep.ramp_type) {
 8007a56:	2d01      	cmp	r5, #1
 8007a58:	f000 8131 	beq.w	8007cbe <st_prep_buffer+0x362>
 8007a5c:	2d03      	cmp	r5, #3
 8007a5e:	f000 8111 	beq.w	8007c84 <st_prep_buffer+0x328>
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	f000 80e6 	beq.w	8007c34 <st_prep_buffer+0x2d8>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	69d9      	ldr	r1, [r3, #28]
 8007a6e:	f7f8 ff11 	bl	8000894 <__aeabi_fmul>
 8007a72:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8007a74:	4638      	mov	r0, r7
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f8c8 	bl	8000c0c <__aeabi_fcmpgt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f000 8137 	beq.w	8007cf0 <st_prep_buffer+0x394>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007a82:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007a86:	4648      	mov	r0, r9
 8007a88:	f7f8 ff04 	bl	8000894 <__aeabi_fmul>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fdf7 	bl	8000680 <__aeabi_fsub>
 8007a92:	4659      	mov	r1, fp
 8007a94:	f7f8 fefe 	bl	8000894 <__aeabi_fmul>
 8007a98:	4651      	mov	r1, sl
 8007a9a:	f7f8 fdf3 	bl	8000684 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007a9e:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007aa0:	900c      	str	r0, [sp, #48]	; 0x30
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007aa2:	f7f9 f8b3 	bl	8000c0c <__aeabi_fcmpgt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f000 8122 	beq.w	8007cf0 <st_prep_buffer+0x394>
              prep.current_speed -= speed_var;
 8007aac:	4638      	mov	r0, r7
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f8 fde6 	bl	8000680 <__aeabi_fsub>
 8007ab4:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 8007ab6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
      dt += time_var; // Add computed ramp time to total segment time.
 8007aba:	4659      	mov	r1, fp
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7f8 fde1 	bl	8000684 <__addsf3>
 8007ac2:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f7f9 f8a0 	bl	8000c0c <__aeabi_fcmpgt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1b7      	bne.n	8007a40 <st_prep_buffer+0xe4>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	9804      	ldr	r0, [sp, #16]
 8007ad4:	f7f9 f87c 	bl	8000bd0 <__aeabi_fcmplt>
 8007ad8:	b170      	cbz	r0, 8007af8 <st_prep_buffer+0x19c>
          dt_max += DT_SEGMENT;
 8007ada:	4630      	mov	r0, r6
 8007adc:	49ab      	ldr	r1, [pc, #684]	; (8007d8c <st_prep_buffer+0x430>)
 8007ade:	f7f8 fdd1 	bl	8000684 <__addsf3>
          time_var = dt_max - dt;
 8007ae2:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8007ae4:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8007ae6:	f7f8 fdcb 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007aea:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8007aec:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007aee:	4650      	mov	r0, sl
 8007af0:	f7f9 f88c 	bl	8000c0c <__aeabi_fcmpgt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d1ae      	bne.n	8007a56 <st_prep_buffer+0xfa>
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	751d      	strb	r5, [r3, #20]
 8007afc:	61df      	str	r7, [r3, #28]
 8007afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	7c9b      	ldrb	r3, [r3, #18]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8127 	bne.w	8007d58 <st_prep_buffer+0x3fc>
 8007b0a:	4ba1      	ldr	r3, [pc, #644]	; (8007d90 <st_prep_buffer+0x434>)
 8007b0c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8007b10:	f019 0f08 	tst.w	r9, #8
 8007b14:	f040 81d5 	bne.w	8007ec2 <st_prep_buffer+0x566>
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	8e98      	ldrh	r0, [r3, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8007b1c:	9a07      	ldr	r2, [sp, #28]
 8007b1e:	4b9d      	ldr	r3, [pc, #628]	; (8007d94 <st_prep_buffer+0x438>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8007b20:	9f02      	ldr	r7, [sp, #8]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8007b22:	4413      	add	r3, r2
 8007b24:	80d8      	strh	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	4650      	mov	r0, sl
 8007b2a:	f7f8 feb3 	bl	8000894 <__aeabi_fmul>
 8007b2e:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8007b30:	f002 f95a 	bl	8009de8 <ceilf>
 8007b34:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8007b36:	68b8      	ldr	r0, [r7, #8]
 8007b38:	f002 f956 	bl	8009de8 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8007b3c:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8007b3e:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8007b40:	f7f8 fd9e 	bl	8000680 <__aeabi_fsub>
 8007b44:	f7f9 f8a8 	bl	8000c98 <__aeabi_f2uiz>
 8007b48:	4b92      	ldr	r3, [pc, #584]	; (8007d94 <st_prep_buffer+0x438>)
 8007b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b4c:	fa1f f880 	uxth.w	r8, r0
 8007b50:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8007b54:	f1b8 0f00 	cmp.w	r8, #0
 8007b58:	d103      	bne.n	8007b62 <st_prep_buffer+0x206>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8007b5a:	f019 0f02 	tst.w	r9, #2
 8007b5e:	f040 83ae 	bne.w	80082be <st_prep_buffer+0x962>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	4620      	mov	r0, r4
 8007b66:	6859      	ldr	r1, [r3, #4]
 8007b68:	f7f8 fd8c 	bl	8000684 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007b6c:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8007b6e:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7f8 fd85 	bl	8000680 <__aeabi_fsub>
 8007b76:	4601      	mov	r1, r0
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f7f8 ff3f 	bl	80009fc <__aeabi_fdiv>
 8007b7e:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8007b80:	4a85      	ldr	r2, [pc, #532]	; (8007d98 <st_prep_buffer+0x43c>)
 8007b82:	4b86      	ldr	r3, [pc, #536]	; (8007d9c <st_prep_buffer+0x440>)
 8007b84:	6817      	ldr	r7, [r2, #0]
 8007b86:	4886      	ldr	r0, [pc, #536]	; (8007da0 <st_prep_buffer+0x444>)
 8007b88:	fba3 2307 	umull	r2, r3, r3, r7
 8007b8c:	0c9b      	lsrs	r3, r3, #18
 8007b8e:	fb00 f003 	mul.w	r0, r0, r3
 8007b92:	f7f8 fe27 	bl	80007e4 <__aeabi_ui2f>
 8007b96:	4983      	ldr	r1, [pc, #524]	; (8007da4 <st_prep_buffer+0x448>)
 8007b98:	f7f8 fe7c 	bl	8000894 <__aeabi_fmul>
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f7f8 fe79 	bl	8000894 <__aeabi_fmul>
 8007ba2:	f002 f921 	bl	8009de8 <ceilf>
 8007ba6:	f7f9 f877 	bl	8000c98 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8007baa:	4b7f      	ldr	r3, [pc, #508]	; (8007da8 <st_prep_buffer+0x44c>)
 8007bac:	fba3 3707 	umull	r3, r7, r3, r7
 8007bb0:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8007bb4:	f080 8100 	bcs.w	8007db8 <st_prep_buffer+0x45c>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4b76      	ldr	r3, [pc, #472]	; (8007d94 <st_prep_buffer+0x438>)
 8007bbc:	9907      	ldr	r1, [sp, #28]
 8007bbe:	440b      	add	r3, r1
 8007bc0:	715a      	strb	r2, [r3, #5]
      if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 8007bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	bf28      	it	cs
 8007bca:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8007bcc:	4977      	ldr	r1, [pc, #476]	; (8007dac <st_prep_buffer+0x450>)
 8007bce:	4f71      	ldr	r7, [pc, #452]	; (8007d94 <st_prep_buffer+0x438>)
 8007bd0:	780b      	ldrb	r3, [r1, #0]
 8007bd2:	9a07      	ldr	r2, [sp, #28]
 8007bd4:	443a      	add	r2, r7
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007bd6:	1c5f      	adds	r7, r3, #1
 8007bd8:	b2ff      	uxtb	r7, r7
 8007bda:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8007bdc:	4a74      	ldr	r2, [pc, #464]	; (8007db0 <st_prep_buffer+0x454>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007bde:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8007be0:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007be2:	f000 80fa 	beq.w	8007dda <st_prep_buffer+0x47e>
    pl_block->millimeters = mm_remaining;
 8007be6:	4b73      	ldr	r3, [pc, #460]	; (8007db4 <st_prep_buffer+0x458>)
    prep.steps_remaining = n_steps_remaining;
 8007be8:	9a02      	ldr	r2, [sp, #8]
    pl_block->millimeters = mm_remaining;
 8007bea:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007bec:	700f      	strb	r7, [r1, #0]
    pl_block->millimeters = mm_remaining;
 8007bee:	f8c3 a020 	str.w	sl, [r3, #32]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007bf2:	4631      	mov	r1, r6
    prep.steps_remaining = n_steps_remaining;
 8007bf4:	6095      	str	r5, [r2, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7f8 fd42 	bl	8000680 <__aeabi_fsub>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f7f8 fe49 	bl	8000894 <__aeabi_fmul>
 8007c02:	9b02      	ldr	r3, [sp, #8]
    if (mm_remaining == prep.mm_complete) {
 8007c04:	4651      	mov	r1, sl
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007c06:	6058      	str	r0, [r3, #4]
    if (mm_remaining == prep.mm_complete) {
 8007c08:	6998      	ldr	r0, [r3, #24]
 8007c0a:	f7f8 ffd7 	bl	8000bbc <__aeabi_fcmpeq>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f aeae 	beq.w	8007970 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8007c14:	4650      	mov	r0, sl
 8007c16:	2100      	movs	r1, #0
 8007c18:	f7f8 fff8 	bl	8000c0c <__aeabi_fcmpgt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 834e 	bne.w	80082be <st_prep_buffer+0x962>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007c22:	f019 0304 	ands.w	r3, r9, #4
 8007c26:	f040 834a 	bne.w	80082be <st_prep_buffer+0x962>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8007c2a:	4a62      	ldr	r2, [pc, #392]	; (8007db4 <st_prep_buffer+0x458>)
 8007c2c:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8007c2e:	f7fc fb77 	bl	8004320 <plan_discard_current_block>
 8007c32:	e69b      	b.n	800796c <st_prep_buffer+0x10>
          speed_var = pl_block->acceleration*time_var;
 8007c34:	9b00      	ldr	r3, [sp, #0]
 8007c36:	4658      	mov	r0, fp
 8007c38:	69d9      	ldr	r1, [r3, #28]
 8007c3a:	f7f8 fe2b 	bl	8000894 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007c3e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8007c42:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007c44:	f7f8 fe26 	bl	8000894 <__aeabi_fmul>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	f7f8 fd1b 	bl	8000684 <__addsf3>
 8007c4e:	4659      	mov	r1, fp
 8007c50:	f7f8 fe20 	bl	8000894 <__aeabi_fmul>
 8007c54:	4601      	mov	r1, r0
 8007c56:	4650      	mov	r0, sl
 8007c58:	f7f8 fd12 	bl	8000680 <__aeabi_fsub>
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8007c5c:	9903      	ldr	r1, [sp, #12]
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007c5e:	4682      	mov	sl, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8007c60:	f7f8 ffb6 	bl	8000bd0 <__aeabi_fcmplt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d05b      	beq.n	8007d20 <st_prep_buffer+0x3c4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007c68:	4638      	mov	r0, r7
 8007c6a:	9f01      	ldr	r7, [sp, #4]
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fd09 	bl	8000684 <__addsf3>
 8007c72:	4601      	mov	r1, r0
 8007c74:	9806      	ldr	r0, [sp, #24]
 8007c76:	f7f8 fec1 	bl	80009fc <__aeabi_fdiv>
 8007c7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c7c:	4683      	mov	fp, r0
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8007c7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007c82:	e71a      	b.n	8007aba <st_prep_buffer+0x15e>
          speed_var = pl_block->acceleration*time_var;
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	4658      	mov	r0, fp
 8007c88:	69d9      	ldr	r1, [r3, #28]
 8007c8a:	f7f8 fe03 	bl	8000894 <__aeabi_fmul>
 8007c8e:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	4638      	mov	r0, r7
 8007c94:	f7f8 fcf4 	bl	8000680 <__aeabi_fsub>
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 ffa3 	bl	8000be4 <__aeabi_fcmple>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d044      	beq.n	8007d2c <st_prep_buffer+0x3d0>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	9f01      	ldr	r7, [sp, #4]
            prep.ramp_type = RAMP_CRUISE;
 8007ca6:	2501      	movs	r5, #1
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fceb 	bl	8000684 <__addsf3>
 8007cae:	4601      	mov	r1, r0
 8007cb0:	9806      	ldr	r0, [sp, #24]
 8007cb2:	f7f8 fea3 	bl	80009fc <__aeabi_fdiv>
						mm_remaining = prep.accelerate_until;
 8007cb6:	f8dd a00c 	ldr.w	sl, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007cba:	4683      	mov	fp, r0
            prep.current_speed = prep.maximum_speed;
 8007cbc:	e6fd      	b.n	8007aba <st_prep_buffer+0x15e>
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007cbe:	9901      	ldr	r1, [sp, #4]
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f7f8 fde7 	bl	8000894 <__aeabi_fmul>
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	4650      	mov	r0, sl
 8007cca:	f7f8 fcd9 	bl	8000680 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007cce:	9905      	ldr	r1, [sp, #20]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007cd0:	4681      	mov	r9, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007cd2:	f7f8 ff7d 	bl	8000bd0 <__aeabi_fcmplt>
 8007cd6:	b308      	cbz	r0, 8007d1c <st_prep_buffer+0x3c0>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007cd8:	4650      	mov	r0, sl
 8007cda:	f8dd a014 	ldr.w	sl, [sp, #20]
            prep.ramp_type = RAMP_DECEL;
 8007cde:	2502      	movs	r5, #2
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	f7f8 fccd 	bl	8000680 <__aeabi_fsub>
 8007ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ce8:	f7f8 fdd4 	bl	8000894 <__aeabi_fmul>
 8007cec:	4683      	mov	fp, r0
            prep.ramp_type = RAMP_DECEL;
 8007cee:	e6e4      	b.n	8007aba <st_prep_buffer+0x15e>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	f7f8 fcc4 	bl	8000680 <__aeabi_fsub>
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	f7f8 fcc3 	bl	8000684 <__addsf3>
 8007cfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d02:	4681      	mov	r9, r0
 8007d04:	4651      	mov	r1, sl
 8007d06:	4638      	mov	r0, r7
 8007d08:	f7f8 fcbc 	bl	8000684 <__addsf3>
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4648      	mov	r0, r9
 8007d10:	f7f8 fe74 	bl	80009fc <__aeabi_fdiv>
          prep.current_speed = prep.exit_speed;
 8007d14:	4657      	mov	r7, sl
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007d16:	4683      	mov	fp, r0
          mm_remaining = prep.mm_complete;
 8007d18:	46c2      	mov	sl, r8
 8007d1a:	e6ce      	b.n	8007aba <st_prep_buffer+0x15e>
            mm_remaining = mm_var;
 8007d1c:	46ca      	mov	sl, r9
 8007d1e:	e6cc      	b.n	8007aba <st_prep_buffer+0x15e>
            prep.current_speed += speed_var;
 8007d20:	4638      	mov	r0, r7
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fcae 	bl	8000684 <__addsf3>
 8007d28:	4607      	mov	r7, r0
 8007d2a:	e6c6      	b.n	8007aba <st_prep_buffer+0x15e>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8007d2c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d30:	4648      	mov	r0, r9
 8007d32:	f7f8 fdaf 	bl	8000894 <__aeabi_fmul>
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 fca2 	bl	8000680 <__aeabi_fsub>
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	f7f8 fda9 	bl	8000894 <__aeabi_fmul>
 8007d42:	4601      	mov	r1, r0
 8007d44:	4650      	mov	r0, sl
 8007d46:	f7f8 fc9d 	bl	8000684 <__addsf3>
            prep.current_speed -= speed_var;
 8007d4a:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8007d4c:	4682      	mov	sl, r0
            prep.current_speed -= speed_var;
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7f8 fc96 	bl	8000680 <__aeabi_fsub>
 8007d54:	4607      	mov	r7, r0
 8007d56:	e6b0      	b.n	8007aba <st_prep_buffer+0x15e>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8007d58:	9b00      	ldr	r3, [sp, #0]
 8007d5a:	7c9b      	ldrb	r3, [r3, #18]
 8007d5c:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007d60:	f040 80c9 	bne.w	8007ef6 <st_prep_buffer+0x59a>
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <st_prep_buffer+0x434>)
 8007d66:	f893 9004 	ldrb.w	r9, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007d6a:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8007d6c:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007d6e:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8007d70:	4a07      	ldr	r2, [pc, #28]	; (8007d90 <st_prep_buffer+0x434>)
 8007d72:	6111      	str	r1, [r2, #16]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007d74:	9a02      	ldr	r2, [sp, #8]
 8007d76:	8693      	strh	r3, [r2, #52]	; 0x34
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007d78:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <st_prep_buffer+0x434>)
 8007d7a:	f009 09f7 	and.w	r9, r9, #247	; 0xf7
 8007d7e:	f883 9004 	strb.w	r9, [r3, #4]
 8007d82:	e6cb      	b.n	8007b1c <st_prep_buffer+0x1c0>
 8007d84:	f04f 0201 	mov.w	r2, #1
 8007d88:	e641      	b.n	8007a0e <st_prep_buffer+0xb2>
 8007d8a:	bf00      	nop
 8007d8c:	392ec33e 	.word	0x392ec33e
 8007d90:	20001378 	.word	0x20001378
 8007d94:	20000d40 	.word	0x20000d40
 8007d98:	20000018 	.word	0x20000018
 8007d9c:	431bde83 	.word	0x431bde83
 8007da0:	000f4240 	.word	0x000f4240
 8007da4:	42700000 	.word	0x42700000
 8007da8:	10624dd3 	.word	0x10624dd3
 8007dac:	20000d92 	.word	0x20000d92
 8007db0:	20000d90 	.word	0x20000d90
 8007db4:	20000d04 	.word	0x20000d04
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8007db8:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8007dbc:	f080 8091 	bcs.w	8007ee2 <st_prep_buffer+0x586>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	4aa9      	ldr	r2, [pc, #676]	; (8008068 <st_prep_buffer+0x70c>)
 8007dc4:	9907      	ldr	r1, [sp, #28]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8007dca:	4aa7      	ldr	r2, [pc, #668]	; (8008068 <st_prep_buffer+0x70c>)
 8007dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dce:	fa08 f803 	lsl.w	r8, r8, r3
 8007dd2:	f822 8031 	strh.w	r8, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8007dd6:	40d8      	lsrs	r0, r3
        prep_segment->n_step <<= prep_segment->amass_level;
 8007dd8:	e6f3      	b.n	8007bc2 <st_prep_buffer+0x266>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007dda:	2200      	movs	r2, #0
    prep.steps_remaining = n_steps_remaining;
 8007ddc:	9f02      	ldr	r7, [sp, #8]
    pl_block->millimeters = mm_remaining;
 8007dde:	4ba3      	ldr	r3, [pc, #652]	; (800806c <st_prep_buffer+0x710>)
    prep.steps_remaining = n_steps_remaining;
 8007de0:	60bd      	str	r5, [r7, #8]
    pl_block->millimeters = mm_remaining;
 8007de2:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007de4:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007de6:	4da2      	ldr	r5, [pc, #648]	; (8008070 <st_prep_buffer+0x714>)
    pl_block->millimeters = mm_remaining;
 8007de8:	f8c3 a020 	str.w	sl, [r3, #32]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007dec:	702a      	strb	r2, [r5, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007dee:	4631      	mov	r1, r6
 8007df0:	f7f8 fc46 	bl	8000680 <__aeabi_fsub>
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7f8 fd4d 	bl	8000894 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8007dfa:	69b9      	ldr	r1, [r7, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007dfc:	6078      	str	r0, [r7, #4]
    if (mm_remaining == prep.mm_complete) {
 8007dfe:	4650      	mov	r0, sl
 8007e00:	f7f8 fedc 	bl	8000bbc <__aeabi_fcmpeq>
 8007e04:	4607      	mov	r7, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f47f af04 	bne.w	8007c14 <st_prep_buffer+0x2b8>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007e0c:	4b99      	ldr	r3, [pc, #612]	; (8008074 <st_prep_buffer+0x718>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	42bb      	cmp	r3, r7
 8007e12:	f47f adb2 	bne.w	800797a <st_prep_buffer+0x1e>
}
 8007e16:	b00f      	add	sp, #60	; 0x3c
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8007e1c:	4b96      	ldr	r3, [pc, #600]	; (8008078 <st_prep_buffer+0x71c>)
 8007e1e:	791b      	ldrb	r3, [r3, #4]
 8007e20:	075b      	lsls	r3, r3, #29
 8007e22:	d573      	bpl.n	8007f0c <st_prep_buffer+0x5b0>
 8007e24:	f7fc fa98 	bl	8004358 <plan_get_system_motion_block>
      else { pl_block = plan_get_current_block(); }
 8007e28:	4b90      	ldr	r3, [pc, #576]	; (800806c <st_prep_buffer+0x710>)
 8007e2a:	9000      	str	r0, [sp, #0]
 8007e2c:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0f1      	beq.n	8007e16 <st_prep_buffer+0x4ba>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8007e32:	4992      	ldr	r1, [pc, #584]	; (800807c <st_prep_buffer+0x720>)
 8007e34:	784c      	ldrb	r4, [r1, #1]
 8007e36:	9102      	str	r1, [sp, #8]
 8007e38:	f014 0201 	ands.w	r2, r4, #1
 8007e3c:	d069      	beq.n	8007f12 <st_prep_buffer+0x5b6>
          prep.recalculate_flag = false;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4a8d      	ldr	r2, [pc, #564]	; (8008078 <st_prep_buffer+0x71c>)
 8007e42:	704b      	strb	r3, [r1, #1]
 8007e44:	7916      	ldrb	r6, [r2, #4]
 8007e46:	4b8e      	ldr	r3, [pc, #568]	; (8008080 <st_prep_buffer+0x724>)
 8007e48:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8007e4c:	f006 0502 	and.w	r5, r6, #2
 8007e50:	930d      	str	r3, [sp, #52]	; 0x34
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007e52:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007e5a:	69df      	ldr	r7, [r3, #28]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007e5c:	9b02      	ldr	r3, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007e5e:	4639      	mov	r1, r7
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007e60:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007e62:	f7f8 fdcb 	bl	80009fc <__aeabi_fdiv>
 8007e66:	4601      	mov	r1, r0
 8007e68:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	f000 80b2 	beq.w	8007fd4 <st_prep_buffer+0x678>
				prep.ramp_type = RAMP_DECEL;
 8007e70:	2502      	movs	r5, #2
 8007e72:	9c02      	ldr	r4, [sp, #8]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007e74:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 8007e76:	7525      	strb	r5, [r4, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007e78:	695c      	ldr	r4, [r3, #20]
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7f8 fd0a 	bl	8000894 <__aeabi_fmul>
 8007e80:	4601      	mov	r1, r0
 8007e82:	4650      	mov	r0, sl
 8007e84:	f7f8 fbfc 	bl	8000680 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8007e88:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007e8a:	4680      	mov	r8, r0
				if (decel_dist < 0.0f) {
 8007e8c:	f7f8 fea0 	bl	8000bd0 <__aeabi_fcmplt>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f040 8149 	bne.w	8008128 <st_prep_buffer+0x7cc>
					prep.exit_speed = 0.0f;
 8007e96:	2200      	movs	r2, #0
 8007e98:	9c02      	ldr	r4, [sp, #8]
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					prep.mm_complete = decel_dist; // End of feed hold.
 8007e9e:	f8c4 8018 	str.w	r8, [r4, #24]
					prep.exit_speed = 0.0f;
 8007ea2:	6262      	str	r2, [r4, #36]	; 0x24
 8007ea4:	9103      	str	r1, [sp, #12]
 8007ea6:	f7f8 fbeb 	bl	8000680 <__aeabi_fsub>
 8007eaa:	6a23      	ldr	r3, [r4, #32]
 8007eac:	4607      	mov	r7, r0
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007eb2:	9305      	str	r3, [sp, #20]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9308      	str	r3, [sp, #32]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007eb8:	4b6f      	ldr	r3, [pc, #444]	; (8008078 <st_prep_buffer+0x71c>)
 8007eba:	f046 0608 	orr.w	r6, r6, #8
 8007ebe:	711e      	strb	r6, [r3, #4]
 8007ec0:	e577      	b.n	80079b2 <st_prep_buffer+0x56>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8007ec2:	9b00      	ldr	r3, [sp, #0]
 8007ec4:	7c9b      	ldrb	r3, [r3, #18]
 8007ec6:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007eca:	f43f af4e 	beq.w	8007d6a <st_prep_buffer+0x40e>
          float rpm = pl_block->spindle_speed;
 8007ece:	9b00      	ldr	r3, [sp, #0]
 8007ed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8007ed2:	f7ff f8b9 	bl	8007048 <spindle_compute_pwm_value>
 8007ed6:	4b68      	ldr	r3, [pc, #416]	; (8008078 <st_prep_buffer+0x71c>)
 8007ed8:	f893 9004 	ldrb.w	r9, [r3, #4]
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	8698      	strh	r0, [r3, #52]	; 0x34
 8007ee0:	e74a      	b.n	8007d78 <st_prep_buffer+0x41c>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8007ee2:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8007ee6:	f080 80d3 	bcs.w	8008090 <st_prep_buffer+0x734>
 8007eea:	2302      	movs	r3, #2
 8007eec:	4a5e      	ldr	r2, [pc, #376]	; (8008068 <st_prep_buffer+0x70c>)
 8007eee:	9907      	ldr	r1, [sp, #28]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	7153      	strb	r3, [r2, #5]
 8007ef4:	e769      	b.n	8007dca <st_prep_buffer+0x46e>
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007efe:	f7f8 fcc9 	bl	8000894 <__aeabi_fmul>
 8007f02:	4601      	mov	r1, r0
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7f8 fcc5 	bl	8000894 <__aeabi_fmul>
 8007f0a:	e7e2      	b.n	8007ed2 <st_prep_buffer+0x576>
      else { pl_block = plan_get_current_block(); }
 8007f0c:	f7fc fa30 	bl	8004370 <plan_get_current_block>
 8007f10:	e78a      	b.n	8007e28 <st_prep_buffer+0x4cc>
  block_index++;
 8007f12:	780b      	ldrb	r3, [r1, #0]
 8007f14:	3301      	adds	r3, #1
 8007f16:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	f000 819d 	beq.w	8008258 <st_prep_buffer+0x8fc>
 8007f1e:	4698      	mov	r8, r3
 8007f20:	4606      	mov	r6, r0
 8007f22:	4a58      	ldr	r2, [pc, #352]	; (8008084 <st_prep_buffer+0x728>)
 8007f24:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8007f28:	9201      	str	r2, [sp, #4]
 8007f2a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8007f2e:	9a02      	ldr	r2, [sp, #8]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007f30:	68f0      	ldr	r0, [r6, #12]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8007f32:	7013      	strb	r3, [r2, #0]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007f34:	68b3      	ldr	r3, [r6, #8]
 8007f36:	e9d6 1200 	ldrd	r1, r2, [r6]
 8007f3a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8007f3e:	9b01      	ldr	r3, [sp, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007f40:	8a36      	ldrh	r6, [r6, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007f42:	4f4f      	ldr	r7, [pc, #316]	; (8008080 <st_prep_buffer+0x724>)
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007f44:	eb08 0988 	add.w	r9, r8, r8, lsl #2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007f48:	00c9      	lsls	r1, r1, #3
 8007f4a:	f843 1029 	str.w	r1, [r3, r9, lsl #2]
 8007f4e:	00d2      	lsls	r2, r2, #3
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007f50:	eb03 0989 	add.w	r9, r3, r9, lsl #2
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007f54:	00c1      	lsls	r1, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007f56:	e9c9 2c01 	strd	r2, ip, [r9, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007f5a:	603d      	str	r5, [r7, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007f5c:	f8a9 6010 	strh.w	r6, [r9, #16]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007f60:	f8c9 100c 	str.w	r1, [r9, #12]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007f64:	970d      	str	r7, [sp, #52]	; 0x34
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007f66:	f7f8 fc3d 	bl	80007e4 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007f6a:	9b00      	ldr	r3, [sp, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007f6c:	9f02      	ldr	r7, [sp, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007f6e:	f8d3 a020 	ldr.w	sl, [r3, #32]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007f72:	60b8      	str	r0, [r7, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007f74:	4651      	mov	r1, sl
 8007f76:	f7f8 fd41 	bl	80009fc <__aeabi_fdiv>
 8007f7a:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007f7c:	4842      	ldr	r0, [pc, #264]	; (8008088 <st_prep_buffer+0x72c>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007f7e:	60f9      	str	r1, [r7, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007f80:	f7f8 fd3c 	bl	80009fc <__aeabi_fdiv>
 8007f84:	6138      	str	r0, [r7, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8007f86:	2000      	movs	r0, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007f88:	493b      	ldr	r1, [pc, #236]	; (8008078 <st_prep_buffer+0x71c>)
 8007f8a:	f004 0308 	and.w	r3, r4, #8
 8007f8e:	790e      	ldrb	r6, [r1, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8007f90:	6078      	str	r0, [r7, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007f92:	f006 0502 	and.w	r5, r6, #2
 8007f96:	432b      	orrs	r3, r5
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007f98:	ea4f 0b88 	mov.w	fp, r8, lsl #2
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007f9c:	f040 80e1 	bne.w	8008162 <st_prep_buffer+0x806>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	9b00      	ldr	r3, [sp, #0]
 8007fa4:	6958      	ldr	r0, [r3, #20]
 8007fa6:	f002 f839 	bl	800a01c <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007faa:	4a38      	ldr	r2, [pc, #224]	; (800808c <st_prep_buffer+0x730>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007fac:	9b02      	ldr	r3, [sp, #8]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007fae:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007fb2:	61d8      	str	r0, [r3, #28]
        st_prep_block->is_pwm_rate_adjusted = false;
 8007fb4:	9b03      	ldr	r3, [sp, #12]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007fb6:	0794      	lsls	r4, r2, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8007fb8:	f889 3012 	strb.w	r3, [r9, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007fbc:	f100 8179 	bmi.w	80082b2 <st_prep_buffer+0x956>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	9b02      	ldr	r3, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007fc4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007fc8:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	69d9      	ldr	r1, [r3, #28]
 8007fce:	f7f8 fd15 	bl	80009fc <__aeabi_fdiv>
 8007fd2:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007fd4:	2300      	movs	r3, #0
				prep.accelerate_until = pl_block->millimeters;
 8007fd6:	9a02      	ldr	r2, [sp, #8]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007fd8:	0771      	lsls	r1, r6, #29
				prep.accelerate_until = pl_block->millimeters;
 8007fda:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007fde:	7513      	strb	r3, [r2, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007fe0:	f140 80e6 	bpl.w	80081b0 <st_prep_buffer+0x854>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4698      	mov	r8, r3
 8007fe8:	6253      	str	r3, [r2, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8007fea:	9800      	ldr	r0, [sp, #0]
 8007fec:	f7fc f9fa 	bl	80043e4 <plan_compute_profile_nominal_speed>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	9001      	str	r0, [sp, #4]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8007ff4:	f7f8 fc4e 	bl	8000894 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	; (800806c <st_prep_buffer+0x710>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8007ffa:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007ffc:	681b      	ldr	r3, [r3, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007ffe:	4601      	mov	r1, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008000:	695d      	ldr	r5, [r3, #20]
 8008002:	f8d3 a020 	ldr.w	sl, [r3, #32]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8008006:	4628      	mov	r0, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8008008:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800800a:	f7f8 fdff 	bl	8000c0c <__aeabi_fcmpgt>
 800800e:	2800      	cmp	r0, #0
 8008010:	d045      	beq.n	800809e <st_prep_buffer+0x742>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8008012:	4629      	mov	r1, r5
 8008014:	4630      	mov	r0, r6
 8008016:	f7f8 fb33 	bl	8000680 <__aeabi_fsub>
 800801a:	4621      	mov	r1, r4
 800801c:	f7f8 fc3a 	bl	8000894 <__aeabi_fmul>
 8008020:	4607      	mov	r7, r0
 8008022:	4650      	mov	r0, sl
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fb2d 	bl	8000684 <__addsf3>
 800802a:	9a02      	ldr	r2, [sp, #8]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 800802c:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 800802e:	6290      	str	r0, [r2, #40]	; 0x28
 8008030:	9003      	str	r0, [sp, #12]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8008032:	f7f8 fdd7 	bl	8000be4 <__aeabi_fcmple>
 8008036:	2800      	cmp	r0, #0
 8008038:	f040 80d9 	bne.w	80081ee <st_prep_buffer+0x892>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 800803c:	4641      	mov	r1, r8
 800803e:	4630      	mov	r0, r6
 8008040:	f7f8 fb1e 	bl	8000680 <__aeabi_fsub>
 8008044:	4621      	mov	r1, r4
 8008046:	f7f8 fc25 	bl	8000894 <__aeabi_fmul>
						prep.maximum_speed = nominal_speed;
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	9901      	ldr	r1, [sp, #4]
 800804e:	4a0a      	ldr	r2, [pc, #40]	; (8008078 <st_prep_buffer+0x71c>)
 8008050:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8008054:	6219      	str	r1, [r3, #32]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008056:	62d8      	str	r0, [r3, #44]	; 0x2c
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						prep.maximum_speed = nominal_speed;
 800805a:	2503      	movs	r5, #3
 800805c:	7916      	ldrb	r6, [r2, #4]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 800805e:	9005      	str	r0, [sp, #20]
 8008060:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008064:	9308      	str	r3, [sp, #32]
 8008066:	e727      	b.n	8007eb8 <st_prep_buffer+0x55c>
 8008068:	20000d40 	.word	0x20000d40
 800806c:	20000d04 	.word	0x20000d04
 8008070:	20000d92 	.word	0x20000d92
 8008074:	20000d91 	.word	0x20000d91
 8008078:	20001378 	.word	0x20001378
 800807c:	20000d08 	.word	0x20000d08
 8008080:	20000e74 	.word	0x20000e74
 8008084:	20000dc0 	.word	0x20000dc0
 8008088:	3fa00000 	.word	0x3fa00000
 800808c:	20001834 	.word	0x20001834
        else { prep_segment->amass_level = 3; }
 8008090:	2203      	movs	r2, #3
 8008092:	499c      	ldr	r1, [pc, #624]	; (8008304 <st_prep_buffer+0x9a8>)
 8008094:	9f07      	ldr	r7, [sp, #28]
 8008096:	4613      	mov	r3, r2
 8008098:	4439      	add	r1, r7
 800809a:	714a      	strb	r2, [r1, #5]
 800809c:	e695      	b.n	8007dca <st_prep_buffer+0x46e>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800809e:	4641      	mov	r1, r8
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7f8 faed 	bl	8000680 <__aeabi_fsub>
 80080a6:	4621      	mov	r1, r4
 80080a8:	f7f8 fbf4 	bl	8000894 <__aeabi_fmul>
 80080ac:	4651      	mov	r1, sl
 80080ae:	f7f8 fae9 	bl	8000684 <__addsf3>
				float intersect_distance =
 80080b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80080b6:	f7f8 fbed 	bl	8000894 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 80080ba:	2100      	movs	r1, #0
				float intersect_distance =
 80080bc:	4607      	mov	r7, r0
 80080be:	9003      	str	r0, [sp, #12]
				} else if (intersect_distance > 0.0f) {
 80080c0:	f7f8 fda4 	bl	8000c0c <__aeabi_fcmpgt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f000 80b4 	beq.w	8008232 <st_prep_buffer+0x8d6>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80080ca:	4639      	mov	r1, r7
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7f8 fd9d 	bl	8000c0c <__aeabi_fcmpgt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d077      	beq.n	80081c6 <st_prep_buffer+0x86a>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80080d6:	4641      	mov	r1, r8
 80080d8:	4630      	mov	r0, r6
 80080da:	f7f8 fad1 	bl	8000680 <__aeabi_fsub>
 80080de:	4621      	mov	r1, r4
 80080e0:	f7f8 fbd8 	bl	8000894 <__aeabi_fmul>
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80080e4:	4639      	mov	r1, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80080e6:	9f02      	ldr	r7, [sp, #8]
 80080e8:	9005      	str	r0, [sp, #20]
 80080ea:	62f8      	str	r0, [r7, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80080ec:	f7f8 fd70 	bl	8000bd0 <__aeabi_fcmplt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f000 80b8 	beq.w	8008266 <st_prep_buffer+0x90a>
							prep.maximum_speed = nominal_speed;
 80080f6:	9b01      	ldr	r3, [sp, #4]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
							prep.maximum_speed = nominal_speed;
 80080fc:	623b      	str	r3, [r7, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 80080fe:	f7f8 fd5d 	bl	8000bbc <__aeabi_fcmpeq>
 8008102:	2800      	cmp	r0, #0
 8008104:	f000 80e3 	beq.w	80082ce <st_prep_buffer+0x972>
								prep.ramp_type = RAMP_CRUISE;
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	463c      	mov	r4, r7
 800810c:	4619      	mov	r1, r3
 800810e:	4650      	mov	r0, sl
 8008110:	9303      	str	r3, [sp, #12]
 8008112:	f7f8 fab5 	bl	8000680 <__aeabi_fsub>
 8008116:	4b7c      	ldr	r3, [pc, #496]	; (8008308 <st_prep_buffer+0x9ac>)
 8008118:	4607      	mov	r7, r0
 800811a:	791e      	ldrb	r6, [r3, #4]
 800811c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800811e:	2501      	movs	r5, #1
 8008120:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	e6c7      	b.n	8007eb8 <st_prep_buffer+0x55c>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8008128:	4639      	mov	r1, r7
 800812a:	4638      	mov	r0, r7
 800812c:	f7f8 faaa 	bl	8000684 <__addsf3>
 8008130:	4651      	mov	r1, sl
 8008132:	f7f8 fbaf 	bl	8000894 <__aeabi_fmul>
 8008136:	4601      	mov	r1, r0
 8008138:	4620      	mov	r0, r4
 800813a:	f7f8 faa1 	bl	8000680 <__aeabi_fsub>
 800813e:	f001 ff6d 	bl	800a01c <sqrtf>
 8008142:	9c02      	ldr	r4, [sp, #8]
 8008144:	9008      	str	r0, [sp, #32]
 8008146:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008148:	6260      	str	r0, [r4, #36]	; 0x24
 800814a:	4650      	mov	r0, sl
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	f7f8 fa97 	bl	8000680 <__aeabi_fsub>
 8008152:	6a23      	ldr	r3, [r4, #32]
 8008154:	4607      	mov	r7, r0
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	e6aa      	b.n	8007eb8 <st_prep_buffer+0x55c>
          prep.current_speed = prep.exit_speed;
 8008162:	6a79      	ldr	r1, [r7, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008164:	f024 0408 	bic.w	r4, r4, #8
          prep.current_speed = prep.exit_speed;
 8008168:	61f9      	str	r1, [r7, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 800816a:	4608      	mov	r0, r1
 800816c:	f7f8 fb92 	bl	8000894 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8008170:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008172:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008174:	4b65      	ldr	r3, [pc, #404]	; (800830c <st_prep_buffer+0x9b0>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008176:	6148      	str	r0, [r1, #20]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008178:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800817c:	707c      	strb	r4, [r7, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800817e:	079f      	lsls	r7, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8008180:	f889 2012 	strb.w	r2, [r9, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008184:	f57f ae65 	bpl.w	8007e52 <st_prep_buffer+0x4f6>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8008188:	9b00      	ldr	r3, [sp, #0]
 800818a:	7c9b      	ldrb	r3, [r3, #18]
 800818c:	0698      	lsls	r0, r3, #26
 800818e:	f57f ae60 	bpl.w	8007e52 <st_prep_buffer+0x4f6>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800819a:	f7f8 fc2f 	bl	80009fc <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 800819e:	2301      	movs	r3, #1
 80081a0:	9a01      	ldr	r2, [sp, #4]
 80081a2:	44d8      	add	r8, fp
 80081a4:	eb02 0788 	add.w	r7, r2, r8, lsl #2
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 80081a8:	9a02      	ldr	r2, [sp, #8]
            st_prep_block->is_pwm_rate_adjusted = true;
 80081aa:	74bb      	strb	r3, [r7, #18]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 80081ac:	6310      	str	r0, [r2, #48]	; 0x30
            st_prep_block->is_pwm_rate_adjusted = true;
 80081ae:	e650      	b.n	8007e52 <st_prep_buffer+0x4f6>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80081b0:	f7fc f8f0 	bl	8004394 <plan_get_exec_block_exit_speed_sqr>
 80081b4:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80081b6:	f001 ff31 	bl	800a01c <sqrtf>
 80081ba:	4b55      	ldr	r3, [pc, #340]	; (8008310 <st_prep_buffer+0x9b4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	6258      	str	r0, [r3, #36]	; 0x24
 80081c4:	e711      	b.n	8007fea <st_prep_buffer+0x68e>
            prep.ramp_type = RAMP_DECEL;
 80081c6:	9c02      	ldr	r4, [sp, #8]
 80081c8:	4650      	mov	r0, sl
 80081ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80081cc:	2502      	movs	r5, #2
 80081ce:	4619      	mov	r1, r3
 80081d0:	9303      	str	r3, [sp, #12]
 80081d2:	f7f8 fa55 	bl	8000680 <__aeabi_fsub>
 80081d6:	4b4c      	ldr	r3, [pc, #304]	; (8008308 <st_prep_buffer+0x9ac>)
 80081d8:	6a22      	ldr	r2, [r4, #32]
 80081da:	791e      	ldrb	r6, [r3, #4]
 80081dc:	9201      	str	r2, [sp, #4]
 80081de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80081e2:	4607      	mov	r7, r0
 80081e4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80081e8:	9205      	str	r2, [sp, #20]
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	e664      	b.n	8007eb8 <st_prep_buffer+0x55c>
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	4650      	mov	r0, sl
 80081f2:	69d9      	ldr	r1, [r3, #28]
 80081f4:	f7f8 fb4e 	bl	8000894 <__aeabi_fmul>
 80081f8:	4601      	mov	r1, r0
 80081fa:	f7f8 fa43 	bl	8000684 <__addsf3>
 80081fe:	4601      	mov	r1, r0
 8008200:	4628      	mov	r0, r5
 8008202:	f7f8 fa3d 	bl	8000680 <__aeabi_fsub>
 8008206:	f001 ff09 	bl	800a01c <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 800820a:	9a02      	ldr	r2, [sp, #8]
 800820c:	2502      	movs	r5, #2
 800820e:	7853      	ldrb	r3, [r2, #1]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8008210:	6250      	str	r0, [r2, #36]	; 0x24
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8008212:	f043 0308 	orr.w	r3, r3, #8
 8008216:	7053      	strb	r3, [r2, #1]
 8008218:	4b3b      	ldr	r3, [pc, #236]	; (8008308 <st_prep_buffer+0x9ac>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800821a:	9008      	str	r0, [sp, #32]
 800821c:	791e      	ldrb	r6, [r3, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	6a12      	ldr	r2, [r2, #32]
 8008222:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800822e:	9205      	str	r2, [sp, #20]
 8008230:	e642      	b.n	8007eb8 <st_prep_buffer+0x55c>
					prep.maximum_speed = prep.exit_speed;
 8008232:	2200      	movs	r2, #0
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	9203      	str	r2, [sp, #12]
 8008238:	4a33      	ldr	r2, [pc, #204]	; (8008308 <st_prep_buffer+0x9ac>)
 800823a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800823c:	7916      	ldrb	r6, [r2, #4]
 800823e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008240:	4657      	mov	r7, sl
 8008242:	9205      	str	r2, [sp, #20]
					prep.accelerate_until = 0.0f;
 8008244:	2200      	movs	r2, #0
 8008246:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800824a:	7d1d      	ldrb	r5, [r3, #20]
					prep.maximum_speed = prep.exit_speed;
 800824c:	9101      	str	r1, [sp, #4]
 800824e:	9108      	str	r1, [sp, #32]
					prep.accelerate_until = 0.0f;
 8008250:	629a      	str	r2, [r3, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8008252:	6219      	str	r1, [r3, #32]
 8008254:	e630      	b.n	8007eb8 <st_prep_buffer+0x55c>
 8008256:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008258:	4613      	mov	r3, r2
 800825a:	4a2e      	ldr	r2, [pc, #184]	; (8008314 <st_prep_buffer+0x9b8>)
 800825c:	4698      	mov	r8, r3
 800825e:	4615      	mov	r5, r2
 8008260:	4606      	mov	r6, r0
 8008262:	9201      	str	r2, [sp, #4]
 8008264:	e663      	b.n	8007f2e <st_prep_buffer+0x5d2>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8008266:	9b00      	ldr	r3, [sp, #0]
							prep.accelerate_until = intersect_distance;
 8008268:	f8dd 900c 	ldr.w	r9, [sp, #12]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800826c:	69d9      	ldr	r1, [r3, #28]
							prep.accelerate_until = intersect_distance;
 800826e:	9b02      	ldr	r3, [sp, #8]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8008270:	4608      	mov	r0, r1
							prep.accelerate_until = intersect_distance;
 8008272:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 8008276:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
							prep.accelerate_until = intersect_distance;
 800827a:	461c      	mov	r4, r3
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800827c:	f7f8 fa02 	bl	8000684 <__addsf3>
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 fb07 	bl	8000894 <__aeabi_fmul>
 8008286:	4641      	mov	r1, r8
 8008288:	f7f8 f9fc 	bl	8000684 <__addsf3>
 800828c:	f001 fec6 	bl	800a01c <sqrtf>
 8008290:	4649      	mov	r1, r9
 8008292:	9001      	str	r0, [sp, #4]
 8008294:	6220      	str	r0, [r4, #32]
 8008296:	4650      	mov	r0, sl
 8008298:	f7f8 f9f2 	bl	8000680 <__aeabi_fsub>
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <st_prep_buffer+0x9ac>)
 800829e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082a0:	4607      	mov	r7, r0
 80082a2:	791e      	ldrb	r6, [r3, #4]
 80082a4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80082a8:	7d25      	ldrb	r5, [r4, #20]
 80082aa:	9208      	str	r2, [sp, #32]
 80082ac:	f8cd 9014 	str.w	r9, [sp, #20]
 80082b0:	e602      	b.n	8007eb8 <st_prep_buffer+0x55c>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	7c9b      	ldrb	r3, [r3, #18]
 80082b6:	069b      	lsls	r3, r3, #26
 80082b8:	f53f af6b 	bmi.w	8008192 <st_prep_buffer+0x836>
 80082bc:	e680      	b.n	8007fc0 <st_prep_buffer+0x664>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <st_prep_buffer+0x9ac>)
 80082c0:	f049 0a01 	orr.w	sl, r9, #1
 80082c4:	f883 a004 	strb.w	sl, [r3, #4]
}
 80082c8:	b00f      	add	sp, #60	; 0x3c
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7f8 f9d5 	bl	8000680 <__aeabi_fsub>
 80082d6:	4621      	mov	r1, r4
 80082d8:	f7f8 fadc 	bl	8000894 <__aeabi_fmul>
 80082dc:	9c02      	ldr	r4, [sp, #8]
 80082de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80082e0:	f7f8 f9d0 	bl	8000684 <__addsf3>
 80082e4:	4602      	mov	r2, r0
 80082e6:	9003      	str	r0, [sp, #12]
 80082e8:	4611      	mov	r1, r2
 80082ea:	62a2      	str	r2, [r4, #40]	; 0x28
 80082ec:	4650      	mov	r0, sl
 80082ee:	f7f8 f9c7 	bl	8000680 <__aeabi_fsub>
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <st_prep_buffer+0x9ac>)
 80082f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082f6:	4607      	mov	r7, r0
 80082f8:	791e      	ldrb	r6, [r3, #4]
 80082fa:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80082fe:	7d25      	ldrb	r5, [r4, #20]
 8008300:	9208      	str	r2, [sp, #32]
 8008302:	e5d9      	b.n	8007eb8 <st_prep_buffer+0x55c>
 8008304:	20000d40 	.word	0x20000d40
 8008308:	20001378 	.word	0x20001378
 800830c:	20001834 	.word	0x20001834
 8008310:	20000d04 	.word	0x20000d04
 8008314:	20000dc0 	.word	0x20000dc0

08008318 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <st_get_realtime_rate+0x14>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8008320:	bf1a      	itte	ne
 8008322:	4b03      	ldrne	r3, [pc, #12]	; (8008330 <st_get_realtime_rate+0x18>)
 8008324:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 8008326:	2000      	moveq	r0, #0
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20001378 	.word	0x20001378
 8008330:	20000d08 	.word	0x20000d08

08008334 <system_init>:

#include "grbl.h"


void system_init()
{
 8008334:	b500      	push	{lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8008336:	2101      	movs	r1, #1
{
 8008338:	b085      	sub	sp, #20
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800833a:	2021      	movs	r0, #33	; 0x21
 800833c:	f7f9 f862 	bl	8001404 <RCC_APB2PeriphClockCmd>
#ifdef ABC_AXIS
  // Full SWJ Disabled (JTAG-DP + SW-DP)
  // SWD will work only with "flash under reset" option
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // to enable PA15, PB3, PB4, PA13, PA14 pins
#else
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8008340:	2101      	movs	r1, #1
 8008342:	4817      	ldr	r0, [pc, #92]	; (80083a0 <system_init+0x6c>)
 8008344:	f7f8 ffc8 	bl	80012d8 <GPIO_PinRemapConfig>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8008348:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <system_init+0x70>)
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 800834a:	4669      	mov	r1, sp
 800834c:	4816      	ldr	r0, [pc, #88]	; (80083a8 <system_init+0x74>)
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 800834e:	9300      	str	r3, [sp, #0]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8008350:	f7f8 fe2a 	bl	8000fa8 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8008354:	2105      	movs	r1, #5
 8008356:	2003      	movs	r0, #3
 8008358:	f7f8 fff4 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 800835c:	2106      	movs	r1, #6
 800835e:	2003      	movs	r0, #3
 8008360:	f7f8 fff0 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8008364:	2107      	movs	r1, #7
 8008366:	2003      	movs	r0, #3
 8008368:	f7f8 ffec 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 800836c:	2108      	movs	r1, #8
 800836e:	2003      	movs	r0, #3
 8008370:	f7f8 ffe8 	bl	8001344 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8008374:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8008378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800837c:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 800837e:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8008380:	9102      	str	r1, [sp, #8]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8008382:	f8ad 200c 	strh.w	r2, [sp, #12]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8008386:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_Init(&EXTI_InitStructure);
 800838a:	f7f8 fce1 	bl	8000d50 <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <system_init+0x78>)
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 8008390:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8008392:	9301      	str	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 8008394:	f7f8 fcaa 	bl	8000cec <NVIC_Init>
#endif
}
 8008398:	b005      	add	sp, #20
 800839a:	f85d fb04 	ldr.w	pc, [sp], #4
 800839e:	bf00      	nop
 80083a0:	00300200 	.word	0x00300200
 80083a4:	480301e0 	.word	0x480301e0
 80083a8:	40011400 	.word	0x40011400
 80083ac:	01020217 	.word	0x01020217

080083b0 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 80083b0:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80083b2:	4809      	ldr	r0, [pc, #36]	; (80083d8 <system_control_get_state+0x28>)
 80083b4:	f7f8 ff7e 	bl	80012b4 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80083b8:	4603      	mov	r3, r0
 80083ba:	b158      	cbz	r0, 80083d4 <system_control_get_state+0x24>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80083bc:	f080 0020 	eor.w	r0, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80083c0:	065a      	lsls	r2, r3, #25
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80083c2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80083c6:	bf58      	it	pl
 80083c8:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	d401      	bmi.n	80083d4 <system_control_get_state+0x24>
 80083d0:	f040 0004 	orr.w	r0, r0, #4
  }
  return(control_state);
}
 80083d4:	bd08      	pop	{r3, pc}
 80083d6:	bf00      	nop
 80083d8:	40011400 	.word	0x40011400

080083dc <EXTI9_5_IRQHandler>:
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80083dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
{
 80083e0:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80083e2:	f7f8 fd03 	bl	8000dec <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80083e6:	4810      	ldr	r0, [pc, #64]	; (8008428 <EXTI9_5_IRQHandler+0x4c>)
 80083e8:	f7f8 ff64 	bl	80012b4 <GPIO_ReadInputData>
  if (pin) {
 80083ec:	b140      	cbz	r0, 8008400 <EXTI9_5_IRQHandler+0x24>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80083ee:	0683      	lsls	r3, r0, #26
 80083f0:	d407      	bmi.n	8008402 <EXTI9_5_IRQHandler+0x26>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
		{
			mc_reset();
 80083f2:	f7fb fcc9 	bl	8003d88 <mc_reset>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80083f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <EXTI9_5_IRQHandler+0x50>)
 80083fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 8008400:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8008402:	0641      	lsls	r1, r0, #25
 8008404:	d407      	bmi.n	8008416 <EXTI9_5_IRQHandler+0x3a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8008406:	0603      	lsls	r3, r0, #24
 8008408:	d507      	bpl.n	800841a <EXTI9_5_IRQHandler+0x3e>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 800840a:	4a09      	ldr	r2, [pc, #36]	; (8008430 <EXTI9_5_IRQHandler+0x54>)
 800840c:	7813      	ldrb	r3, [r2, #0]
 800840e:	f043 0308 	orr.w	r3, r3, #8
 8008412:	7013      	strb	r3, [r2, #0]
 8008414:	e7ef      	b.n	80083f6 <EXTI9_5_IRQHandler+0x1a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8008416:	0602      	lsls	r2, r0, #24
 8008418:	d4f2      	bmi.n	8008400 <EXTI9_5_IRQHandler+0x24>
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 800841a:	4a05      	ldr	r2, [pc, #20]	; (8008430 <EXTI9_5_IRQHandler+0x54>)
 800841c:	7813      	ldrb	r3, [r2, #0]
 800841e:	f043 0302 	orr.w	r3, r3, #2
 8008422:	7013      	strb	r3, [r2, #0]
 8008424:	e7e7      	b.n	80083f6 <EXTI9_5_IRQHandler+0x1a>
 8008426:	bf00      	nop
 8008428:	40011400 	.word	0x40011400
 800842c:	e000e100 	.word	0xe000e100
 8008430:	2000138d 	.word	0x2000138d

08008434 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8008434:	2000      	movs	r0, #0
 8008436:	4770      	bx	lr

08008438 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800843e:	4621      	mov	r1, r4
 8008440:	4628      	mov	r0, r5
 8008442:	f7fe fb95 	bl	8006b70 <settings_read_startup_line>
 8008446:	b150      	cbz	r0, 800845e <system_execute_startup+0x26>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8008448:	7823      	ldrb	r3, [r4, #0]
 800844a:	b973      	cbnz	r3, 800846a <system_execute_startup+0x32>
  for (n=0; n < N_STARTUP_LINE; n++) {
 800844c:	b105      	cbz	r5, 8008450 <system_execute_startup+0x18>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	2501      	movs	r5, #1
    if (!(settings_read_startup_line(n, line))) {
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f7fe fb8b 	bl	8006b70 <settings_read_startup_line>
 800845a:	2800      	cmp	r0, #0
 800845c:	d1f4      	bne.n	8008448 <system_execute_startup+0x10>
      line[0] = 0;
 800845e:	7020      	strb	r0, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8008460:	2107      	movs	r1, #7
 8008462:	4620      	mov	r0, r4
 8008464:	f7fd ff6c 	bl	8006340 <report_execute_startup_message>
 8008468:	e7f0      	b.n	800844c <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 800846a:	4620      	mov	r0, r4
 800846c:	f7f9 fa8e 	bl	800198c <gc_execute_line>
 8008470:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 8008472:	4620      	mov	r0, r4
 8008474:	f7fd ff64 	bl	8006340 <report_execute_startup_message>
 8008478:	e7e8      	b.n	800844c <system_execute_startup+0x14>
 800847a:	bf00      	nop

0800847c <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 800847c:	2301      	movs	r3, #1
{
 800847e:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8008480:	7844      	ldrb	r4, [r0, #1]
{
 8008482:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8008484:	2c58      	cmp	r4, #88	; 0x58
{
 8008486:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 8008488:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 800848c:	d825      	bhi.n	80084da <system_execute_line+0x5e>
 800848e:	2c42      	cmp	r4, #66	; 0x42
 8008490:	d805      	bhi.n	800849e <system_execute_line+0x22>
 8008492:	bb04      	cbnz	r4, 80084d6 <system_execute_line+0x5a>
    case 0 : report_grbl_help(); break;
 8008494:	f7fd fb88 	bl	8005ba8 <report_grbl_help>
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8008498:	4620      	mov	r0, r4
 800849a:	b004      	add	sp, #16
 800849c:	bd70      	pop	{r4, r5, r6, pc}
 800849e:	f1a4 0343 	sub.w	r3, r4, #67	; 0x43
 80084a2:	2b15      	cmp	r3, #21
 80084a4:	d819      	bhi.n	80084da <system_execute_line+0x5e>
 80084a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80084aa:	010a      	.short	0x010a
 80084ac:	00180018 	.word	0x00180018
 80084b0:	010a0018 	.word	0x010a0018
 80084b4:	00180018 	.word	0x00180018
 80084b8:	0018002d 	.word	0x0018002d
 80084bc:	00180018 	.word	0x00180018
 80084c0:	00180018 	.word	0x00180018
 80084c4:	00180018 	.word	0x00180018
 80084c8:	00180018 	.word	0x00180018
 80084cc:	00180018 	.word	0x00180018
 80084d0:	00180018 	.word	0x00180018
 80084d4:	010a      	.short	0x010a
  switch( line[char_counter] ) {
 80084d6:	2c24      	cmp	r4, #36	; 0x24
 80084d8:	d024      	beq.n	8008524 <system_execute_line+0xa8>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80084da:	4ea1      	ldr	r6, [pc, #644]	; (8008760 <system_execute_line+0x2e4>)
 80084dc:	7833      	ldrb	r3, [r6, #0]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d815      	bhi.n	800850e <system_execute_line+0x92>
      switch( line[1] ) {
 80084e2:	2c23      	cmp	r4, #35	; 0x23
 80084e4:	f000 811a 	beq.w	800871c <system_execute_line+0x2a0>
 80084e8:	3c48      	subs	r4, #72	; 0x48
 80084ea:	b2e2      	uxtb	r2, r4
 80084ec:	2a0b      	cmp	r2, #11
 80084ee:	d824      	bhi.n	800853a <system_execute_line+0xbe>
 80084f0:	2c0b      	cmp	r4, #11
 80084f2:	d822      	bhi.n	800853a <system_execute_line+0xbe>
 80084f4:	e8df f004 	tbb	[pc, r4]
 80084f8:	2121a6bf 	.word	0x2121a6bf
 80084fc:	21842121 	.word	0x21842121
 8008500:	55662121 	.word	0x55662121
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8008504:	4b96      	ldr	r3, [pc, #600]	; (8008760 <system_execute_line+0x2e4>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800850c:	d003      	beq.n	8008516 <system_execute_line+0x9a>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800850e:	2408      	movs	r4, #8
}
 8008510:	4620      	mov	r0, r4
 8008512:	b004      	add	sp, #16
 8008514:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008516:	7883      	ldrb	r3, [r0, #2]
 8008518:	2b3d      	cmp	r3, #61	; 0x3d
 800851a:	d03e      	beq.n	800859a <system_execute_line+0x11e>
 800851c:	2403      	movs	r4, #3
}
 800851e:	4620      	mov	r0, r4
 8008520:	b004      	add	sp, #16
 8008522:	bd70      	pop	{r4, r5, r6, pc}
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8008524:	7883      	ldrb	r3, [r0, #2]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f8      	bne.n	800851c <system_execute_line+0xa0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 800852a:	4b8d      	ldr	r3, [pc, #564]	; (8008760 <system_execute_line+0x2e4>)
 800852c:	781c      	ldrb	r4, [r3, #0]
 800852e:	f014 0418 	ands.w	r4, r4, #24
 8008532:	d1ec      	bne.n	800850e <system_execute_line+0x92>
          else { report_grbl_settings(); }
 8008534:	f7fd fb3e 	bl	8005bb4 <report_grbl_settings>
          break;
 8008538:	e7ae      	b.n	8008498 <system_execute_line+0x1c>
 800853a:	2400      	movs	r4, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800853c:	4628      	mov	r0, r5
 800853e:	f10d 0107 	add.w	r1, sp, #7
 8008542:	aa02      	add	r2, sp, #8
 8008544:	f7fb fc50 	bl	8003de8 <read_float>
 8008548:	2800      	cmp	r0, #0
 800854a:	f000 80cb 	beq.w	80086e4 <system_execute_line+0x268>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800854e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008552:	1c53      	adds	r3, r2, #1
 8008554:	5caa      	ldrb	r2, [r5, r2]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2a3d      	cmp	r2, #61	; 0x3d
 800855a:	f88d 3007 	strb.w	r3, [sp, #7]
 800855e:	d1dd      	bne.n	800851c <system_execute_line+0xa0>
          if (helper_var) { // Store startup line
 8008560:	2c00      	cmp	r4, #0
 8008562:	f000 8103 	beq.w	800876c <system_execute_line+0x2f0>
 8008566:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8008568:	5ce9      	ldrb	r1, [r5, r3]
 800856a:	1a1a      	subs	r2, r3, r0
 800856c:	54a9      	strb	r1, [r5, r2]
 800856e:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	3301      	adds	r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2a00      	cmp	r2, #0
 8008578:	d1f6      	bne.n	8008568 <system_execute_line+0xec>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 800857a:	4628      	mov	r0, r5
 800857c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008580:	f7f9 fa04 	bl	800198c <gc_execute_line>
            if (helper_var) { return(helper_var); }
 8008584:	4604      	mov	r4, r0
 8008586:	2800      	cmp	r0, #0
 8008588:	d186      	bne.n	8008498 <system_execute_line+0x1c>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 800858a:	9802      	ldr	r0, [sp, #8]
 800858c:	f7f8 fb84 	bl	8000c98 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 8008590:	4629      	mov	r1, r5
 8008592:	b2c0      	uxtb	r0, r0
 8008594:	f7fe fa30 	bl	80069f8 <settings_store_startup_line>
 8008598:	e77e      	b.n	8008498 <system_execute_line+0x1c>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 800859a:	f7f9 f9f7 	bl	800198c <gc_execute_line>
 800859e:	4604      	mov	r4, r0
 80085a0:	e77a      	b.n	8008498 <system_execute_line+0x1c>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80085a2:	78ab      	ldrb	r3, [r5, #2]
 80085a4:	2b4c      	cmp	r3, #76	; 0x4c
 80085a6:	d1b9      	bne.n	800851c <system_execute_line+0xa0>
 80085a8:	78eb      	ldrb	r3, [r5, #3]
 80085aa:	2b50      	cmp	r3, #80	; 0x50
 80085ac:	d1b6      	bne.n	800851c <system_execute_line+0xa0>
 80085ae:	792c      	ldrb	r4, [r5, #4]
 80085b0:	2c00      	cmp	r4, #0
 80085b2:	d1b3      	bne.n	800851c <system_execute_line+0xa0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80085b4:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80085b6:	4a6b      	ldr	r2, [pc, #428]	; (8008764 <system_execute_line+0x2e8>)
 80085b8:	7813      	ldrb	r3, [r2, #0]
 80085ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085be:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80085c0:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085c2:	e769      	b.n	8008498 <system_execute_line+0x1c>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80085c4:	78ab      	ldrb	r3, [r5, #2]
 80085c6:	2b53      	cmp	r3, #83	; 0x53
 80085c8:	d1a8      	bne.n	800851c <system_execute_line+0xa0>
 80085ca:	78eb      	ldrb	r3, [r5, #3]
 80085cc:	2b54      	cmp	r3, #84	; 0x54
 80085ce:	d1a5      	bne.n	800851c <system_execute_line+0xa0>
 80085d0:	792b      	ldrb	r3, [r5, #4]
 80085d2:	2b3d      	cmp	r3, #61	; 0x3d
 80085d4:	d1a2      	bne.n	800851c <system_execute_line+0xa0>
 80085d6:	79ac      	ldrb	r4, [r5, #6]
 80085d8:	2c00      	cmp	r4, #0
 80085da:	d19f      	bne.n	800851c <system_execute_line+0xa0>
          switch (line[5]) {
 80085dc:	796b      	ldrb	r3, [r5, #5]
 80085de:	2b24      	cmp	r3, #36	; 0x24
 80085e0:	f000 80ea 	beq.w	80087b8 <system_execute_line+0x33c>
 80085e4:	2b2a      	cmp	r3, #42	; 0x2a
 80085e6:	f000 80e3 	beq.w	80087b0 <system_execute_line+0x334>
 80085ea:	2b23      	cmp	r3, #35	; 0x23
 80085ec:	d196      	bne.n	800851c <system_execute_line+0xa0>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 80085ee:	2002      	movs	r0, #2
 80085f0:	f7fe fa2c 	bl	8006a4c <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 80085f4:	2009      	movs	r0, #9
 80085f6:	f7fd fa73 	bl	8005ae0 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80085fa:	f7fb fbc5 	bl	8003d88 <mc_reset>
          break;
 80085fe:	e74b      	b.n	8008498 <system_execute_line+0x1c>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8008600:	2202      	movs	r2, #2
 8008602:	78ac      	ldrb	r4, [r5, #2]
 8008604:	f88d 2007 	strb.w	r2, [sp, #7]
 8008608:	2c00      	cmp	r4, #0
 800860a:	f040 808e 	bne.w	800872a <system_execute_line+0x2ae>
              if (!(settings_read_startup_line(helper_var, line))) {
 800860e:	4629      	mov	r1, r5
 8008610:	4620      	mov	r0, r4
 8008612:	f7fe faad 	bl	8006b70 <settings_read_startup_line>
 8008616:	2800      	cmp	r0, #0
 8008618:	f000 809e 	beq.w	8008758 <system_execute_line+0x2dc>
                report_startup_line(helper_var,line);
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7fd fe76 	bl	8006310 <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 8008624:	4629      	mov	r1, r5
 8008626:	2001      	movs	r0, #1
 8008628:	f7fe faa2 	bl	8006b70 <settings_read_startup_line>
 800862c:	4604      	mov	r4, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 808e 	beq.w	8008750 <system_execute_line+0x2d4>
                report_startup_line(helper_var,line);
 8008634:	4629      	mov	r1, r5
 8008636:	2001      	movs	r0, #1
 8008638:	f7fd fe6a 	bl	8006310 <report_startup_line>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800863c:	2400      	movs	r4, #0
}
 800863e:	4620      	mov	r0, r4
 8008640:	b004      	add	sp, #16
 8008642:	bd70      	pop	{r4, r5, r6, pc}
          if ( line[++char_counter] == 0 ) {
 8008644:	2302      	movs	r3, #2
 8008646:	78ac      	ldrb	r4, [r5, #2]
 8008648:	f88d 3007 	strb.w	r3, [sp, #7]
 800864c:	2c00      	cmp	r4, #0
 800864e:	d071      	beq.n	8008734 <system_execute_line+0x2b8>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008650:	2c3d      	cmp	r4, #61	; 0x3d
 8008652:	f04f 0303 	mov.w	r3, #3
 8008656:	f47f af61 	bne.w	800851c <system_execute_line+0xa0>
                line[char_counter-helper_var] = line[char_counter];
 800865a:	5cec      	ldrb	r4, [r5, r3]
 800865c:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 800865e:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8008660:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2c00      	cmp	r4, #0
 8008668:	d1f7      	bne.n	800865a <system_execute_line+0x1de>
              settings_store_build_info(line);
 800866a:	4628      	mov	r0, r5
 800866c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008670:	f7fe f9d4 	bl	8006a1c <settings_store_build_info>
 8008674:	e710      	b.n	8008498 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8008676:	4b3c      	ldr	r3, [pc, #240]	; (8008768 <system_execute_line+0x2ec>)
 8008678:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800867c:	06db      	lsls	r3, r3, #27
 800867e:	f140 8095 	bpl.w	80087ac <system_execute_line+0x330>
          sys.state = STATE_HOMING; // Set system state variable
 8008682:	2304      	movs	r3, #4
          if (line[2] == 0) {
 8008684:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8008686:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8008688:	2800      	cmp	r0, #0
 800868a:	f47f af47 	bne.w	800851c <system_execute_line+0xa0>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 800868e:	f7fb faf1 	bl	8003c74 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8008692:	7873      	ldrb	r3, [r6, #1]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1d1      	bne.n	800863c <system_execute_line+0x1c0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8008698:	7033      	strb	r3, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 800869a:	f7fe fe9f 	bl	80073dc <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800869e:	78ac      	ldrb	r4, [r5, #2]
 80086a0:	2c00      	cmp	r4, #0
 80086a2:	d1cb      	bne.n	800863c <system_execute_line+0x1c0>
    if (!(settings_read_startup_line(n, line))) {
 80086a4:	4629      	mov	r1, r5
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7fe fa62 	bl	8006b70 <settings_read_startup_line>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f000 8087 	beq.w	80087c0 <system_execute_line+0x344>
      if (line[0] != 0) {
 80086b2:	782b      	ldrb	r3, [r5, #0]
 80086b4:	b9c3      	cbnz	r3, 80086e8 <system_execute_line+0x26c>
  for (n=0; n < N_STARTUP_LINE; n++) {
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d1c0      	bne.n	800863c <system_execute_line+0x1c0>
 80086ba:	2401      	movs	r4, #1
 80086bc:	e7f2      	b.n	80086a4 <system_execute_line+0x228>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80086be:	7885      	ldrb	r5, [r0, #2]
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	f47f af2b 	bne.w	800851c <system_execute_line+0xa0>
      switch( line[1] ) {
 80086c6:	2c47      	cmp	r4, #71	; 0x47
 80086c8:	d025      	beq.n	8008716 <system_execute_line+0x29a>
 80086ca:	d915      	bls.n	80086f8 <system_execute_line+0x27c>
 80086cc:	2c58      	cmp	r4, #88	; 0x58
 80086ce:	d1b5      	bne.n	800863c <system_execute_line+0x1c0>
          if (sys.state == STATE_ALARM) {
 80086d0:	4e23      	ldr	r6, [pc, #140]	; (8008760 <system_execute_line+0x2e4>)
 80086d2:	7833      	ldrb	r3, [r6, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d1b1      	bne.n	800863c <system_execute_line+0x1c0>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80086d8:	2003      	movs	r0, #3
 80086da:	f7fd fa01 	bl	8005ae0 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80086de:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 80086e0:	7035      	strb	r5, [r6, #0]
 80086e2:	e6d9      	b.n	8008498 <system_execute_line+0x1c>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80086e4:	2402      	movs	r4, #2
 80086e6:	e6d7      	b.n	8008498 <system_execute_line+0x1c>
        uint8_t status_code = gc_execute_line(line);
 80086e8:	4628      	mov	r0, r5
 80086ea:	f7f9 f94f 	bl	800198c <gc_execute_line>
 80086ee:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 80086f0:	4628      	mov	r0, r5
 80086f2:	f7fd fe25 	bl	8006340 <report_execute_startup_message>
 80086f6:	e7de      	b.n	80086b6 <system_execute_line+0x23a>
 80086f8:	2c43      	cmp	r4, #67	; 0x43
 80086fa:	d19f      	bne.n	800863c <system_execute_line+0x1c0>
          if ( sys.state == STATE_CHECK_MODE ) {
 80086fc:	4b18      	ldr	r3, [pc, #96]	; (8008760 <system_execute_line+0x2e4>)
 80086fe:	781c      	ldrb	r4, [r3, #0]
 8008700:	2c02      	cmp	r4, #2
 8008702:	d01e      	beq.n	8008742 <system_execute_line+0x2c6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8008704:	2c00      	cmp	r4, #0
 8008706:	f47f af02 	bne.w	800850e <system_execute_line+0x92>
            sys.state = STATE_CHECK_MODE;
 800870a:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 800870c:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 800870e:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8008710:	f7fd f9e6 	bl	8005ae0 <report_feedback_message>
 8008714:	e6c0      	b.n	8008498 <system_execute_line+0x1c>
          report_gcode_modes();
 8008716:	f7fd fd43 	bl	80061a0 <report_gcode_modes>
          break;
 800871a:	e78f      	b.n	800863c <system_execute_line+0x1c0>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800871c:	78ac      	ldrb	r4, [r5, #2]
 800871e:	2c00      	cmp	r4, #0
 8008720:	f47f aefc 	bne.w	800851c <system_execute_line+0xa0>
          else { report_ngc_parameters(); }
 8008724:	f7fd fc72 	bl	800600c <report_ngc_parameters>
          break;
 8008728:	e6b6      	b.n	8008498 <system_execute_line+0x1c>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800872a:	2b00      	cmp	r3, #0
 800872c:	f47f aeef 	bne.w	800850e <system_execute_line+0x92>
            helper_var = true;  // Set helper_var to flag storing method.
 8008730:	2401      	movs	r4, #1
 8008732:	e703      	b.n	800853c <system_execute_line+0xc0>
            settings_read_build_info(line);
 8008734:	4628      	mov	r0, r5
 8008736:	f7fe fa37 	bl	8006ba8 <settings_read_build_info>
            report_build_info(line);
 800873a:	4628      	mov	r0, r5
 800873c:	f7fd fe30 	bl	80063a0 <report_build_info>
 8008740:	e6aa      	b.n	8008498 <system_execute_line+0x1c>
            mc_reset();
 8008742:	f7fb fb21 	bl	8003d88 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8008746:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8008748:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 800874a:	f7fd f9c9 	bl	8005ae0 <report_feedback_message>
 800874e:	e6a3      	b.n	8008498 <system_execute_line+0x1c>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8008750:	2007      	movs	r0, #7
 8008752:	f7fd f989 	bl	8005a68 <report_status_message>
 8008756:	e69f      	b.n	8008498 <system_execute_line+0x1c>
 8008758:	2007      	movs	r0, #7
 800875a:	f7fd f985 	bl	8005a68 <report_status_message>
 800875e:	e761      	b.n	8008624 <system_execute_line+0x1a8>
 8008760:	20001378 	.word	0x20001378
 8008764:	2000138d 	.word	0x2000138d
 8008768:	20001834 	.word	0x20001834
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800876c:	4628      	mov	r0, r5
 800876e:	f10d 0107 	add.w	r1, sp, #7
 8008772:	aa03      	add	r2, sp, #12
 8008774:	f7fb fb38 	bl	8003de8 <read_float>
 8008778:	2800      	cmp	r0, #0
 800877a:	d0b3      	beq.n	80086e4 <system_execute_line+0x268>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800877c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008780:	5ceb      	ldrb	r3, [r5, r3]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f47f aeca 	bne.w	800851c <system_execute_line+0xa0>
 8008788:	9c02      	ldr	r4, [sp, #8]
 800878a:	4910      	ldr	r1, [pc, #64]	; (80087cc <system_execute_line+0x350>)
 800878c:	4620      	mov	r0, r4
 800878e:	f7f8 fa3d 	bl	8000c0c <__aeabi_fcmpgt>
 8008792:	2800      	cmp	r0, #0
 8008794:	f47f aec2 	bne.w	800851c <system_execute_line+0xa0>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8008798:	4620      	mov	r0, r4
 800879a:	f7f8 fa7d 	bl	8000c98 <__aeabi_f2uiz>
 800879e:	9c03      	ldr	r4, [sp, #12]
 80087a0:	b2c0      	uxtb	r0, r0
 80087a2:	4621      	mov	r1, r4
 80087a4:	f7fe fa32 	bl	8006c0c <settings_store_global_setting>
 80087a8:	4604      	mov	r4, r0
 80087aa:	e675      	b.n	8008498 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 80087ac:	2405      	movs	r4, #5
 80087ae:	e673      	b.n	8008498 <system_execute_line+0x1c>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 80087b0:	20ff      	movs	r0, #255	; 0xff
 80087b2:	f7fe f94b 	bl	8006a4c <settings_restore>
 80087b6:	e71d      	b.n	80085f4 <system_execute_line+0x178>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 80087b8:	2001      	movs	r0, #1
 80087ba:	f7fe f947 	bl	8006a4c <settings_restore>
 80087be:	e719      	b.n	80085f4 <system_execute_line+0x178>
      line[0] = 0;
 80087c0:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 80087c2:	2107      	movs	r1, #7
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7fd fdbb 	bl	8006340 <report_execute_startup_message>
 80087ca:	e774      	b.n	80086b6 <system_execute_line+0x23a>
 80087cc:	437f0000 	.word	0x437f0000

080087d0 <system_flag_wco_change>:
{
 80087d0:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 80087d2:	f7fd f84b 	bl	800586c <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 80087d6:	2200      	movs	r2, #0
 80087d8:	4b01      	ldr	r3, [pc, #4]	; (80087e0 <system_flag_wco_change+0x10>)
 80087da:	735a      	strb	r2, [r3, #13]
}
 80087dc:	bd08      	pop	{r3, pc}
 80087de:	bf00      	nop
 80087e0:	20001378 	.word	0x20001378

080087e4 <system_convert_array_steps_to_mpos>:
{
 80087e4:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 80087e6:	4e0d      	ldr	r6, [pc, #52]	; (800881c <system_convert_array_steps_to_mpos+0x38>)
{
 80087e8:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 80087ea:	6808      	ldr	r0, [r1, #0]
{
 80087ec:	460d      	mov	r5, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 80087ee:	f7f7 fffd 	bl	80007ec <__aeabi_i2f>
 80087f2:	6831      	ldr	r1, [r6, #0]
 80087f4:	f7f8 f902 	bl	80009fc <__aeabi_fdiv>
 80087f8:	4603      	mov	r3, r0
 80087fa:	6868      	ldr	r0, [r5, #4]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80087fc:	6023      	str	r3, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80087fe:	f7f7 fff5 	bl	80007ec <__aeabi_i2f>
 8008802:	6871      	ldr	r1, [r6, #4]
 8008804:	f7f8 f8fa 	bl	80009fc <__aeabi_fdiv>
 8008808:	4603      	mov	r3, r0
 800880a:	68a8      	ldr	r0, [r5, #8]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800880c:	6063      	str	r3, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 800880e:	f7f7 ffed 	bl	80007ec <__aeabi_i2f>
 8008812:	68b1      	ldr	r1, [r6, #8]
 8008814:	f7f8 f8f2 	bl	80009fc <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8008818:	60a0      	str	r0, [r4, #8]
}
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	20001834 	.word	0x20001834

08008820 <system_check_travel_limits>:
{
 8008820:	b570      	push	{r4, r5, r6, lr}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8008822:	6806      	ldr	r6, [r0, #0]
{
 8008824:	4604      	mov	r4, r0
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8008826:	2100      	movs	r1, #0
 8008828:	4630      	mov	r0, r6
 800882a:	f7f8 f9ef 	bl	8000c0c <__aeabi_fcmpgt>
 800882e:	b9f0      	cbnz	r0, 800886e <system_check_travel_limits+0x4e>
 8008830:	4d10      	ldr	r5, [pc, #64]	; (8008874 <system_check_travel_limits+0x54>)
 8008832:	4630      	mov	r0, r6
 8008834:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008836:	f7f8 f9cb 	bl	8000bd0 <__aeabi_fcmplt>
 800883a:	b9c0      	cbnz	r0, 800886e <system_check_travel_limits+0x4e>
 800883c:	6866      	ldr	r6, [r4, #4]
 800883e:	2100      	movs	r1, #0
 8008840:	4630      	mov	r0, r6
 8008842:	f7f8 f9e3 	bl	8000c0c <__aeabi_fcmpgt>
 8008846:	b990      	cbnz	r0, 800886e <system_check_travel_limits+0x4e>
 8008848:	4630      	mov	r0, r6
 800884a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800884c:	f7f8 f9c0 	bl	8000bd0 <__aeabi_fcmplt>
 8008850:	b968      	cbnz	r0, 800886e <system_check_travel_limits+0x4e>
 8008852:	68a4      	ldr	r4, [r4, #8]
 8008854:	2100      	movs	r1, #0
 8008856:	4620      	mov	r0, r4
 8008858:	f7f8 f9d8 	bl	8000c0c <__aeabi_fcmpgt>
 800885c:	b938      	cbnz	r0, 800886e <system_check_travel_limits+0x4e>
 800885e:	4620      	mov	r0, r4
 8008860:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008862:	f7f8 f9b5 	bl	8000bd0 <__aeabi_fcmplt>
 8008866:	3800      	subs	r0, #0
 8008868:	bf18      	it	ne
 800886a:	2001      	movne	r0, #1
}
 800886c:	bd70      	pop	{r4, r5, r6, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800886e:	2001      	movs	r0, #1
}
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	bf00      	nop
 8008874:	20001834 	.word	0x20001834

08008878 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8008878:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 800887a:	4a03      	ldr	r2, [pc, #12]	; (8008888 <system_set_exec_state_flag+0x10>)
 800887c:	7813      	ldrb	r3, [r2, #0]
 800887e:	4318      	orrs	r0, r3
 8008880:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008882:	b662      	cpsie	i
}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	2000138d 	.word	0x2000138d

0800888c <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 800888c:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800888e:	4a03      	ldr	r2, [pc, #12]	; (800889c <system_clear_exec_state_flag+0x10>)
 8008890:	7813      	ldrb	r3, [r2, #0]
 8008892:	ea23 0000 	bic.w	r0, r3, r0
 8008896:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008898:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800889a:	4770      	bx	lr
 800889c:	2000138d 	.word	0x2000138d

080088a0 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 80088a0:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 80088a2:	4b02      	ldr	r3, [pc, #8]	; (80088ac <system_set_exec_alarm+0xc>)
 80088a4:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 80088a6:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200016b0 	.word	0x200016b0

080088b0 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 80088b0:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 80088b2:	2200      	movs	r2, #0
 80088b4:	4b01      	ldr	r3, [pc, #4]	; (80088bc <system_clear_exec_alarm+0xc>)
 80088b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80088b8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80088ba:	4770      	bx	lr
 80088bc:	200016b0 	.word	0x200016b0

080088c0 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 80088c0:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 80088c2:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <system_set_exec_motion_override_flag+0x10>)
 80088c4:	7813      	ldrb	r3, [r2, #0]
 80088c6:	4318      	orrs	r0, r3
 80088c8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80088ca:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20001374 	.word	0x20001374

080088d4 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 80088d4:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 80088d6:	4a03      	ldr	r2, [pc, #12]	; (80088e4 <system_set_exec_accessory_override_flag+0x10>)
 80088d8:	7813      	ldrb	r3, [r2, #0]
 80088da:	4318      	orrs	r0, r3
 80088dc:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80088de:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	2000138c 	.word	0x2000138c

080088e8 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 80088e8:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <system_clear_exec_motion_overrides+0xc>)
 80088ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80088f0:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80088f2:	4770      	bx	lr
 80088f4:	20001374 	.word	0x20001374

080088f8 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 80088f8:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b01      	ldr	r3, [pc, #4]	; (8008904 <system_clear_exec_accessory_overrides+0xc>)
 80088fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8008900:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008902:	4770      	bx	lr
 8008904:	2000138c 	.word	0x2000138c

08008908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008908:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800890a:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 800890c:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8008910:	4b3a      	ldr	r3, [pc, #232]	; (80089fc <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8008912:	4a3b      	ldr	r2, [pc, #236]	; (8008a00 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8008914:	6819      	ldr	r1, [r3, #0]
{
 8008916:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8008918:	f041 0101 	orr.w	r1, r1, #1
 800891c:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800891e:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8008920:	4618      	mov	r0, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8008922:	400a      	ands	r2, r1
 8008924:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800892c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008930:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008938:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008940:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 8008942:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8008944:	9400      	str	r4, [sp, #0]
 8008946:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e003      	b.n	800895a <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008952:	9b00      	ldr	r3, [sp, #0]
 8008954:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008958:	d009      	beq.n	800896e <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800895a:	6803      	ldr	r3, [r0, #0]
 800895c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008960:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0f1      	beq.n	8008952 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800896e:	4b23      	ldr	r3, [pc, #140]	; (80089fc <SystemInit+0xf4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8008976:	bf18      	it	ne
 8008978:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800897a:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d006      	beq.n	8008990 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008986:	4b1f      	ldr	r3, [pc, #124]	; (8008a04 <SystemInit+0xfc>)
 8008988:	609a      	str	r2, [r3, #8]
}
 800898a:	b002      	add	sp, #8
 800898c:	bc30      	pop	{r4, r5}
 800898e:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008990:	491d      	ldr	r1, [pc, #116]	; (8008a08 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008994:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8008996:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008998:	f040 0010 	orr.w	r0, r0, #16
 800899c:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800899e:	6808      	ldr	r0, [r1, #0]
 80089a0:	f020 0003 	bic.w	r0, r0, #3
 80089a4:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80089a6:	6808      	ldr	r0, [r1, #0]
 80089a8:	f040 0002 	orr.w	r0, r0, #2
 80089ac:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80089ae:	6859      	ldr	r1, [r3, #4]
 80089b0:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80089b2:	6859      	ldr	r1, [r3, #4]
 80089b4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80089b6:	6859      	ldr	r1, [r3, #4]
 80089b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80089bc:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80089be:	6859      	ldr	r1, [r3, #4]
 80089c0:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80089c4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80089c6:	6859      	ldr	r1, [r3, #4]
 80089c8:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80089cc:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80089d4:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	019b      	lsls	r3, r3, #6
 80089da:	d5fc      	bpl.n	80089d6 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80089dc:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80089de:	4907      	ldr	r1, [pc, #28]	; (80089fc <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80089e6:	6853      	ldr	r3, [r2, #4]
 80089e8:	f043 0302 	orr.w	r3, r3, #2
 80089ec:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80089ee:	684b      	ldr	r3, [r1, #4]
 80089f0:	f003 030c 	and.w	r3, r3, #12
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d1fa      	bne.n	80089ee <SystemInit+0xe6>
 80089f8:	e7c3      	b.n	8008982 <SystemInit+0x7a>
 80089fa:	bf00      	nop
 80089fc:	40021000 	.word	0x40021000
 8008a00:	f8ff0000 	.word	0xf8ff0000
 8008a04:	e000ed00 	.word	0xe000ed00
 8008a08:	40022000 	.word	0x40022000

08008a0c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8008a0c:	b508      	push	{r3, lr}
  if (Length == 0)
 8008a0e:	b138      	cbz	r0, 8008a20 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <Standard_GetConfiguration+0x20>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <Standard_GetConfiguration+0x24>)
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	300a      	adds	r0, #10
}
 8008a1e:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8008a20:	2201      	movs	r2, #1
 8008a22:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <Standard_GetConfiguration+0x24>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	821a      	strh	r2, [r3, #16]
}
 8008a28:	bd08      	pop	{r3, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200018bc 	.word	0x200018bc
 8008a30:	200018c0 	.word	0x200018c0

08008a34 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8008a34:	b508      	push	{r3, lr}
  if (Length == 0)
 8008a36:	b138      	cbz	r0, 8008a48 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <Standard_GetInterface+0x20>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <Standard_GetInterface+0x24>)
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	300c      	adds	r0, #12
}
 8008a46:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <Standard_GetInterface+0x24>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	821a      	strh	r2, [r3, #16]
}
 8008a50:	bd08      	pop	{r3, pc}
 8008a52:	bf00      	nop
 8008a54:	200018bc 	.word	0x200018bc
 8008a58:	200018c0 	.word	0x200018c0

08008a5c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8008a5c:	b508      	push	{r3, lr}
  if (Length == 0)
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d036      	beq.n	8008ad0 <Standard_GetStatus+0x74>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8008a62:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008a64:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 8008a66:	491f      	ldr	r1, [pc, #124]	; (8008ae4 <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008a68:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 8008a6a:	8008      	strh	r0, [r1, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008a6c:	7813      	ldrb	r3, [r2, #0]
 8008a6e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8008a72:	d016      	beq.n	8008aa2 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d030      	beq.n	8008ada <Standard_GetStatus+0x7e>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d123      	bne.n	8008ac4 <Standard_GetStatus+0x68>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8008a7c:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8008a7e:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a88:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8008a8c:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8008a8e:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8008a90:	d419      	bmi.n	8008ac6 <Standard_GetStatus+0x6a>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8008a92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d10e      	bne.n	8008aba <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	700b      	strb	r3, [r1, #0]
 8008aa0:	e00b      	b.n	8008aba <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 8008aa2:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 8008aa4:	f012 0320 	ands.w	r3, r2, #32
 8008aa8:	bf1a      	itte	ne
 8008aaa:	2003      	movne	r0, #3
 8008aac:	2302      	movne	r3, #2
 8008aae:	2001      	moveq	r0, #1
      SetBit(StatusInfo0, 0);
 8008ab0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008ab4:	bf18      	it	ne
 8008ab6:	4603      	movne	r3, r0
 8008ab8:	700b      	strb	r3, [r1, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <Standard_GetStatus+0x8c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8008ac2:	4808      	ldr	r0, [pc, #32]	; (8008ae4 <Standard_GetStatus+0x88>)
}
 8008ac4:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 8008ac6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d1f5      	bne.n	8008aba <Standard_GetStatus+0x5e>
 8008ace:	e7e5      	b.n	8008a9c <Standard_GetStatus+0x40>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <Standard_GetStatus+0x84>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	821a      	strh	r2, [r3, #16]
}
 8008ad8:	bd08      	pop	{r3, pc}
    return (uint8_t *)&StatusInfo;
 8008ada:	4608      	mov	r0, r1
}
 8008adc:	bd08      	pop	{r3, pc}
 8008ade:	bf00      	nop
 8008ae0:	200018c0 	.word	0x200018c0
 8008ae4:	20001890 	.word	0x20001890
 8008ae8:	200018bc 	.word	0x200018bc

08008aec <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8008aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8008af0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008b9c <DataStageIn+0xb0>
 8008af4:	f8d8 5000 	ldr.w	r5, [r8]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8008af8:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8008afa:	b92c      	cbnz	r4, 8008b08 <DataStageIn+0x1c>
  uint32_t ControlState = pInformation->ControlState;
 8008afc:	7a2f      	ldrb	r7, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8008afe:	2f04      	cmp	r7, #4
 8008b00:	d02c      	beq.n	8008b5c <DataStageIn+0x70>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8008b02:	2704      	movs	r7, #4
 8008b04:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8008b06:	e004      	b.n	8008b12 <DataStageIn+0x26>
  Length = pEPinfo->PacketSize;
 8008b08:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8008b0a:	4294      	cmp	r4, r2
 8008b0c:	bf94      	ite	ls
 8008b0e:	2704      	movls	r7, #4
 8008b10:	2702      	movhi	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8008b12:	4294      	cmp	r4, r2
 8008b14:	bf28      	it	cs
 8008b16:	4614      	movcs	r4, r2
 8008b18:	69ab      	ldr	r3, [r5, #24]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4798      	blx	r3
 8008b1e:	4606      	mov	r6, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8008b20:	2000      	movs	r0, #0
 8008b22:	f000 fdb5 	bl	8009690 <GetEPTxAddr>
 8008b26:	4622      	mov	r2, r4
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 fcc8 	bl	80094c0 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8008b30:	4621      	mov	r1, r4
 8008b32:	2000      	movs	r0, #0
 8008b34:	f000 fdc8 	bl	80096c8 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8008b38:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8008b3a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8008b3e:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8008b40:	8a6a      	ldrh	r2, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8008b42:	1b1b      	subs	r3, r3, r4
 8008b44:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8008b46:	4414      	add	r4, r2
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8008b48:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8008b4c:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8008b4e:	f8d8 5000 	ldr.w	r5, [r8]
 8008b52:	8010      	strh	r0, [r2, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8008b54:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8008b56:	722f      	strb	r7, [r5, #8]
}
 8008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <DataStageIn+0xa4>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	2a01      	cmp	r2, #1
 8008b62:	d004      	beq.n	8008b6e <DataStageIn+0x82>
      vSetEPTxStatus(EP_TX_STALL);
 8008b64:	2210      	movs	r2, #16
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <DataStageIn+0xa0>)
 8008b68:	2707      	movs	r7, #7
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e7f3      	b.n	8008b56 <DataStageIn+0x6a>
      Send0LengthData();
 8008b6e:	2030      	movs	r0, #48	; 0x30
 8008b70:	4908      	ldr	r1, [pc, #32]	; (8008b94 <DataStageIn+0xa8>)
 8008b72:	4a09      	ldr	r2, [pc, #36]	; (8008b98 <DataStageIn+0xac>)
 8008b74:	6809      	ldr	r1, [r1, #0]
 8008b76:	b289      	uxth	r1, r1
 8008b78:	440a      	add	r2, r1
 8008b7a:	4904      	ldr	r1, [pc, #16]	; (8008b8c <DataStageIn+0xa0>)
 8008b7c:	0052      	lsls	r2, r2, #1
 8008b7e:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8008b80:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8008b82:	8008      	strh	r0, [r1, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8008b84:	e7e7      	b.n	8008b56 <DataStageIn+0x6a>
 8008b86:	bf00      	nop
 8008b88:	200018c6 	.word	0x200018c6
 8008b8c:	200018c8 	.word	0x200018c8
 8008b90:	20000e7c 	.word	0x20000e7c
 8008b94:	40005c50 	.word	0x40005c50
 8008b98:	20003002 	.word	0x20003002
 8008b9c:	200018c0 	.word	0x200018c0

08008ba0 <Standard_SetInterface>:
{
 8008ba0:	b538      	push	{r3, r4, r5, lr}
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8008ba2:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <Standard_SetInterface+0x40>)
 8008ba4:	4c0f      	ldr	r4, [pc, #60]	; (8008be4 <Standard_SetInterface+0x44>)
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	78d9      	ldrb	r1, [r3, #3]
 8008bac:	7958      	ldrb	r0, [r3, #5]
 8008bae:	6993      	ldr	r3, [r2, #24]
 8008bb0:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	7a9a      	ldrb	r2, [r3, #10]
 8008bb6:	b17a      	cbz	r2, 8008bd8 <Standard_SetInterface+0x38>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8008bb8:	b970      	cbnz	r0, 8008bd8 <Standard_SetInterface+0x38>
 8008bba:	791a      	ldrb	r2, [r3, #4]
 8008bbc:	b962      	cbnz	r2, 8008bd8 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8008bbe:	789d      	ldrb	r5, [r3, #2]
 8008bc0:	b955      	cbnz	r5, 8008bd8 <Standard_SetInterface+0x38>
      pUser_Standard_Requests->User_SetInterface();
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <Standard_SetInterface+0x48>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8008bca:	6823      	ldr	r3, [r4, #0]
}
 8008bcc:	4628      	mov	r0, r5
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8008bce:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8008bd0:	78da      	ldrb	r2, [r3, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8008bd2:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8008bd4:	731a      	strb	r2, [r3, #12]
}
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 8008bd8:	2502      	movs	r5, #2
}
 8008bda:	4628      	mov	r0, r5
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	20001898 	.word	0x20001898
 8008be4:	200018c0 	.word	0x200018c0
 8008be8:	200018bc 	.word	0x200018bc

08008bec <Standard_ClearFeature>:
  uint32_t     Type_Rec = Type_Recipient;
 8008bec:	4b2f      	ldr	r3, [pc, #188]	; (8008cac <Standard_ClearFeature+0xc0>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008bf2:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8008bf6:	d02e      	beq.n	8008c56 <Standard_ClearFeature+0x6a>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008bf8:	2802      	cmp	r0, #2
 8008bfa:	d001      	beq.n	8008c00 <Standard_ClearFeature+0x14>
  return USB_UNSUPPORT;
 8008bfc:	2002      	movs	r0, #2
 8008bfe:	4770      	bx	lr
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8008c00:	885a      	ldrh	r2, [r3, #2]
 8008c02:	bb3a      	cbnz	r2, 8008c54 <Standard_ClearFeature+0x68>
        || (pInformation->USBwIndex1 != 0))
 8008c04:	791a      	ldrb	r2, [r3, #4]
 8008c06:	bb2a      	cbnz	r2, 8008c54 <Standard_ClearFeature+0x68>
    wIndex0 = pInformation->USBwIndex0;
 8008c08:	795a      	ldrb	r2, [r3, #5]
{
 8008c0a:	b570      	push	{r4, r5, r6, lr}
    if (ValBit(pInformation->USBwIndex0, 7))
 8008c0c:	b255      	sxtb	r5, r2
    rEP = wIndex0 & ~0x80;
 8008c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8008c12:	0094      	lsls	r4, r2, #2
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8008c14:	4e26      	ldr	r6, [pc, #152]	; (8008cb0 <Standard_ClearFeature+0xc4>)
      Status = _GetEPTxStatus(Related_Endpoint);
 8008c16:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008c1a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8008c1e:	6821      	ldr	r1, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8008c20:	7836      	ldrb	r6, [r6, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8008c22:	2d00      	cmp	r5, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8008c24:	bfb4      	ite	lt
 8008c26:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8008c2a:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8008c2e:	4296      	cmp	r6, r2
 8008c30:	d90f      	bls.n	8008c52 <Standard_ClearFeature+0x66>
 8008c32:	b171      	cbz	r1, 8008c52 <Standard_ClearFeature+0x66>
        || (pInformation->Current_Configuration == 0))
 8008c34:	7a9b      	ldrb	r3, [r3, #10]
 8008c36:	b163      	cbz	r3, 8008c52 <Standard_ClearFeature+0x66>
    if (wIndex0 & 0x80)
 8008c38:	2d00      	cmp	r5, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8008c3a:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8008c3c:	db10      	blt.n	8008c60 <Standard_ClearFeature+0x74>
      if (_GetRxStallStatus(Related_Endpoint))
 8008c3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c46:	d018      	beq.n	8008c7a <Standard_ClearFeature+0x8e>
    pUser_Standard_Requests->User_ClearFeature();
 8008c48:	4b1a      	ldr	r3, [pc, #104]	; (8008cb4 <Standard_ClearFeature+0xc8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	4798      	blx	r3
    return USB_SUCCESS;
 8008c50:	2000      	movs	r0, #0
}
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	4770      	bx	lr
    ClrBit(pInformation->Current_Feature, 5);
 8008c56:	7a5a      	ldrb	r2, [r3, #9]
 8008c58:	f022 0220 	bic.w	r2, r2, #32
 8008c5c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8008c5e:	4770      	bx	lr
      if (_GetTxStallStatus(Related_Endpoint ))
 8008c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d1ef      	bne.n	8008c48 <Standard_ClearFeature+0x5c>
        ClearDTOG_TX(Related_Endpoint);
 8008c68:	b2d4      	uxtb	r4, r2
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fcde 	bl	800962c <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8008c70:	4620      	mov	r0, r4
 8008c72:	2130      	movs	r1, #48	; 0x30
 8008c74:	f000 fc5c 	bl	8009530 <SetEPTxStatus>
 8008c78:	e7e6      	b.n	8008c48 <Standard_ClearFeature+0x5c>
        if (Related_Endpoint == ENDP0)
 8008c7a:	b99a      	cbnz	r2, 8008ca4 <Standard_ClearFeature+0xb8>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8008c7c:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <Standard_ClearFeature+0xcc>)
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008c84:	f000 fd2e 	bl	80096e4 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	e7d1      	b.n	8008c48 <Standard_ClearFeature+0x5c>
          ClearDTOG_RX(Related_Endpoint);
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f000 fcaf 	bl	8009608 <ClearDTOG_RX>
 8008caa:	e7ed      	b.n	8008c88 <Standard_ClearFeature+0x9c>
 8008cac:	200018c0 	.word	0x200018c0
 8008cb0:	200000b0 	.word	0x200000b0
 8008cb4:	200018bc 	.word	0x200018bc
 8008cb8:	20000080 	.word	0x20000080

08008cbc <Standard_SetEndPointFeature>:
{
 8008cbc:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8008cbe:	4b1f      	ldr	r3, [pc, #124]	; (8008d3c <Standard_SetEndPointFeature+0x80>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8008cc0:	4d1f      	ldr	r5, [pc, #124]	; (8008d40 <Standard_SetEndPointFeature+0x84>)
  wIndex0 = pInformation->USBwIndex0;
 8008cc2:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8008cc4:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8008cc6:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8008cc8:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8008cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8008cce:	0093      	lsls	r3, r2, #2
 8008cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cd4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8008cd8:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8008cda:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8008cdc:	bfb4      	ite	lt
 8008cde:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8008ce2:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8008ce6:	4295      	cmp	r5, r2
 8008ce8:	d919      	bls.n	8008d1e <Standard_SetEndPointFeature+0x62>
      || pInformation->USBwValue != 0 || Status == 0
 8008cea:	8842      	ldrh	r2, [r0, #2]
 8008cec:	b9ba      	cbnz	r2, 8008d1e <Standard_SetEndPointFeature+0x62>
 8008cee:	b1b1      	cbz	r1, 8008d1e <Standard_SetEndPointFeature+0x62>
      || pInformation->Current_Configuration == 0)
 8008cf0:	7a82      	ldrb	r2, [r0, #10]
 8008cf2:	b1a2      	cbz	r2, 8008d1e <Standard_SetEndPointFeature+0x62>
    if (wIndex0 & 0x80)
 8008cf4:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8008cf6:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8008cf8:	db13      	blt.n	8008d22 <Standard_SetEndPointFeature+0x66>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8008cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d02:	b292      	uxth	r2, r2
 8008d04:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8008d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d10:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8008d12:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <Standard_SetEndPointFeature+0x88>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	4798      	blx	r3
  return USB_SUCCESS;
 8008d1a:	2000      	movs	r0, #0
}
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
    return USB_UNSUPPORT;
 8008d1e:	2002      	movs	r0, #2
}
 8008d20:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8008d22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2a:	b292      	uxth	r2, r2
 8008d2c:	f082 0210 	eor.w	r2, r2, #16
 8008d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e7ea      	b.n	8008d12 <Standard_SetEndPointFeature+0x56>
 8008d3c:	200018c0 	.word	0x200018c0
 8008d40:	200000b0 	.word	0x200000b0
 8008d44:	200018bc 	.word	0x200018bc

08008d48 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <Standard_GetDescriptorData+0x18>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8008d4e:	b110      	cbz	r0, 8008d56 <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8008d50:	6808      	ldr	r0, [r1, #0]
 8008d52:	4410      	add	r0, r2
}
 8008d54:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8008d56:	8889      	ldrh	r1, [r1, #4]
 8008d58:	1a8a      	subs	r2, r1, r2
 8008d5a:	821a      	strh	r2, [r3, #16]
    return 0;
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	200018c0 	.word	0x200018c0

08008d64 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8008d64:	b570      	push	{r4, r5, r6, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8008d66:	4ea4      	ldr	r6, [pc, #656]	; (8008ff8 <Setup0_Process+0x294>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008d68:	4ba4      	ldr	r3, [pc, #656]	; (8008ffc <Setup0_Process+0x298>)
  if (pInformation->ControlState != PAUSE)
 8008d6a:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008d6c:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8008d6e:	7a23      	ldrb	r3, [r4, #8]
{
 8008d70:	b082      	sub	sp, #8
  if (pInformation->ControlState != PAUSE)
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	f040 8081 	bne.w	8008e7a <Setup0_Process+0x116>
 8008d78:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d150      	bne.n	8008e24 <Setup0_Process+0xc0>
  uint32_t RequestNo = pInformation->USBbRequest;
 8008d82:	7823      	ldrb	r3, [r4, #0]
 8008d84:	7865      	ldrb	r5, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008d86:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8008d8a:	d13c      	bne.n	8008e06 <Setup0_Process+0xa2>
    if (RequestNo == SET_CONFIGURATION)
 8008d8c:	2d09      	cmp	r5, #9
 8008d8e:	f000 80ab 	beq.w	8008ee8 <Setup0_Process+0x184>
    else if (RequestNo == SET_ADDRESS)
 8008d92:	2d05      	cmp	r5, #5
 8008d94:	f000 80bd 	beq.w	8008f12 <Setup0_Process+0x1ae>
    else if (RequestNo == SET_FEATURE)
 8008d98:	2d03      	cmp	r5, #3
 8008d9a:	f000 8145 	beq.w	8009028 <Setup0_Process+0x2c4>
    else if (RequestNo == CLEAR_FEATURE)
 8008d9e:	2d01      	cmp	r5, #1
 8008da0:	f000 811b 	beq.w	8008fda <Setup0_Process+0x276>
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8008da4:	4b96      	ldr	r3, [pc, #600]	; (8009000 <Setup0_Process+0x29c>)
 8008da6:	4628      	mov	r0, r5
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8008dae:	2803      	cmp	r0, #3
 8008db0:	6834      	ldr	r4, [r6, #0]
 8008db2:	f000 80d3 	beq.w	8008f5c <Setup0_Process+0x1f8>
  if (Result != USB_SUCCESS)
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f040 80b7 	bne.w	8008f2a <Setup0_Process+0x1c6>
  USB_StatusIn();
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	4a8f      	ldr	r2, [pc, #572]	; (8008ffc <Setup0_Process+0x298>)
 8008dc0:	4b90      	ldr	r3, [pc, #576]	; (8009004 <Setup0_Process+0x2a0>)
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	2130      	movs	r1, #48	; 0x30
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	4413      	add	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	6018      	str	r0, [r3, #0]
 8008dce:	2306      	movs	r3, #6
 8008dd0:	4a8d      	ldr	r2, [pc, #564]	; (8009008 <Setup0_Process+0x2a4>)
 8008dd2:	8011      	strh	r1, [r2, #0]
  pInformation->ControlState = ControlState;
 8008dd4:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008dd6:	4b8d      	ldr	r3, [pc, #564]	; (800900c <Setup0_Process+0x2a8>)
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008dde:	f000 fc81 	bl	80096e4 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8008de2:	6833      	ldr	r3, [r6, #0]
 8008de4:	7a18      	ldrb	r0, [r3, #8]
 8008de6:	2808      	cmp	r0, #8
 8008de8:	d106      	bne.n	8008df8 <Setup0_Process+0x94>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8008dea:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008dee:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008df0:	4987      	ldr	r1, [pc, #540]	; (8009010 <Setup0_Process+0x2ac>)
    vSetEPTxStatus(EP_TX_STALL);
 8008df2:	4b85      	ldr	r3, [pc, #532]	; (8009008 <Setup0_Process+0x2a4>)
    vSetEPRxStatus(EP_RX_STALL);
 8008df4:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8008df6:	801a      	strh	r2, [r3, #0]
}
 8008df8:	f1a0 0009 	sub.w	r0, r0, #9
 8008dfc:	fab0 f080 	clz	r0, r0
 8008e00:	0940      	lsrs	r0, r0, #5
 8008e02:	b002      	add	sp, #8
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d065      	beq.n	8008ed6 <Setup0_Process+0x172>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d1ca      	bne.n	8008da4 <Setup0_Process+0x40>
    if (RequestNo == CLEAR_FEATURE)
 8008e0e:	2d01      	cmp	r5, #1
 8008e10:	f000 80ef 	beq.w	8008ff2 <Setup0_Process+0x28e>
    else if (RequestNo == SET_FEATURE)
 8008e14:	2d03      	cmp	r5, #3
 8008e16:	d1c5      	bne.n	8008da4 <Setup0_Process+0x40>
      Result = Standard_SetEndPointFeature();
 8008e18:	f7ff ff50 	bl	8008cbc <Standard_SetEndPointFeature>
  if (Result != USB_SUCCESS)
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d1c1      	bne.n	8008da4 <Setup0_Process+0x40>
 8008e20:	6834      	ldr	r4, [r6, #0]
 8008e22:	e7cb      	b.n	8008dbc <Setup0_Process+0x58>
  uint32_t Request_No = pInformation->USBbRequest;
 8008e24:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8008e26:	2806      	cmp	r0, #6
 8008e28:	f000 8081 	beq.w	8008f2e <Setup0_Process+0x1ca>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d13f      	bne.n	8008eb0 <Setup0_Process+0x14c>
 8008e30:	8861      	ldrh	r1, [r4, #2]
 8008e32:	b931      	cbnz	r1, 8008e42 <Setup0_Process+0xde>
           && (pInformation->USBwIndex1 == 0))
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e3e:	f000 810c 	beq.w	800905a <Setup0_Process+0x2f6>
 8008e42:	4b6f      	ldr	r3, [pc, #444]	; (8009000 <Setup0_Process+0x29c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8008e4a:	2803      	cmp	r0, #3
 8008e4c:	f000 8082 	beq.w	8008f54 <Setup0_Process+0x1f0>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8008e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	8a1a      	ldrh	r2, [r3, #16]
 8008e58:	428a      	cmp	r2, r1
 8008e5a:	d039      	beq.n	8008ed0 <Setup0_Process+0x16c>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8008e5c:	2802      	cmp	r0, #2
 8008e5e:	d040      	beq.n	8008ee2 <Setup0_Process+0x17e>
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d03e      	beq.n	8008ee2 <Setup0_Process+0x17e>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8008e64:	f993 1000 	ldrsb.w	r1, [r3]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	db79      	blt.n	8008f60 <Setup0_Process+0x1fc>
    pInformation->ControlState = OUT_DATA;
 8008e6c:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8008e6e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8008e72:	4a67      	ldr	r2, [pc, #412]	; (8009010 <Setup0_Process+0x2ac>)
    pInformation->ControlState = OUT_DATA;
 8008e74:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8008e76:	8011      	strh	r1, [r2, #0]
 8008e78:	e7ad      	b.n	8008dd6 <Setup0_Process+0x72>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008e7a:	4b66      	ldr	r3, [pc, #408]	; (8009014 <Setup0_Process+0x2b0>)
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	4413      	add	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	881d      	ldrh	r5, [r3, #0]
 8008e84:	006d      	lsls	r5, r5, #1
 8008e86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008e8a:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8008e8e:	782b      	ldrb	r3, [r5, #0]
 8008e90:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8008e92:	786b      	ldrb	r3, [r5, #1]
 8008e94:	7063      	strb	r3, [r4, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8008e96:	88a8      	ldrh	r0, [r5, #4]
 8008e98:	f000 fc56 	bl	8009748 <ByteSwap>
 8008e9c:	8060      	strh	r0, [r4, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8008e9e:	8928      	ldrh	r0, [r5, #8]
 8008ea0:	6834      	ldr	r4, [r6, #0]
 8008ea2:	f000 fc51 	bl	8009748 <ByteSwap>
 8008ea6:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8008ea8:	89ab      	ldrh	r3, [r5, #12]
 8008eaa:	6834      	ldr	r4, [r6, #0]
 8008eac:	80e3      	strh	r3, [r4, #6]
 8008eae:	e764      	b.n	8008d7a <Setup0_Process+0x16>
  else if (Request_No == GET_CONFIGURATION)
 8008eb0:	2808      	cmp	r0, #8
 8008eb2:	d164      	bne.n	8008f7e <Setup0_Process+0x21a>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008eb4:	7823      	ldrb	r3, [r4, #0]
 8008eb6:	065b      	lsls	r3, r3, #25
 8008eb8:	d1c3      	bne.n	8008e42 <Setup0_Process+0xde>
      CopyRoutine = Standard_GetConfiguration;
 8008eba:	4a57      	ldr	r2, [pc, #348]	; (8009018 <Setup0_Process+0x2b4>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008ebc:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8008ebe:	61a2      	str	r2, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008ec0:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8008ec2:	4790      	blx	r2
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8008ec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ec8:	6833      	ldr	r3, [r6, #0]
 8008eca:	8a1a      	ldrh	r2, [r3, #16]
 8008ecc:	428a      	cmp	r2, r1
 8008ece:	d1c7      	bne.n	8008e60 <Setup0_Process+0xfc>
    pInformation->ControlState = PAUSE;
 8008ed0:	2209      	movs	r2, #9
 8008ed2:	721a      	strb	r2, [r3, #8]
    return;
 8008ed4:	e77f      	b.n	8008dd6 <Setup0_Process+0x72>
    if (RequestNo == SET_INTERFACE)
 8008ed6:	2d0b      	cmp	r5, #11
 8008ed8:	f47f af64 	bne.w	8008da4 <Setup0_Process+0x40>
      Result = Standard_SetInterface();
 8008edc:	f7ff fe60 	bl	8008ba0 <Standard_SetInterface>
 8008ee0:	e79c      	b.n	8008e1c <Setup0_Process+0xb8>
    pInformation->ControlState = STALLED;
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	721a      	strb	r2, [r3, #8]
    return;
 8008ee6:	e776      	b.n	8008dd6 <Setup0_Process+0x72>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8008ee8:	4a4c      	ldr	r2, [pc, #304]	; (800901c <Setup0_Process+0x2b8>)
  if ((pInformation->USBwValue0 <=
 8008eea:	78e3      	ldrb	r3, [r4, #3]
 8008eec:	7852      	ldrb	r2, [r2, #1]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	f4ff af58 	bcc.w	8008da4 <Setup0_Process+0x40>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8008ef4:	78a2      	ldrb	r2, [r4, #2]
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	f47f af54 	bne.w	8008da4 <Setup0_Process+0x40>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8008efc:	88a2      	ldrh	r2, [r4, #4]
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	f47f af50 	bne.w	8008da4 <Setup0_Process+0x40>
    pUser_Standard_Requests->User_SetConfiguration();
 8008f04:	4a46      	ldr	r2, [pc, #280]	; (8009020 <Setup0_Process+0x2bc>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8008f06:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8008f08:	6813      	ldr	r3, [r2, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	4798      	blx	r3
  if (Result != USB_SUCCESS)
 8008f0e:	6834      	ldr	r4, [r6, #0]
 8008f10:	e754      	b.n	8008dbc <Setup0_Process+0x58>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8008f12:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	db07      	blt.n	8008f2a <Setup0_Process+0x1c6>
 8008f1a:	78a3      	ldrb	r3, [r4, #2]
 8008f1c:	b92b      	cbnz	r3, 8008f2a <Setup0_Process+0x1c6>
          || (pInformation->USBwIndex != 0)
 8008f1e:	88a3      	ldrh	r3, [r4, #4]
 8008f20:	b91b      	cbnz	r3, 8008f2a <Setup0_Process+0x1c6>
          || (pInformation->Current_Configuration != 0))
 8008f22:	7aa3      	ldrb	r3, [r4, #10]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f43f af49 	beq.w	8008dbc <Setup0_Process+0x58>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	e752      	b.n	8008dd4 <Setup0_Process+0x70>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008f2e:	7823      	ldrb	r3, [r4, #0]
 8008f30:	065d      	lsls	r5, r3, #25
 8008f32:	d186      	bne.n	8008e42 <Setup0_Process+0xde>
      uint8_t wValue1 = pInformation->USBwValue1;
 8008f34:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	f000 808b 	beq.w	8009052 <Setup0_Process+0x2ee>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d048      	beq.n	8008fd2 <Setup0_Process+0x26e>
      else if (wValue1 == STRING_DESCRIPTOR)
 8008f40:	2b03      	cmp	r3, #3
        CopyRoutine = pProperty->GetStringDescriptor;
 8008f42:	4b2f      	ldr	r3, [pc, #188]	; (8009000 <Setup0_Process+0x29c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
      else if (wValue1 == STRING_DESCRIPTOR)
 8008f46:	f47f af7e 	bne.w	8008e46 <Setup0_Process+0xe2>
        CopyRoutine = pProperty->GetStringDescriptor;
 8008f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (CopyRoutine)
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	d1b5      	bne.n	8008ebc <Setup0_Process+0x158>
 8008f50:	2006      	movs	r0, #6
 8008f52:	e778      	b.n	8008e46 <Setup0_Process+0xe2>
      pInformation->ControlState = PAUSE;
 8008f54:	2209      	movs	r2, #9
 8008f56:	6833      	ldr	r3, [r6, #0]
 8008f58:	721a      	strb	r2, [r3, #8]
      return;
 8008f5a:	e73c      	b.n	8008dd6 <Setup0_Process+0x72>
    if (Result == USB_NOT_READY)
 8008f5c:	2309      	movs	r3, #9
 8008f5e:	e739      	b.n	8008dd4 <Setup0_Process+0x70>
    __IO uint32_t wLength = pInformation->USBwLength;
 8008f60:	88d9      	ldrh	r1, [r3, #6]
 8008f62:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8008f64:	9801      	ldr	r0, [sp, #4]
 8008f66:	4282      	cmp	r2, r0
 8008f68:	d92c      	bls.n	8008fc4 <Setup0_Process+0x260>
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8008f6a:	4a25      	ldr	r2, [pc, #148]	; (8009000 <Setup0_Process+0x29c>)
 8008f6c:	9901      	ldr	r1, [sp, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	8219      	strh	r1, [r3, #16]
 8008f72:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8008f76:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8008f78:	f7ff fdb8 	bl	8008aec <DataStageIn>
 8008f7c:	e72b      	b.n	8008dd6 <Setup0_Process+0x72>
  else if (Request_No == GET_INTERFACE)
 8008f7e:	280a      	cmp	r0, #10
 8008f80:	f47f af5f 	bne.w	8008e42 <Setup0_Process+0xde>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008f84:	7823      	ldrb	r3, [r4, #0]
 8008f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	f47f af59 	bne.w	8008e42 <Setup0_Process+0xde>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8008f90:	7aa3      	ldrb	r3, [r4, #10]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f43f af55 	beq.w	8008e42 <Setup0_Process+0xde>
 8008f98:	8861      	ldrh	r1, [r4, #2]
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	f47f af51 	bne.w	8008e42 <Setup0_Process+0xde>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008faa:	f47f af4a 	bne.w	8008e42 <Setup0_Process+0xde>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8008fae:	4d14      	ldr	r5, [pc, #80]	; (8009000 <Setup0_Process+0x29c>)
 8008fb0:	7960      	ldrb	r0, [r4, #5]
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	4798      	blx	r3
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f040 809d 	bne.w	80090f8 <Setup0_Process+0x394>
 8008fbe:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8008fc0:	4a18      	ldr	r2, [pc, #96]	; (8009024 <Setup0_Process+0x2c0>)
 8008fc2:	e77b      	b.n	8008ebc <Setup0_Process+0x158>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8008fc4:	4291      	cmp	r1, r2
 8008fc6:	d852      	bhi.n	800906e <Setup0_Process+0x30a>
 8008fc8:	4a0d      	ldr	r2, [pc, #52]	; (8009000 <Setup0_Process+0x29c>)
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008fd0:	e7d1      	b.n	8008f76 <Setup0_Process+0x212>
        CopyRoutine = pProperty->GetConfigDescriptor;
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <Setup0_Process+0x29c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6a1a      	ldr	r2, [r3, #32]
 8008fd8:	e7b8      	b.n	8008f4c <Setup0_Process+0x1e8>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8008fda:	78e3      	ldrb	r3, [r4, #3]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f47f aee1 	bne.w	8008da4 <Setup0_Process+0x40>
          && pInformation->USBwIndex == 0
 8008fe2:	88a3      	ldrh	r3, [r4, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f47f aedd 	bne.w	8008da4 <Setup0_Process+0x40>
          && ValBit(pInformation->Current_Feature, 5))
 8008fea:	7a63      	ldrb	r3, [r4, #9]
 8008fec:	069b      	lsls	r3, r3, #26
 8008fee:	f57f aed9 	bpl.w	8008da4 <Setup0_Process+0x40>
        Result = Standard_ClearFeature();
 8008ff2:	f7ff fdfb 	bl	8008bec <Standard_ClearFeature>
 8008ff6:	e711      	b.n	8008e1c <Setup0_Process+0xb8>
 8008ff8:	200018c0 	.word	0x200018c0
 8008ffc:	40005c50 	.word	0x40005c50
 8009000:	20001898 	.word	0x20001898
 8009004:	20003002 	.word	0x20003002
 8009008:	200018c8 	.word	0x200018c8
 800900c:	20000080 	.word	0x20000080
 8009010:	200018c6 	.word	0x200018c6
 8009014:	20003004 	.word	0x20003004
 8009018:	08008a0d 	.word	0x08008a0d
 800901c:	200000b0 	.word	0x200000b0
 8009020:	200018bc 	.word	0x200018bc
 8009024:	08008a35 	.word	0x08008a35
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8009028:	78e3      	ldrb	r3, [r4, #3]
 800902a:	2b01      	cmp	r3, #1
 800902c:	f47f aeba 	bne.w	8008da4 <Setup0_Process+0x40>
          && (pInformation->USBwIndex == 0)
 8009030:	88a3      	ldrh	r3, [r4, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f47f aeb6 	bne.w	8008da4 <Setup0_Process+0x40>
          && (ValBit(pInformation->Current_Feature, 5)))
 8009038:	7a63      	ldrb	r3, [r4, #9]
 800903a:	069a      	lsls	r2, r3, #26
 800903c:	f57f aeb2 	bpl.w	8008da4 <Setup0_Process+0x40>
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009040:	4a2f      	ldr	r2, [pc, #188]	; (8009100 <Setup0_Process+0x39c>)
  SetBit(pInformation->Current_Feature, 5);
 8009042:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009046:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 8009048:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800904a:	69d3      	ldr	r3, [r2, #28]
 800904c:	4798      	blx	r3
  if (Result != USB_SUCCESS)
 800904e:	6834      	ldr	r4, [r6, #0]
 8009050:	e6b4      	b.n	8008dbc <Setup0_Process+0x58>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009052:	4b2c      	ldr	r3, [pc, #176]	; (8009104 <Setup0_Process+0x3a0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	e778      	b.n	8008f4c <Setup0_Process+0x1e8>
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800905a:	7820      	ldrb	r0, [r4, #0]
 800905c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009060:	d110      	bne.n	8009084 <Setup0_Process+0x320>
        && (pInformation->USBwIndex == 0))
 8009062:	88a3      	ldrh	r3, [r4, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f aeec 	bne.w	8008e42 <Setup0_Process+0xde>
        CopyRoutine = Standard_GetStatus;
 800906a:	4a27      	ldr	r2, [pc, #156]	; (8009108 <Setup0_Process+0x3a4>)
 800906c:	e726      	b.n	8008ebc <Setup0_Process+0x158>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800906e:	4925      	ldr	r1, [pc, #148]	; (8009104 <Setup0_Process+0x3a0>)
 8009070:	6809      	ldr	r1, [r1, #0]
 8009072:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8009076:	4290      	cmp	r0, r2
 8009078:	b281      	uxth	r1, r0
 800907a:	d913      	bls.n	80090a4 <Setup0_Process+0x340>
        Data_Mul_MaxPacketSize = FALSE;
 800907c:	2000      	movs	r0, #0
 800907e:	4a23      	ldr	r2, [pc, #140]	; (800910c <Setup0_Process+0x3a8>)
 8009080:	6010      	str	r0, [r2, #0]
 8009082:	e778      	b.n	8008f76 <Setup0_Process+0x212>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009084:	2801      	cmp	r0, #1
 8009086:	d118      	bne.n	80090ba <Setup0_Process+0x356>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8009088:	4d1e      	ldr	r5, [pc, #120]	; (8009104 <Setup0_Process+0x3a0>)
 800908a:	7960      	ldrb	r0, [r4, #5]
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	4798      	blx	r3
 8009092:	2800      	cmp	r0, #0
 8009094:	d130      	bne.n	80090f8 <Setup0_Process+0x394>
          && (pInformation->Current_Configuration != 0))
 8009096:	6834      	ldr	r4, [r6, #0]
 8009098:	7aa3      	ldrb	r3, [r4, #10]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <Setup0_Process+0x306>
 800909e:	7860      	ldrb	r0, [r4, #1]
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	e6d0      	b.n	8008e46 <Setup0_Process+0xe2>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80090a4:	fbb2 f4f0 	udiv	r4, r2, r0
 80090a8:	fb00 2214 	mls	r2, r0, r4, r2
 80090ac:	2a00      	cmp	r2, #0
 80090ae:	f47f af62 	bne.w	8008f76 <Setup0_Process+0x212>
        Data_Mul_MaxPacketSize = TRUE;
 80090b2:	2001      	movs	r0, #1
 80090b4:	4a15      	ldr	r2, [pc, #84]	; (800910c <Setup0_Process+0x3a8>)
 80090b6:	6010      	str	r0, [r2, #0]
 80090b8:	e75d      	b.n	8008f76 <Setup0_Process+0x212>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80090ba:	2802      	cmp	r0, #2
 80090bc:	d118      	bne.n	80090f0 <Setup0_Process+0x38c>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80090be:	7960      	ldrb	r0, [r4, #5]
 80090c0:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 80090c4:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 80090c6:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 80090c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80090cc:	4910      	ldr	r1, [pc, #64]	; (8009110 <Setup0_Process+0x3ac>)
        Status = _GetEPTxStatus(Related_Endpoint);
 80090ce:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80090d2:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80090d4:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 80090d6:	bf4c      	ite	mi
 80090d8:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 80090dc:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80090e0:	4291      	cmp	r1, r2
 80090e2:	d905      	bls.n	80090f0 <Setup0_Process+0x38c>
 80090e4:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 80090e8:	d102      	bne.n	80090f0 <Setup0_Process+0x38c>
          && (Status != 0))
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1bd      	bne.n	800906a <Setup0_Process+0x306>
 80090ee:	e6a8      	b.n	8008e42 <Setup0_Process+0xde>
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <Setup0_Process+0x3a0>)
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80090f2:	2000      	movs	r0, #0
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	e6a6      	b.n	8008e46 <Setup0_Process+0xe2>
 80090f8:	6832      	ldr	r2, [r6, #0]
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	7850      	ldrb	r0, [r2, #1]
 80090fe:	e6a2      	b.n	8008e46 <Setup0_Process+0xe2>
 8009100:	200018bc 	.word	0x200018bc
 8009104:	20001898 	.word	0x20001898
 8009108:	08008a5d 	.word	0x08008a5d
 800910c:	20000e7c 	.word	0x20000e7c
 8009110:	200000b0 	.word	0x200000b0

08009114 <In0_Process>:
{
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8009116:	4c28      	ldr	r4, [pc, #160]	; (80091b8 <In0_Process+0xa4>)
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800911c:	2a02      	cmp	r2, #2
 800911e:	d01c      	beq.n	800915a <In0_Process+0x46>
 8009120:	2a04      	cmp	r2, #4
 8009122:	d01a      	beq.n	800915a <In0_Process+0x46>
  else if (ControlState == WAIT_STATUS_IN)
 8009124:	2a06      	cmp	r2, #6
 8009126:	d01d      	beq.n	8009164 <In0_Process+0x50>
 8009128:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800912a:	4a24      	ldr	r2, [pc, #144]	; (80091bc <In0_Process+0xa8>)
  pInformation->ControlState = ControlState;
 800912c:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800912e:	2000      	movs	r0, #0
 8009130:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009134:	f000 fad6 	bl	80096e4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	7a18      	ldrb	r0, [r3, #8]
 800913c:	2808      	cmp	r0, #8
 800913e:	d106      	bne.n	800914e <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 8009140:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009144:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009146:	491e      	ldr	r1, [pc, #120]	; (80091c0 <In0_Process+0xac>)
    vSetEPTxStatus(EP_TX_STALL);
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <In0_Process+0xb0>)
    vSetEPRxStatus(EP_RX_STALL);
 800914a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800914c:	801a      	strh	r2, [r3, #0]
}
 800914e:	f1a0 0009 	sub.w	r0, r0, #9
 8009152:	fab0 f080 	clz	r0, r0
 8009156:	0940      	lsrs	r0, r0, #5
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DataStageIn();
 800915a:	f7ff fcc7 	bl	8008aec <DataStageIn>
    ControlState = pInformation->ControlState;
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	7a19      	ldrb	r1, [r3, #8]
 8009162:	e7e2      	b.n	800912a <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8009164:	785a      	ldrb	r2, [r3, #1]
 8009166:	2a05      	cmp	r2, #5
 8009168:	d006      	beq.n	8009178 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800916a:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <In0_Process+0xb4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4798      	blx	r3
    ControlState = STALLED;
 8009172:	2108      	movs	r1, #8
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	e7d8      	b.n	800912a <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800917e:	d1f4      	bne.n	800916a <In0_Process+0x56>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8009180:	4912      	ldr	r1, [pc, #72]	; (80091cc <In0_Process+0xb8>)
      SetDeviceAddress(pInformation->USBwValue0);
 8009182:	78df      	ldrb	r7, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 8009184:	7808      	ldrb	r0, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8009186:	b168      	cbz	r0, 80091a4 <In0_Process+0x90>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009188:	f640 760f 	movw	r6, #3855	; 0xf0f
 800918c:	f248 0580 	movw	r5, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 8009190:	490f      	ldr	r1, [pc, #60]	; (80091d0 <In0_Process+0xbc>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009192:	680b      	ldr	r3, [r1, #0]
 8009194:	4033      	ands	r3, r6
 8009196:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8009198:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800919a:	432b      	orrs	r3, r5
  for (i = 0; i < nEP; i++)
 800919c:	4290      	cmp	r0, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800919e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 80091a2:	d1f6      	bne.n	8009192 <In0_Process+0x7e>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <In0_Process+0xc0>)
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80091a6:	4a0c      	ldr	r2, [pc, #48]	; (80091d8 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 80091a8:	681b      	ldr	r3, [r3, #0]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80091aa:	f047 0780 	orr.w	r7, r7, #128	; 0x80
      pUser_Standard_Requests->User_SetDeviceAddress();
 80091ae:	6a1b      	ldr	r3, [r3, #32]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80091b0:	6017      	str	r7, [r2, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 80091b2:	4798      	blx	r3
 80091b4:	e7d9      	b.n	800916a <In0_Process+0x56>
 80091b6:	bf00      	nop
 80091b8:	200018c0 	.word	0x200018c0
 80091bc:	20000080 	.word	0x20000080
 80091c0:	200018c6 	.word	0x200018c6
 80091c4:	200018c8 	.word	0x200018c8
 80091c8:	20001898 	.word	0x20001898
 80091cc:	200000b0 	.word	0x200000b0
 80091d0:	40005c00 	.word	0x40005c00
 80091d4:	200018bc 	.word	0x200018bc
 80091d8:	40005c4c 	.word	0x40005c4c

080091dc <Out0_Process>:
{
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80091de:	4d3c      	ldr	r5, [pc, #240]	; (80092d0 <Out0_Process+0xf4>)
 80091e0:	682c      	ldr	r4, [r5, #0]
 80091e2:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d007      	beq.n	80091f8 <Out0_Process+0x1c>
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d005      	beq.n	80091f8 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d01c      	beq.n	800922a <Out0_Process+0x4e>
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	d01a      	beq.n	800922a <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	d03a      	beq.n	800926e <Out0_Process+0x92>
 80091f8:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80091fa:	4a36      	ldr	r2, [pc, #216]	; (80092d4 <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 80091fc:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80091fe:	2000      	movs	r0, #0
 8009200:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009204:	f000 fa6e 	bl	80096e4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	7a18      	ldrb	r0, [r3, #8]
 800920c:	2808      	cmp	r0, #8
 800920e:	d106      	bne.n	800921e <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 8009210:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009214:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009216:	4930      	ldr	r1, [pc, #192]	; (80092d8 <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 8009218:	4b30      	ldr	r3, [pc, #192]	; (80092dc <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800921a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800921c:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800921e:	f1a0 0009 	sub.w	r0, r0, #9
 8009222:	fab0 f080 	clz	r0, r0
 8009226:	0940      	lsrs	r0, r0, #5
}
 8009228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800922a:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800922c:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800922e:	b1b3      	cbz	r3, 800925e <Out0_Process+0x82>
 8009230:	b322      	cbz	r2, 800927c <Out0_Process+0xa0>
    Length = pEPinfo->PacketSize;
 8009232:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 8009234:	4296      	cmp	r6, r2
 8009236:	bf28      	it	cs
 8009238:	4616      	movcs	r6, r2
 800923a:	4630      	mov	r0, r6
 800923c:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800923e:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8009240:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 8009242:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 8009244:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 8009246:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8009248:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800924a:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800924c:	2000      	movs	r0, #0
 800924e:	f000 fa2d 	bl	80096ac <GetEPRxAddr>
 8009252:	4632      	mov	r2, r6
 8009254:	4601      	mov	r1, r0
 8009256:	4638      	mov	r0, r7
 8009258:	f000 f942 	bl	80094e0 <PMAToUserBufferCopy>
 800925c:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800925e:	b97a      	cbnz	r2, 8009280 <Out0_Process+0xa4>
 8009260:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8009262:	8aa3      	ldrh	r3, [r4, #20]
 8009264:	bb0b      	cbnz	r3, 80092aa <Out0_Process+0xce>
    pInformation->ControlState = OUT_DATA;
 8009266:	2303      	movs	r3, #3
 8009268:	4614      	mov	r4, r2
 800926a:	7213      	strb	r3, [r2, #8]
 800926c:	e7c5      	b.n	80091fa <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800926e:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <Out0_Process+0x104>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4798      	blx	r3
    ControlState = STALLED;
 8009276:	2308      	movs	r3, #8
 8009278:	682c      	ldr	r4, [r5, #0]
 800927a:	e7be      	b.n	80091fa <Out0_Process+0x1e>
 800927c:	4622      	mov	r2, r4
 800927e:	e7f0      	b.n	8009262 <Out0_Process+0x86>
    SetEPTxCount(ENDP0, 0);
 8009280:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8009282:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 8009288:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800928a:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800928c:	f000 fa1c 	bl	80096c8 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8009290:	2130      	movs	r1, #48	; 0x30
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8009292:	8a23      	ldrh	r3, [r4, #16]
 8009294:	8aa2      	ldrh	r2, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8009296:	4811      	ldr	r0, [pc, #68]	; (80092dc <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8009298:	429a      	cmp	r2, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800929a:	8001      	strh	r1, [r0, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800929c:	d914      	bls.n	80092c8 <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800929e:	b1ab      	cbz	r3, 80092cc <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 80092a0:	2205      	movs	r2, #5
 80092a2:	682c      	ldr	r4, [r5, #0]
 80092a4:	4613      	mov	r3, r2
 80092a6:	7222      	strb	r2, [r4, #8]
 80092a8:	e7a7      	b.n	80091fa <Out0_Process+0x1e>
 80092aa:	480c      	ldr	r0, [pc, #48]	; (80092dc <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 80092ac:	2306      	movs	r3, #6
      USB_StatusIn();
 80092ae:	2700      	movs	r7, #0
 80092b0:	2630      	movs	r6, #48	; 0x30
 80092b2:	490c      	ldr	r1, [pc, #48]	; (80092e4 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 80092b4:	7213      	strb	r3, [r2, #8]
      USB_StatusIn();
 80092b6:	680c      	ldr	r4, [r1, #0]
 80092b8:	490b      	ldr	r1, [pc, #44]	; (80092e8 <Out0_Process+0x10c>)
 80092ba:	b2a4      	uxth	r4, r4
 80092bc:	4421      	add	r1, r4
 80092be:	0049      	lsls	r1, r1, #1
 80092c0:	600f      	str	r7, [r1, #0]
 80092c2:	4614      	mov	r4, r2
 80092c4:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80092c6:	e798      	b.n	80091fa <Out0_Process+0x1e>
 80092c8:	682a      	ldr	r2, [r5, #0]
 80092ca:	e7cc      	b.n	8009266 <Out0_Process+0x8a>
 80092cc:	682a      	ldr	r2, [r5, #0]
 80092ce:	e7ed      	b.n	80092ac <Out0_Process+0xd0>
 80092d0:	200018c0 	.word	0x200018c0
 80092d4:	20000080 	.word	0x20000080
 80092d8:	200018c6 	.word	0x200018c6
 80092dc:	200018c8 	.word	0x200018c8
 80092e0:	20001898 	.word	0x20001898
 80092e4:	40005c50 	.word	0x40005c50
 80092e8:	20003002 	.word	0x20003002

080092ec <SetDeviceAddress>:
{
 80092ec:	b470      	push	{r4, r5, r6}
  uint32_t nEP = Device_Table.Total_Endpoint;
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <SetDeviceAddress+0x34>)
 80092f0:	781c      	ldrb	r4, [r3, #0]
  for (i = 0; i < nEP; i++)
 80092f2:	b174      	cbz	r4, 8009312 <SetDeviceAddress+0x26>
 80092f4:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80092f6:	f640 760f 	movw	r6, #3855	; 0xf0f
 80092fa:	f248 0580 	movw	r5, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 80092fe:	4909      	ldr	r1, [pc, #36]	; (8009324 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009300:	680b      	ldr	r3, [r1, #0]
 8009302:	4033      	ands	r3, r6
 8009304:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8009306:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009308:	432b      	orrs	r3, r5
  for (i = 0; i < nEP; i++)
 800930a:	4294      	cmp	r4, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800930c:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 8009310:	d1f6      	bne.n	8009300 <SetDeviceAddress+0x14>
#endif  /* STM32F10X_CL */  
}
 8009312:	bc70      	pop	{r4, r5, r6}
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8009314:	4b04      	ldr	r3, [pc, #16]	; (8009328 <SetDeviceAddress+0x3c>)
 8009316:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800931a:	6018      	str	r0, [r3, #0]
}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	200000b0 	.word	0x200000b0
 8009324:	40005c00 	.word	0x40005c00
 8009328:	40005c4c 	.word	0x40005c4c

0800932c <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8009330:	2300      	movs	r3, #0
{
 8009332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8009336:	4a5a      	ldr	r2, [pc, #360]	; (80094a0 <CTR_LP+0x170>)
{
 8009338:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
 800933a:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800933e:	6813      	ldr	r3, [r2, #0]
 8009340:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80094b8 <CTR_LP+0x188>
 8009344:	b299      	uxth	r1, r3
 8009346:	0418      	lsls	r0, r3, #16
 8009348:	f8a8 1000 	strh.w	r1, [r8]
 800934c:	f140 8094 	bpl.w	8009478 <CTR_LP+0x148>
 8009350:	4692      	mov	sl, r2
 8009352:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80094bc <CTR_LP+0x18c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8009356:	4e53      	ldr	r6, [pc, #332]	; (80094a4 <CTR_LP+0x174>)
        (*pEpInt_OUT[EPindex-1])();
 8009358:	4f53      	ldr	r7, [pc, #332]	; (80094a8 <CTR_LP+0x178>)
 800935a:	e02f      	b.n	80093bc <CTR_LP+0x8c>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800935c:	f64b 7bbf 	movw	fp, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8009366:	882b      	ldrh	r3, [r5, #0]
 8009368:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800936c:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800936e:	882b      	ldrh	r3, [r5, #0]
 8009370:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009374:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	ea03 030b 	and.w	r3, r3, fp
 800937c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009380:	f083 0320 	eor.w	r3, r3, #32
 8009384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938c:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800938e:	f8b8 3000 	ldrh.w	r3, [r8]
 8009392:	06d9      	lsls	r1, r3, #27
 8009394:	d548      	bpl.n	8009428 <CTR_LP+0xf8>
        wEPVal = _GetENDPOINT(ENDP0);
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal &EP_SETUP) != 0)
 800939e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80093a2:	051a      	lsls	r2, r3, #20
 80093a4:	d46b      	bmi.n	800947e <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 80093a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80093aa:	041b      	lsls	r3, r3, #16
 80093ac:	d46f      	bmi.n	800948e <CTR_LP+0x15e>
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80093ae:	f8da 3000 	ldr.w	r3, [sl]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	041b      	lsls	r3, r3, #16
 80093b6:	f8a8 2000 	strh.w	r2, [r8]
 80093ba:	d55d      	bpl.n	8009478 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80093bc:	f8b8 3000 	ldrh.w	r3, [r8]
	    SaveRState = _GetENDPOINT(ENDP0);
 80093c0:	4c3a      	ldr	r4, [pc, #232]	; (80094ac <CTR_LP+0x17c>)
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80093c2:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 80093c6:	0099      	lsls	r1, r3, #2
 80093c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
	    SaveRState = _GetENDPOINT(ENDP0);
 80093cc:	4d38      	ldr	r5, [pc, #224]	; (80094b0 <CTR_LP+0x180>)
	    SaveTState = SaveRState & EPTX_STAT;
 80093ce:	4a39      	ldr	r2, [pc, #228]	; (80094b4 <CTR_LP+0x184>)
      wEPVal = _GetENDPOINT(EPindex);
 80093d0:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80093d4:	f889 3000 	strb.w	r3, [r9]
    if (EPindex == 0)
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0bf      	beq.n	800935c <CTR_LP+0x2c>
      wEPVal = _GetENDPOINT(EPindex);
 80093dc:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 80093de:	3b01      	subs	r3, #1
      wEPVal = _GetENDPOINT(EPindex);
 80093e0:	b292      	uxth	r2, r2
 80093e2:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 80093e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80093ea:	0410      	lsls	r0, r2, #16
 80093ec:	d507      	bpl.n	80093fe <CTR_LP+0xce>
        _ClearEP_CTR_RX(EPindex);
 80093ee:	f640 748f 	movw	r4, #3983	; 0xf8f
 80093f2:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 80093f4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 80093f8:	4022      	ands	r2, r4
 80093fa:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 80093fc:	4780      	blx	r0
      if ((wEPVal & EP_CTR_TX) != 0)
 80093fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009402:	061a      	lsls	r2, r3, #24
 8009404:	d5d3      	bpl.n	80093ae <CTR_LP+0x7e>
        _ClearEP_CTR_TX(EPindex);
 8009406:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800940a:	f899 2000 	ldrb.w	r2, [r9]
 800940e:	0093      	lsls	r3, r2, #2
 8009410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009414:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009418:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800941a:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800941c:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800941e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 8009422:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 8009424:	4790      	blx	r2
 8009426:	e7c2      	b.n	80093ae <CTR_LP+0x7e>
        _ClearEP_CTR_TX(ENDP0);
 8009428:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	400b      	ands	r3, r1
 8009430:	6023      	str	r3, [r4, #0]
        In0_Process();
 8009432:	f7ff fe6f 	bl	8009114 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	8829      	ldrh	r1, [r5, #0]
 800943a:	ea03 0b0b 	and.w	fp, r3, fp
 800943e:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <CTR_LP+0x184>)
 8009440:	882b      	ldrh	r3, [r5, #0]
 8009442:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8009446:	bf18      	it	ne
 8009448:	f48b 5b80 	eorne.w	fp, fp, #4096	; 0x1000
 800944c:	049e      	lsls	r6, r3, #18
 800944e:	8813      	ldrh	r3, [r2, #0]
 8009450:	bf48      	it	mi
 8009452:	f48b 5b00 	eormi.w	fp, fp, #8192	; 0x2000
 8009456:	06dd      	lsls	r5, r3, #27
 8009458:	8813      	ldrh	r3, [r2, #0]
 800945a:	bf48      	it	mi
 800945c:	f08b 0b10 	eormi.w	fp, fp, #16
 8009460:	069c      	lsls	r4, r3, #26
 8009462:	bf48      	it	mi
 8009464:	f08b 0b20 	eormi.w	fp, fp, #32
 8009468:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 800946c:	4a0f      	ldr	r2, [pc, #60]	; (80094ac <CTR_LP+0x17c>)
 800946e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8009472:	fa1f f38b 	uxth.w	r3, fp
 8009476:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8009478:	b003      	add	sp, #12
 800947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800947e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	400b      	ands	r3, r1
 8009486:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8009488:	f7ff fc6c 	bl	8008d64 <Setup0_Process>
		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800948c:	e7d3      	b.n	8009436 <CTR_LP+0x106>
          _ClearEP_CTR_RX(ENDP0);
 800948e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	400b      	ands	r3, r1
 8009496:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8009498:	f7ff fea0 	bl	80091dc <Out0_Process>
 800949c:	e7cb      	b.n	8009436 <CTR_LP+0x106>
 800949e:	bf00      	nop
 80094a0:	40005c44 	.word	0x40005c44
 80094a4:	20000038 	.word	0x20000038
 80094a8:	20000054 	.word	0x20000054
 80094ac:	40005c00 	.word	0x40005c00
 80094b0:	200018c6 	.word	0x200018c6
 80094b4:	200018c8 	.word	0x200018c8
 80094b8:	2000190c 	.word	0x2000190c
 80094bc:	2000189c 	.word	0x2000189c

080094c0 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80094c0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80094c4:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80094c6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 80094ca:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80094cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 80094d0:	d005      	beq.n	80094de <UserToPMABufferCopy+0x1e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80094d2:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 80094d6:	3a01      	subs	r2, #1
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80094d8:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 80094dc:	d1f9      	bne.n	80094d2 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80094de:	4770      	bx	lr

080094e0 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80094e0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80094e4:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80094e6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 80094ea:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80094ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 80094f0:	d006      	beq.n	8009500 <PMAToUserBufferCopy+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80094f2:	680b      	ldr	r3, [r1, #0]
  for (i = n; i != 0; i--)
 80094f4:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80094f6:	f101 0104 	add.w	r1, r1, #4
 80094fa:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 80094fe:	d1f8      	bne.n	80094f2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8009504:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8009508:	4a01      	ldr	r2, [pc, #4]	; (8009510 <SetBTABLE+0xc>)
 800950a:	4003      	ands	r3, r0
 800950c:	6013      	str	r3, [r2, #0]
}
 800950e:	4770      	bx	lr
 8009510:	40005c50 	.word	0x40005c50

08009514 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8009514:	0080      	lsls	r0, r0, #2
 8009516:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800951a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800951e:	6803      	ldr	r3, [r0, #0]
 8009520:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009528:	430b      	orrs	r3, r1
 800952a:	b29b      	uxth	r3, r3
 800952c:	6003      	str	r3, [r0, #0]
}
 800952e:	4770      	bx	lr

08009530 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8009530:	0080      	lsls	r0, r0, #2
 8009532:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8009536:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800953a:	6803      	ldr	r3, [r0, #0]
 800953c:	06ca      	lsls	r2, r1, #27
 800953e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	b29b      	uxth	r3, r3
 8009548:	bf48      	it	mi
 800954a:	f083 0310 	eormi.w	r3, r3, #16
 800954e:	068a      	lsls	r2, r1, #26
 8009550:	bf48      	it	mi
 8009552:	f083 0320 	eormi.w	r3, r3, #32
 8009556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800955a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955e:	6003      	str	r3, [r0, #0]
}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop

08009564 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8009564:	0080      	lsls	r0, r0, #2
 8009566:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800956a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	04ca      	lsls	r2, r1, #19
 8009572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957a:	b29b      	uxth	r3, r3
 800957c:	bf48      	it	mi
 800957e:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8009582:	048a      	lsls	r2, r1, #18
 8009584:	bf48      	it	mi
 8009586:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800958a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009592:	6003      	str	r3, [r0, #0]
}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop

08009598 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8009598:	0080      	lsls	r0, r0, #2
 800959a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800959e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ba:	6003      	str	r3, [r0, #0]
}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80095c0:	0080      	lsls	r0, r0, #2
 80095c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80095c6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80095ca:	6803      	ldr	r3, [r0, #0]
 80095cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80095da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e2:	6003      	str	r3, [r0, #0]
}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop

080095e8 <Clear_Status_Out>:
 80095e8:	f640 630f 	movw	r3, #3599	; 0xe0f
 80095ec:	0080      	lsls	r0, r0, #2
 80095ee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80095f2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80095f6:	6802      	ldr	r2, [r0, #0]
 80095f8:	4013      	ands	r3, r2
 80095fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009602:	6003      	str	r3, [r0, #0]
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop

08009608 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8009608:	0080      	lsls	r0, r0, #2
 800960a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800960e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8009612:	6803      	ldr	r3, [r0, #0]
 8009614:	045b      	lsls	r3, r3, #17
 8009616:	d508      	bpl.n	800962a <ClearDTOG_RX+0x22>
 8009618:	f640 720f 	movw	r2, #3855	; 0xf0f
 800961c:	6803      	ldr	r3, [r0, #0]
 800961e:	4013      	ands	r3, r2
 8009620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009628:	6003      	str	r3, [r0, #0]
}
 800962a:	4770      	bx	lr

0800962c <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800962c:	0080      	lsls	r0, r0, #2
 800962e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8009632:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8009636:	6803      	ldr	r3, [r0, #0]
 8009638:	065b      	lsls	r3, r3, #25
 800963a:	d508      	bpl.n	800964e <ClearDTOG_TX+0x22>
 800963c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8009640:	6803      	ldr	r3, [r0, #0]
 8009642:	4013      	ands	r3, r2
 8009644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800964c:	6003      	str	r3, [r0, #0]
}
 800964e:	4770      	bx	lr

08009650 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <SetEPTxAddr+0x1c>)
 8009652:	0849      	lsrs	r1, r1, #1
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	0049      	lsls	r1, r1, #1
 8009658:	b29b      	uxth	r3, r3
 800965a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800965e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8009662:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8009666:	0040      	lsls	r0, r0, #1
 8009668:	6001      	str	r1, [r0, #0]
}
 800966a:	4770      	bx	lr
 800966c:	40005c50 	.word	0x40005c50

08009670 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8009670:	4a05      	ldr	r2, [pc, #20]	; (8009688 <SetEPRxAddr+0x18>)
 8009672:	4b06      	ldr	r3, [pc, #24]	; (800968c <SetEPRxAddr+0x1c>)
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	0849      	lsrs	r1, r1, #1
 8009678:	b292      	uxth	r2, r2
 800967a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800967e:	4413      	add	r3, r2
 8009680:	0049      	lsls	r1, r1, #1
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	6019      	str	r1, [r3, #0]
}
 8009686:	4770      	bx	lr
 8009688:	40005c50 	.word	0x40005c50
 800968c:	20003004 	.word	0x20003004

08009690 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <GetEPTxAddr+0x18>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800969a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800969e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80096a2:	0040      	lsls	r0, r0, #1
}
 80096a4:	8800      	ldrh	r0, [r0, #0]
 80096a6:	4770      	bx	lr
 80096a8:	40005c50 	.word	0x40005c50

080096ac <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80096ac:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <GetEPRxAddr+0x14>)
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <GetEPRxAddr+0x18>)
 80096b0:	6812      	ldr	r2, [r2, #0]
 80096b2:	b292      	uxth	r2, r2
 80096b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096b8:	4413      	add	r3, r2
 80096ba:	005b      	lsls	r3, r3, #1
}
 80096bc:	8818      	ldrh	r0, [r3, #0]
 80096be:	4770      	bx	lr
 80096c0:	40005c50 	.word	0x40005c50
 80096c4:	20003004 	.word	0x20003004

080096c8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80096c8:	4a04      	ldr	r2, [pc, #16]	; (80096dc <SetEPTxCount+0x14>)
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <SetEPTxCount+0x18>)
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	b292      	uxth	r2, r2
 80096d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096d4:	4413      	add	r3, r2
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	6019      	str	r1, [r3, #0]
}
 80096da:	4770      	bx	lr
 80096dc:	40005c50 	.word	0x40005c50
 80096e0:	20003002 	.word	0x20003002

080096e4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80096e4:	4a0e      	ldr	r2, [pc, #56]	; (8009720 <SetEPRxCount+0x3c>)
 80096e6:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <SetEPRxCount+0x40>)
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	293e      	cmp	r1, #62	; 0x3e
 80096ec:	b292      	uxth	r2, r2
 80096ee:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096f2:	4413      	add	r3, r2
 80096f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096f8:	d90a      	bls.n	8009710 <SetEPRxCount+0x2c>
 80096fa:	094a      	lsrs	r2, r1, #5
 80096fc:	06c8      	lsls	r0, r1, #27
 80096fe:	bf04      	itt	eq
 8009700:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009704:	b292      	uxtheq	r2, r2
 8009706:	0292      	lsls	r2, r2, #10
 8009708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	4770      	bx	lr
 8009710:	084a      	lsrs	r2, r1, #1
 8009712:	07c9      	lsls	r1, r1, #31
 8009714:	bf48      	it	mi
 8009716:	3201      	addmi	r2, #1
 8009718:	0292      	lsls	r2, r2, #10
 800971a:	601a      	str	r2, [r3, #0]
}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40005c50 	.word	0x40005c50
 8009724:	20003006 	.word	0x20003006

08009728 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8009728:	4a05      	ldr	r2, [pc, #20]	; (8009740 <GetEPRxCount+0x18>)
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <GetEPRxCount+0x1c>)
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	b292      	uxth	r2, r2
 8009730:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009734:	4413      	add	r3, r2
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	6818      	ldr	r0, [r3, #0]
}
 800973a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800973e:	4770      	bx	lr
 8009740:	40005c50 	.word	0x40005c50
 8009744:	20003006 	.word	0x20003006

08009748 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8009748:	b2c3      	uxtb	r3, r0
 800974a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800974c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop

08009754 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8009754:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 8009756:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800975a:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800975c:	4903      	ldr	r1, [pc, #12]	; (800976c <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800975e:	4c04      	ldr	r4, [pc, #16]	; (8009770 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8009760:	4a04      	ldr	r2, [pc, #16]	; (8009774 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 8009762:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8009764:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 8009766:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	4770      	bx	lr
 800976c:	200018c4 	.word	0x200018c4
 8009770:	40005c44 	.word	0x40005c44
 8009774:	40005c40 	.word	0x40005c40

08009778 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8009778:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800977a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800977e:	4628      	mov	r0, r5
{
 8009780:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8009782:	f7ff ffd1 	bl	8009728 <GetEPRxCount>
 8009786:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8009788:	4628      	mov	r0, r5
 800978a:	f7ff ff8f 	bl	80096ac <GetEPRxAddr>
 800978e:	4622      	mov	r2, r4
 8009790:	4601      	mov	r1, r0
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff fea4 	bl	80094e0 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 8009798:	4620      	mov	r0, r4
 800979a:	bd70      	pop	{r4, r5, r6, pc}

0800979c <USB_Cable_Config>:
/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
}
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop

080097a0 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 80097a0:	4b3c      	ldr	r3, [pc, #240]	; (8009894 <Get_SerialNum+0xf4>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 80097a2:	493d      	ldr	r1, [pc, #244]	; (8009898 <Get_SerialNum+0xf8>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 80097a4:	4a3d      	ldr	r2, [pc, #244]	; (800989c <Get_SerialNum+0xfc>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 80097a6:	681b      	ldr	r3, [r3, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 80097a8:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 80097aa:	6812      	ldr	r2, [r2, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 80097ac:	189b      	adds	r3, r3, r2
 80097ae:	d100      	bne.n	80097b2 <Get_SerialNum+0x12>
 80097b0:	4770      	bx	lr
{
 80097b2:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 80097b4:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + '0';
 80097b6:	4a3a      	ldr	r2, [pc, #232]	; (80098a0 <Get_SerialNum+0x100>)
		if (((value >> 28)) < 0xA)
 80097b8:	0f18      	lsrs	r0, r3, #28
 80097ba:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097be:	bf2c      	ite	cs
 80097c0:	3037      	addcs	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80097c2:	3030      	addcc	r0, #48	; 0x30
 80097c4:	7090      	strb	r0, [r2, #2]
		if (((value >> 28)) < 0xA)
 80097c6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80097ca:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097cc:	bf8c      	ite	hi
 80097ce:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80097d0:	3030      	addls	r0, #48	; 0x30
 80097d2:	7110      	strb	r0, [r2, #4]
		if (((value >> 28)) < 0xA)
 80097d4:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80097d8:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097da:	bf8c      	ite	hi
 80097dc:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80097de:	3030      	addls	r0, #48	; 0x30
 80097e0:	7190      	strb	r0, [r2, #6]
		if (((value >> 28)) < 0xA)
 80097e2:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80097e6:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097e8:	bf8c      	ite	hi
 80097ea:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80097ec:	3030      	addls	r0, #48	; 0x30
 80097ee:	7210      	strb	r0, [r2, #8]
		if (((value >> 28)) < 0xA)
 80097f0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80097f4:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097f6:	bf8c      	ite	hi
 80097f8:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80097fa:	3030      	addls	r0, #48	; 0x30
 80097fc:	7290      	strb	r0, [r2, #10]
		if (((value >> 28)) < 0xA)
 80097fe:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8009802:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009804:	bf8c      	ite	hi
 8009806:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009808:	3030      	addls	r0, #48	; 0x30
 800980a:	7310      	strb	r0, [r2, #12]
		if (((value >> 28)) < 0xA)
 800980c:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8009810:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009812:	bf8c      	ite	hi
 8009814:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009816:	3030      	addls	r0, #48	; 0x30
		pbuf[2 * idx + 1] = 0;
 8009818:	70d4      	strb	r4, [r2, #3]
			pbuf[2 * idx] = (value >> 28) + '0';
 800981a:	7390      	strb	r0, [r2, #14]
		pbuf[2 * idx + 1] = 0;
 800981c:	2400      	movs	r4, #0
 800981e:	2000      	movs	r0, #0
 8009820:	7154      	strb	r4, [r2, #5]
 8009822:	73d0      	strb	r0, [r2, #15]
 8009824:	2400      	movs	r4, #0
 8009826:	2000      	movs	r0, #0
 8009828:	71d4      	strb	r4, [r2, #7]
 800982a:	7450      	strb	r0, [r2, #17]
 800982c:	2400      	movs	r4, #0
 800982e:	2000      	movs	r0, #0
 8009830:	7254      	strb	r4, [r2, #9]
 8009832:	74d0      	strb	r0, [r2, #19]
 8009834:	2400      	movs	r4, #0
 8009836:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800983e:	bf94      	ite	ls
 8009840:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009842:	3337      	addhi	r3, #55	; 0x37
 8009844:	7413      	strb	r3, [r2, #16]
		if (((value >> 28)) < 0xA)
 8009846:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800984a:	ea4f 7311 	mov.w	r3, r1, lsr #28
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800984e:	bf2c      	ite	cs
 8009850:	3337      	addcs	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009852:	3330      	addcc	r3, #48	; 0x30
 8009854:	7493      	strb	r3, [r2, #18]
		if (((value >> 28)) < 0xA)
 8009856:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800985a:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800985c:	bf8c      	ite	hi
 800985e:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009860:	3330      	addls	r3, #48	; 0x30
 8009862:	7513      	strb	r3, [r2, #20]
		if (((value >> 28)) < 0xA)
 8009864:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8009868:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800986a:	bf8c      	ite	hi
 800986c:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 800986e:	3330      	addls	r3, #48	; 0x30
 8009870:	7593      	strb	r3, [r2, #22]
		if (((value >> 28)) < 0xA)
 8009872:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8009876:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 8009878:	bf94      	ite	ls
 800987a:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800987c:	3337      	addhi	r3, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800987e:	72d4      	strb	r4, [r2, #11]
 8009880:	7550      	strb	r0, [r2, #21]
 8009882:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009884:	7613      	strb	r3, [r2, #24]
		pbuf[2 * idx + 1] = 0;
 8009886:	2000      	movs	r0, #0
 8009888:	2300      	movs	r3, #0
 800988a:	7354      	strb	r4, [r2, #13]
 800988c:	75d0      	strb	r0, [r2, #23]
 800988e:	7653      	strb	r3, [r2, #25]
}
 8009890:	bc10      	pop	{r4}
 8009892:	4770      	bx	lr
 8009894:	1ffff7e8 	.word	0x1ffff7e8
 8009898:	1ffff7ec 	.word	0x1ffff7ec
 800989c:	1ffff7f0 	.word	0x1ffff7f0
 80098a0:	2000001c 	.word	0x2000001c

080098a4 <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 80098a4:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80098a6:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80098ac:	4b2d      	ldr	r3, [pc, #180]	; (8009964 <EP1_IN_Callback.part.0+0xc0>)

	if ((head != serial_tx_buffer_tail)) {
 80098ae:	4e2e      	ldr	r6, [pc, #184]	; (8009968 <EP1_IN_Callback.part.0+0xc4>)
	head = serial_tx_buffer_head;
 80098b0:	492e      	ldr	r1, [pc, #184]	; (800996c <EP1_IN_Callback.part.0+0xc8>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80098b2:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 80098b4:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 80098b6:	7832      	ldrb	r2, [r6, #0]
	head = serial_tx_buffer_head;
 80098b8:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d044      	beq.n	8009948 <EP1_IN_Callback.part.0+0xa4>
		if (head > serial_tx_buffer_tail)
 80098be:	7832      	ldrb	r2, [r6, #0]
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d943      	bls.n	800994c <EP1_IN_Callback.part.0+0xa8>
			USB_Tx_length = head - serial_tx_buffer_tail;
 80098c4:	7831      	ldrb	r1, [r6, #0]
 80098c6:	1a5b      	subs	r3, r3, r1
 80098c8:	b299      	uxth	r1, r3
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;

		if (USB_Tx_length != 0) {
 80098ca:	2900      	cmp	r1, #0
 80098cc:	d03c      	beq.n	8009948 <EP1_IN_Callback.part.0+0xa4>
			if (USB_Tx_length > 64)
 80098ce:	2940      	cmp	r1, #64	; 0x40
 80098d0:	bf28      	it	cs
 80098d2:	2140      	movcs	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80098d4:	4f26      	ldr	r7, [pc, #152]	; (8009970 <EP1_IN_Callback.part.0+0xcc>)
 80098d6:	7832      	ldrb	r2, [r6, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80098d8:	f101 0c01 	add.w	ip, r1, #1
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 80098dc:	2400      	movs	r4, #0

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
						pbUsrBuf = serial_tx_buffer;
 80098de:	46be      	mov	lr, r7
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80098e0:	4d24      	ldr	r5, [pc, #144]	; (8009974 <EP1_IN_Callback.part.0+0xd0>)
 80098e2:	ea4f 0c6c 	mov.w	ip, ip, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80098e6:	443a      	add	r2, r7
				for (i = 0; i<n; i++) {
 80098e8:	e00f      	b.n	800990a <EP1_IN_Callback.part.0+0x66>
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80098ea:	7853      	ldrb	r3, [r2, #1]
					pbUsrBuf++;
 80098ec:	3202      	adds	r2, #2
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 80098ee:	eba2 0807 	sub.w	r8, r2, r7
				for (i = 0; i<n; i++) {
 80098f2:	3401      	adds	r4, #1
						pbUsrBuf = serial_tx_buffer;
 80098f4:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80098f8:	bf08      	it	eq
 80098fa:	4672      	moveq	r2, lr
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80098fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
				for (i = 0; i<n; i++) {
 8009900:	45a4      	cmp	ip, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009902:	8028      	strh	r0, [r5, #0]
				for (i = 0; i<n; i++) {
 8009904:	f105 0504 	add.w	r5, r5, #4
 8009908:	d00f      	beq.n	800992a <EP1_IN_Callback.part.0+0x86>
					temp1 = (uint16_t) *pbUsrBuf;
 800990a:	4613      	mov	r3, r2
 800990c:	f813 0b01 	ldrb.w	r0, [r3], #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 8009910:	1bdb      	subs	r3, r3, r7
 8009912:	2b80      	cmp	r3, #128	; 0x80
 8009914:	d1e9      	bne.n	80098ea <EP1_IN_Callback.part.0+0x46>
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009916:	783b      	ldrb	r3, [r7, #0]
				for (i = 0; i<n; i++) {
 8009918:	3401      	adds	r4, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800991a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
				for (i = 0; i<n; i++) {
 800991e:	45a4      	cmp	ip, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009920:	8028      	strh	r0, [r5, #0]
					pbUsrBuf++;
 8009922:	4a15      	ldr	r2, [pc, #84]	; (8009978 <EP1_IN_Callback.part.0+0xd4>)
				for (i = 0; i<n; i++) {
 8009924:	f105 0504 	add.w	r5, r5, #4
 8009928:	d1ef      	bne.n	800990a <EP1_IN_Callback.part.0+0x66>
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800992a:	7833      	ldrb	r3, [r6, #0]
 800992c:	440b      	add	r3, r1
 800992e:	b2db      	uxtb	r3, r3
 8009930:	7033      	strb	r3, [r6, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 8009932:	7833      	ldrb	r3, [r6, #0]
 8009934:	061b      	lsls	r3, r3, #24
 8009936:	d40f      	bmi.n	8009958 <EP1_IN_Callback.part.0+0xb4>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 8009938:	2001      	movs	r0, #1
 800993a:	f7ff fec5 	bl	80096c8 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		SetEPTxValid(ENDP1);
 8009942:	2001      	movs	r0, #1
 8009944:	f7ff be28 	b.w	8009598 <SetEPTxValid>
}
 8009948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800994c:	7832      	ldrb	r2, [r6, #0]
 800994e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8009952:	1a89      	subs	r1, r1, r2
 8009954:	b289      	uxth	r1, r1
 8009956:	e7b8      	b.n	80098ca <EP1_IN_Callback.part.0+0x26>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 8009958:	7833      	ldrb	r3, [r6, #0]
 800995a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800995e:	7033      	strb	r3, [r6, #0]
 8009960:	e7ea      	b.n	8009938 <EP1_IN_Callback.part.0+0x94>
 8009962:	bf00      	nop
 8009964:	20000e80 	.word	0x20000e80
 8009968:	20000cfb 	.word	0x20000cfb
 800996c:	20000cfa 	.word	0x20000cfa
 8009970:	200016b4 	.word	0x200016b4
 8009974:	40006180 	.word	0x40006180
 8009978:	200016b5 	.word	0x200016b5

0800997c <EP3_OUT_Callback>:
{
 800997c:	b508      	push	{r3, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800997e:	2003      	movs	r0, #3
 8009980:	4903      	ldr	r1, [pc, #12]	; (8009990 <EP3_OUT_Callback+0x14>)
 8009982:	f7ff fef9 	bl	8009778 <USB_SIL_Read>
}
 8009986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetEPRxValid(ENDP3);
 800998a:	2003      	movs	r0, #3
 800998c:	f7ff be18 	b.w	80095c0 <SetEPRxValid>
 8009990:	200018cc 	.word	0x200018cc

08009994 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <EP1_IN_Callback+0x14>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800999c:	2b20      	cmp	r3, #32
 800999e:	d101      	bne.n	80099a4 <EP1_IN_Callback+0x10>
 80099a0:	f7ff bf80 	b.w	80098a4 <EP1_IN_Callback.part.0>
}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40005c04 	.word	0x40005c04

080099ac <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <SOF_Callback+0x1c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d000      	beq.n	80099b6 <SOF_Callback+0xa>
	{
		/* Check the data to be sent through IN pipe */
		EP1_IN_Callback();
	}
}
 80099b4:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <SOF_Callback+0x20>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d1f8      	bne.n	80099b4 <SOF_Callback+0x8>
 80099c2:	f7ff bf6f 	b.w	80098a4 <EP1_IN_Callback.part.0>
 80099c6:	bf00      	nop
 80099c8:	20000e84 	.word	0x20000e84
 80099cc:	40005c04 	.word	0x40005c04

080099d0 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 80099d0:	4916      	ldr	r1, [pc, #88]	; (8009a2c <USB_Istr+0x5c>)
{
 80099d2:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 80099d4:	680b      	ldr	r3, [r1, #0]
 80099d6:	4c16      	ldr	r4, [pc, #88]	; (8009a30 <USB_Istr+0x60>)
 80099d8:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80099da:	4d16      	ldr	r5, [pc, #88]	; (8009a34 <USB_Istr+0x64>)
  wIstr = _GetISTR();
 80099dc:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80099de:	8822      	ldrh	r2, [r4, #0]
 80099e0:	882b      	ldrh	r3, [r5, #0]
 80099e2:	401a      	ands	r2, r3
 80099e4:	0590      	lsls	r0, r2, #22
 80099e6:	d415      	bmi.n	8009a14 <USB_Istr+0x44>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80099e8:	8822      	ldrh	r2, [r4, #0]
 80099ea:	401a      	ands	r2, r3
 80099ec:	0412      	lsls	r2, r2, #16
 80099ee:	d40d      	bmi.n	8009a0c <USB_Istr+0x3c>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80099f0:	8822      	ldrh	r2, [r4, #0]
 80099f2:	4013      	ands	r3, r2
 80099f4:	055b      	lsls	r3, r3, #21
 80099f6:	d508      	bpl.n	8009a0a <USB_Istr+0x3a>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80099f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 80099fc:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <USB_Istr+0x5c>)
    Device_Property.Reset();
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <USB_Istr+0x68>)
    _SetISTR((uint16_t)CLR_RESET);
 8009a04:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4718      	bx	r3
} /* USB_Istr */
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
    CTR_LP();
 8009a0c:	f7ff fc90 	bl	8009330 <CTR_LP>
 8009a10:	882b      	ldrh	r3, [r5, #0]
 8009a12:	e7ed      	b.n	80099f0 <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 8009a14:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 8009a18:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_SOF);
 8009a1a:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 8009a1c:	7813      	ldrb	r3, [r2, #0]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 8009a24:	f7ff ffc2 	bl	80099ac <SOF_Callback>
 8009a28:	882b      	ldrh	r3, [r5, #0]
 8009a2a:	e7dd      	b.n	80099e8 <USB_Istr+0x18>
 8009a2c:	40005c44 	.word	0x40005c44
 8009a30:	2000190c 	.word	0x2000190c
 8009a34:	200018c4 	.word	0x200018c4
 8009a38:	20000080 	.word	0x20000080
 8009a3c:	20000e81 	.word	0x20000e81

08009a40 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8009a40:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <Virtual_Com_Port_Status_In+0x10>)
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	2a20      	cmp	r2, #32
  {
    Request = 0;
 8009a46:	bf04      	itt	eq
 8009a48:	2200      	moveq	r2, #0
 8009a4a:	701a      	strbeq	r2, [r3, #0]
  }
}
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	20000e82 	.word	0x20000e82

08009a54 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop

08009a58 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8009a58:	2821      	cmp	r0, #33	; 0x21
 8009a5a:	d016      	beq.n	8009a8a <Virtual_Com_Port_Data_Setup+0x32>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8009a5c:	2820      	cmp	r0, #32
 8009a5e:	4603      	mov	r3, r0
 8009a60:	d111      	bne.n	8009a86 <Virtual_Com_Port_Data_Setup+0x2e>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009a62:	4a10      	ldr	r2, [pc, #64]	; (8009aa4 <Virtual_Com_Port_Data_Setup+0x4c>)
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	7811      	ldrb	r1, [r2, #0]
 8009a68:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009a6c:	2921      	cmp	r1, #33	; 0x21
 8009a6e:	d115      	bne.n	8009a9c <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8009a70:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8009a72:	490e      	ldr	r1, [pc, #56]	; (8009aac <Virtual_Com_Port_Data_Setup+0x54>)
    Request = SET_LINE_CODING;
 8009a74:	7003      	strb	r3, [r0, #0]
{
 8009a76:	b510      	push	{r4, lr}
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8009a78:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009a7a:	6191      	str	r1, [r2, #24]
  (*CopyRoutine)(0);
 8009a7c:	4620      	mov	r0, r4
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8009a7e:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8009a80:	4788      	blx	r1
  return USB_SUCCESS;
 8009a82:	4620      	mov	r0, r4
}
 8009a84:	bd10      	pop	{r4, pc}
    return USB_UNSUPPORT;
 8009a86:	2002      	movs	r0, #2
}
 8009a88:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009a8a:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <Virtual_Com_Port_Data_Setup+0x4c>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	7813      	ldrb	r3, [r2, #0]
 8009a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a94:	2b21      	cmp	r3, #33	; 0x21
 8009a96:	d1f6      	bne.n	8009a86 <Virtual_Com_Port_Data_Setup+0x2e>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8009a98:	4905      	ldr	r1, [pc, #20]	; (8009ab0 <Virtual_Com_Port_Data_Setup+0x58>)
 8009a9a:	e7ec      	b.n	8009a76 <Virtual_Com_Port_Data_Setup+0x1e>
    Request = SET_LINE_CODING;
 8009a9c:	4a02      	ldr	r2, [pc, #8]	; (8009aa8 <Virtual_Com_Port_Data_Setup+0x50>)
    return USB_UNSUPPORT;
 8009a9e:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 8009aa0:	7013      	strb	r3, [r2, #0]
  if (CopyRoutine == NULL)
 8009aa2:	4770      	bx	lr
 8009aa4:	200018c0 	.word	0x200018c0
 8009aa8:	20000e82 	.word	0x20000e82
 8009aac:	08009c3d 	.word	0x08009c3d
 8009ab0:	08009ac5 	.word	0x08009ac5

08009ab4 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8009ab4:	b921      	cbnz	r1, 8009ac0 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 8009ab6:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8009ab8:	bf8c      	ite	hi
 8009aba:	2002      	movhi	r0, #2
 8009abc:	2000      	movls	r0, #0
 8009abe:	4770      	bx	lr
    return USB_UNSUPPORT;
 8009ac0:	2002      	movs	r0, #2
}
 8009ac2:	4770      	bx	lr

08009ac4 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8009ac4:	b108      	cbz	r0, 8009aca <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8009ac6:	4803      	ldr	r0, [pc, #12]	; (8009ad4 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8009ac8:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8009aca:	2208      	movs	r2, #8
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <Virtual_Com_Port_GetLineCoding+0x14>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	821a      	strh	r2, [r3, #16]
    return NULL;
 8009ad2:	4770      	bx	lr
 8009ad4:	200000d4 	.word	0x200000d4
 8009ad8:	200018c0 	.word	0x200018c0

08009adc <Virtual_Com_Port_init>:
{
 8009adc:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 8009ade:	2400      	movs	r4, #0
  Get_SerialNum();
 8009ae0:	f7ff fe5e 	bl	80097a0 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 8009ae4:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <Virtual_Com_Port_init+0x1c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	729c      	strb	r4, [r3, #10]
  PowerOn();
 8009aea:	f000 f8b3 	bl	8009c54 <PowerOn>
  USB_SIL_Init();
 8009aee:	f7ff fe31 	bl	8009754 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 8009af2:	4b02      	ldr	r3, [pc, #8]	; (8009afc <Virtual_Com_Port_init+0x20>)
 8009af4:	601c      	str	r4, [r3, #0]
}
 8009af6:	bd10      	pop	{r4, pc}
 8009af8:	200018c0 	.word	0x200018c0
 8009afc:	20000e84 	.word	0x20000e84

08009b00 <Virtual_Com_Port_Reset>:
{
 8009b00:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 8009b02:	2400      	movs	r4, #0
 8009b04:	4b32      	ldr	r3, [pc, #200]	; (8009bd0 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009b06:	4a33      	ldr	r2, [pc, #204]	; (8009bd4 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 8009b08:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009b0a:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 8009b0c:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009b0e:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7ff fcf7 	bl	8009504 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 8009b16:	4620      	mov	r0, r4
 8009b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b1c:	f7ff fcfa 	bl	8009514 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8009b20:	4620      	mov	r0, r4
 8009b22:	2110      	movs	r1, #16
 8009b24:	f7ff fd04 	bl	8009530 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8009b28:	4620      	mov	r0, r4
 8009b2a:	2140      	movs	r1, #64	; 0x40
 8009b2c:	f7ff fda0 	bl	8009670 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8009b30:	2180      	movs	r1, #128	; 0x80
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff fd8c 	bl	8009650 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f7ff fd55 	bl	80095e8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009b3e:	4b26      	ldr	r3, [pc, #152]	; (8009bd8 <Virtual_Com_Port_Reset+0xd8>)
 8009b40:	4620      	mov	r0, r4
 8009b42:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009b46:	f7ff fdcd 	bl	80096e4 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7ff fd38 	bl	80095c0 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 8009b50:	4621      	mov	r1, r4
 8009b52:	2001      	movs	r0, #1
 8009b54:	f7ff fcde 	bl	8009514 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8009b58:	21c0      	movs	r1, #192	; 0xc0
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	f7ff fd78 	bl	8009650 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8009b60:	2120      	movs	r1, #32
 8009b62:	2001      	movs	r0, #1
 8009b64:	f7ff fce4 	bl	8009530 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8009b68:	4621      	mov	r1, r4
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	f7ff fcfa 	bl	8009564 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 8009b70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b74:	2002      	movs	r0, #2
 8009b76:	f7ff fccd 	bl	8009514 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8009b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b7e:	2002      	movs	r0, #2
 8009b80:	f7ff fd66 	bl	8009650 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8009b84:	4621      	mov	r1, r4
 8009b86:	2002      	movs	r0, #2
 8009b88:	f7ff fcec 	bl	8009564 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8009b8c:	2120      	movs	r1, #32
 8009b8e:	2002      	movs	r0, #2
 8009b90:	f7ff fcce 	bl	8009530 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 8009b94:	4621      	mov	r1, r4
 8009b96:	2003      	movs	r0, #3
 8009b98:	f7ff fcbc 	bl	8009514 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8009b9c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8009ba0:	2003      	movs	r0, #3
 8009ba2:	f7ff fd65 	bl	8009670 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8009ba6:	2140      	movs	r1, #64	; 0x40
 8009ba8:	2003      	movs	r0, #3
 8009baa:	f7ff fd9b 	bl	80096e4 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8009bae:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8009bb2:	2003      	movs	r0, #3
 8009bb4:	f7ff fcd6 	bl	8009564 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8009bb8:	4621      	mov	r1, r4
 8009bba:	2003      	movs	r0, #3
 8009bbc:	f7ff fcb8 	bl	8009530 <SetEPTxStatus>
  SetDeviceAddress(0);
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fb93 	bl	80092ec <SetDeviceAddress>
  bDeviceState = ATTACHED;
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <Virtual_Com_Port_Reset+0xdc>)
 8009bca:	601a      	str	r2, [r3, #0]
}
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	200018c0 	.word	0x200018c0
 8009bd4:	0800b134 	.word	0x0800b134
 8009bd8:	20000080 	.word	0x20000080
 8009bdc:	20000e84 	.word	0x20000e84

08009be0 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8009be0:	4901      	ldr	r1, [pc, #4]	; (8009be8 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 8009be2:	f7ff b8b1 	b.w	8008d48 <Standard_GetDescriptorData>
 8009be6:	bf00      	nop
 8009be8:	20000078 	.word	0x20000078

08009bec <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8009bec:	4901      	ldr	r1, [pc, #4]	; (8009bf4 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 8009bee:	f7ff b8ab 	b.w	8008d48 <Standard_GetDescriptorData>
 8009bf2:	bf00      	nop
 8009bf4:	20000070 	.word	0x20000070

08009bf8 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 8009bf8:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d804      	bhi.n	8009c0c <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8009c02:	4904      	ldr	r1, [pc, #16]	; (8009c14 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8009c04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c08:	f7ff b89e 	b.w	8008d48 <Standard_GetDescriptorData>
}
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	4770      	bx	lr
 8009c10:	200018c0 	.word	0x200018c0
 8009c14:	200000b4 	.word	0x200000b4

08009c18 <Virtual_Com_Port_NoData_Setup>:
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009c18:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <Virtual_Com_Port_NoData_Setup+0x20>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c22:	2b21      	cmp	r3, #33	; 0x21
 8009c24:	d001      	beq.n	8009c2a <Virtual_Com_Port_NoData_Setup+0x12>
  return USB_UNSUPPORT;
 8009c26:	2002      	movs	r0, #2
}
 8009c28:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 8009c2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009c2e:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 8009c30:	bf14      	ite	ne
 8009c32:	2002      	movne	r0, #2
 8009c34:	2000      	moveq	r0, #0
 8009c36:	4770      	bx	lr
 8009c38:	200018c0 	.word	0x200018c0

08009c3c <Virtual_Com_Port_SetLineCoding>:
 8009c3c:	b108      	cbz	r0, 8009c42 <Virtual_Com_Port_SetLineCoding+0x6>
 8009c3e:	4803      	ldr	r0, [pc, #12]	; (8009c4c <Virtual_Com_Port_SetLineCoding+0x10>)
 8009c40:	4770      	bx	lr
 8009c42:	2208      	movs	r2, #8
 8009c44:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <Virtual_Com_Port_SetLineCoding+0x14>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	821a      	strh	r2, [r3, #16]
 8009c4a:	4770      	bx	lr
 8009c4c:	200000d4 	.word	0x200000d4
 8009c50:	200018c0 	.word	0x200018c0

08009c54 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8009c54:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8009c56:	2001      	movs	r0, #1
 8009c58:	f7ff fda0 	bl	800979c <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8009c5c:	2501      	movs	r5, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8009c5e:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009c60:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <PowerOn+0x24>)
  _SetISTR(0);
 8009c66:	4c05      	ldr	r4, [pc, #20]	; (8009c7c <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009c68:	4905      	ldr	r1, [pc, #20]	; (8009c80 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 8009c6a:	601d      	str	r5, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 8009c6c:	6018      	str	r0, [r3, #0]
  _SetISTR(0);
 8009c6e:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009c70:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 8009c72:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	40005c40 	.word	0x40005c40
 8009c7c:	40005c44 	.word	0x40005c44
 8009c80:	200018c4 	.word	0x200018c4

08009c84 <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop

08009c88 <HardFault_Handler>:
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009c88:	e7fe      	b.n	8009c88 <HardFault_Handler>
 8009c8a:	bf00      	nop

08009c8c <MemManage_Handler>:
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009c8c:	e7fe      	b.n	8009c8c <MemManage_Handler>
 8009c8e:	bf00      	nop

08009c90 <BusFault_Handler>:
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009c90:	e7fe      	b.n	8009c90 <BusFault_Handler>
 8009c92:	bf00      	nop

08009c94 <UsageFault_Handler>:
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009c94:	e7fe      	b.n	8009c94 <UsageFault_Handler>
 8009c96:	bf00      	nop

08009c98 <SVC_Handler>:
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop

08009c9c <DebugMon_Handler>:
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop

08009ca0 <PendSV_Handler>:
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 8009ca4:	f7ff be94 	b.w	80099d0 <USB_Istr>

08009ca8 <__libc_init_array>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	2600      	movs	r6, #0
 8009cac:	4d0c      	ldr	r5, [pc, #48]	; (8009ce0 <__libc_init_array+0x38>)
 8009cae:	4c0d      	ldr	r4, [pc, #52]	; (8009ce4 <__libc_init_array+0x3c>)
 8009cb0:	1b64      	subs	r4, r4, r5
 8009cb2:	10a4      	asrs	r4, r4, #2
 8009cb4:	42a6      	cmp	r6, r4
 8009cb6:	d109      	bne.n	8009ccc <__libc_init_array+0x24>
 8009cb8:	f001 f916 	bl	800aee8 <_init>
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	4d0a      	ldr	r5, [pc, #40]	; (8009ce8 <__libc_init_array+0x40>)
 8009cc0:	4c0a      	ldr	r4, [pc, #40]	; (8009cec <__libc_init_array+0x44>)
 8009cc2:	1b64      	subs	r4, r4, r5
 8009cc4:	10a4      	asrs	r4, r4, #2
 8009cc6:	42a6      	cmp	r6, r4
 8009cc8:	d105      	bne.n	8009cd6 <__libc_init_array+0x2e>
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd0:	4798      	blx	r3
 8009cd2:	3601      	adds	r6, #1
 8009cd4:	e7ee      	b.n	8009cb4 <__libc_init_array+0xc>
 8009cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cda:	4798      	blx	r3
 8009cdc:	3601      	adds	r6, #1
 8009cde:	e7f2      	b.n	8009cc6 <__libc_init_array+0x1e>
 8009ce0:	0800b5d0 	.word	0x0800b5d0
 8009ce4:	0800b5d0 	.word	0x0800b5d0
 8009ce8:	0800b5d0 	.word	0x0800b5d0
 8009cec:	0800b5d8 	.word	0x0800b5d8

08009cf0 <memcmp>:
 8009cf0:	b530      	push	{r4, r5, lr}
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	3901      	subs	r1, #1
 8009cf6:	42a2      	cmp	r2, r4
 8009cf8:	d101      	bne.n	8009cfe <memcmp+0xe>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e005      	b.n	8009d0a <memcmp+0x1a>
 8009cfe:	5d03      	ldrb	r3, [r0, r4]
 8009d00:	3401      	adds	r4, #1
 8009d02:	5d0d      	ldrb	r5, [r1, r4]
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	d0f6      	beq.n	8009cf6 <memcmp+0x6>
 8009d08:	1b58      	subs	r0, r3, r5
 8009d0a:	bd30      	pop	{r4, r5, pc}

08009d0c <memset>:
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	4402      	add	r2, r0
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d100      	bne.n	8009d16 <memset+0xa>
 8009d14:	4770      	bx	lr
 8009d16:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1a:	e7f9      	b.n	8009d10 <memset+0x4>

08009d1c <register_fini>:
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <register_fini+0xc>)
 8009d1e:	b113      	cbz	r3, 8009d26 <register_fini+0xa>
 8009d20:	4802      	ldr	r0, [pc, #8]	; (8009d2c <register_fini+0x10>)
 8009d22:	f000 b805 	b.w	8009d30 <atexit>
 8009d26:	4770      	bx	lr
 8009d28:	00000000 	.word	0x00000000
 8009d2c:	08009d3d 	.word	0x08009d3d

08009d30 <atexit>:
 8009d30:	2300      	movs	r3, #0
 8009d32:	4601      	mov	r1, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 b816 	b.w	8009d68 <__register_exitproc>

08009d3c <__libc_fini_array>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d07      	ldr	r5, [pc, #28]	; (8009d5c <__libc_fini_array+0x20>)
 8009d40:	4c07      	ldr	r4, [pc, #28]	; (8009d60 <__libc_fini_array+0x24>)
 8009d42:	1b64      	subs	r4, r4, r5
 8009d44:	10a4      	asrs	r4, r4, #2
 8009d46:	b91c      	cbnz	r4, 8009d50 <__libc_fini_array+0x14>
 8009d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4c:	f001 b8d2 	b.w	800aef4 <_fini>
 8009d50:	3c01      	subs	r4, #1
 8009d52:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009d56:	4798      	blx	r3
 8009d58:	e7f5      	b.n	8009d46 <__libc_fini_array+0xa>
 8009d5a:	bf00      	nop
 8009d5c:	0800b5d8 	.word	0x0800b5d8
 8009d60:	0800b5dc 	.word	0x0800b5dc

08009d64 <__retarget_lock_acquire_recursive>:
 8009d64:	4770      	bx	lr

08009d66 <__retarget_lock_release_recursive>:
 8009d66:	4770      	bx	lr

08009d68 <__register_exitproc>:
 8009d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6c:	4d1c      	ldr	r5, [pc, #112]	; (8009de0 <__register_exitproc+0x78>)
 8009d6e:	4606      	mov	r6, r0
 8009d70:	6828      	ldr	r0, [r5, #0]
 8009d72:	4698      	mov	r8, r3
 8009d74:	460f      	mov	r7, r1
 8009d76:	4691      	mov	r9, r2
 8009d78:	f7ff fff4 	bl	8009d64 <__retarget_lock_acquire_recursive>
 8009d7c:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <__register_exitproc+0x7c>)
 8009d7e:	4628      	mov	r0, r5
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8009d86:	b91c      	cbnz	r4, 8009d90 <__register_exitproc+0x28>
 8009d88:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009d8c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009d90:	6865      	ldr	r5, [r4, #4]
 8009d92:	6800      	ldr	r0, [r0, #0]
 8009d94:	2d1f      	cmp	r5, #31
 8009d96:	dd05      	ble.n	8009da4 <__register_exitproc+0x3c>
 8009d98:	f7ff ffe5 	bl	8009d66 <__retarget_lock_release_recursive>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da4:	b19e      	cbz	r6, 8009dce <__register_exitproc+0x66>
 8009da6:	2201      	movs	r2, #1
 8009da8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009dac:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009db0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009db4:	40aa      	lsls	r2, r5
 8009db6:	4313      	orrs	r3, r2
 8009db8:	2e02      	cmp	r6, #2
 8009dba:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009dbe:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009dc2:	bf02      	ittt	eq
 8009dc4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009dc8:	431a      	orreq	r2, r3
 8009dca:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8009dce:	1c6b      	adds	r3, r5, #1
 8009dd0:	3502      	adds	r5, #2
 8009dd2:	6063      	str	r3, [r4, #4]
 8009dd4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009dd8:	f7ff ffc5 	bl	8009d66 <__retarget_lock_release_recursive>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7df      	b.n	8009da0 <__register_exitproc+0x38>
 8009de0:	20000508 	.word	0x20000508
 8009de4:	0800b1c4 	.word	0x0800b1c4

08009de8 <ceilf>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009dee:	3d7f      	subs	r5, #127	; 0x7f
 8009df0:	2d16      	cmp	r5, #22
 8009df2:	4601      	mov	r1, r0
 8009df4:	4604      	mov	r4, r0
 8009df6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009dfa:	dc26      	bgt.n	8009e4a <ceilf+0x62>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	da0e      	bge.n	8009e1e <ceilf+0x36>
 8009e00:	4917      	ldr	r1, [pc, #92]	; (8009e60 <ceilf+0x78>)
 8009e02:	f7f6 fc3f 	bl	8000684 <__addsf3>
 8009e06:	2100      	movs	r1, #0
 8009e08:	f7f6 ff00 	bl	8000c0c <__aeabi_fcmpgt>
 8009e0c:	b128      	cbz	r0, 8009e1a <ceilf+0x32>
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	db23      	blt.n	8009e5a <ceilf+0x72>
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	bf18      	it	ne
 8009e16:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	e01b      	b.n	8009e56 <ceilf+0x6e>
 8009e1e:	4e11      	ldr	r6, [pc, #68]	; (8009e64 <ceilf+0x7c>)
 8009e20:	412e      	asrs	r6, r5
 8009e22:	4230      	tst	r0, r6
 8009e24:	d017      	beq.n	8009e56 <ceilf+0x6e>
 8009e26:	490e      	ldr	r1, [pc, #56]	; (8009e60 <ceilf+0x78>)
 8009e28:	f7f6 fc2c 	bl	8000684 <__addsf3>
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	f7f6 feed 	bl	8000c0c <__aeabi_fcmpgt>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0f1      	beq.n	8009e1a <ceilf+0x32>
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	bfc2      	ittt	gt
 8009e3a:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8009e3e:	fa43 f505 	asrgt.w	r5, r3, r5
 8009e42:	1964      	addgt	r4, r4, r5
 8009e44:	ea24 0406 	bic.w	r4, r4, r6
 8009e48:	e7e7      	b.n	8009e1a <ceilf+0x32>
 8009e4a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009e4e:	d302      	bcc.n	8009e56 <ceilf+0x6e>
 8009e50:	f7f6 fc18 	bl	8000684 <__addsf3>
 8009e54:	4601      	mov	r1, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	bd70      	pop	{r4, r5, r6, pc}
 8009e5a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e5e:	e7dc      	b.n	8009e1a <ceilf+0x32>
 8009e60:	7149f2ca 	.word	0x7149f2ca
 8009e64:	007fffff 	.word	0x007fffff

08009e68 <cosf>:
 8009e68:	b507      	push	{r0, r1, r2, lr}
 8009e6a:	4a18      	ldr	r2, [pc, #96]	; (8009ecc <cosf+0x64>)
 8009e6c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009e70:	4293      	cmp	r3, r2
 8009e72:	4601      	mov	r1, r0
 8009e74:	dc03      	bgt.n	8009e7e <cosf+0x16>
 8009e76:	2100      	movs	r1, #0
 8009e78:	f000 fb28 	bl	800a4cc <__kernel_cosf>
 8009e7c:	e004      	b.n	8009e88 <cosf+0x20>
 8009e7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e82:	db04      	blt.n	8009e8e <cosf+0x26>
 8009e84:	f7f6 fbfc 	bl	8000680 <__aeabi_fsub>
 8009e88:	b003      	add	sp, #12
 8009e8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e8e:	4669      	mov	r1, sp
 8009e90:	f000 f96c 	bl	800a16c <__ieee754_rem_pio2f>
 8009e94:	f000 0203 	and.w	r2, r0, #3
 8009e98:	2a01      	cmp	r2, #1
 8009e9a:	d005      	beq.n	8009ea8 <cosf+0x40>
 8009e9c:	2a02      	cmp	r2, #2
 8009e9e:	d00a      	beq.n	8009eb6 <cosf+0x4e>
 8009ea0:	b972      	cbnz	r2, 8009ec0 <cosf+0x58>
 8009ea2:	9901      	ldr	r1, [sp, #4]
 8009ea4:	9800      	ldr	r0, [sp, #0]
 8009ea6:	e7e7      	b.n	8009e78 <cosf+0x10>
 8009ea8:	9901      	ldr	r1, [sp, #4]
 8009eaa:	9800      	ldr	r0, [sp, #0]
 8009eac:	f000 fe44 	bl	800ab38 <__kernel_sinf>
 8009eb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009eb4:	e7e8      	b.n	8009e88 <cosf+0x20>
 8009eb6:	9901      	ldr	r1, [sp, #4]
 8009eb8:	9800      	ldr	r0, [sp, #0]
 8009eba:	f000 fb07 	bl	800a4cc <__kernel_cosf>
 8009ebe:	e7f7      	b.n	8009eb0 <cosf+0x48>
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	9901      	ldr	r1, [sp, #4]
 8009ec4:	9800      	ldr	r0, [sp, #0]
 8009ec6:	f000 fe37 	bl	800ab38 <__kernel_sinf>
 8009eca:	e7dd      	b.n	8009e88 <cosf+0x20>
 8009ecc:	3f490fd8 	.word	0x3f490fd8

08009ed0 <floorf>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009ed6:	3d7f      	subs	r5, #127	; 0x7f
 8009ed8:	2d16      	cmp	r5, #22
 8009eda:	4601      	mov	r1, r0
 8009edc:	4604      	mov	r4, r0
 8009ede:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009ee2:	dc26      	bgt.n	8009f32 <floorf+0x62>
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	da0e      	bge.n	8009f06 <floorf+0x36>
 8009ee8:	4917      	ldr	r1, [pc, #92]	; (8009f48 <floorf+0x78>)
 8009eea:	f7f6 fbcb 	bl	8000684 <__addsf3>
 8009eee:	2100      	movs	r1, #0
 8009ef0:	f7f6 fe8c 	bl	8000c0c <__aeabi_fcmpgt>
 8009ef4:	b128      	cbz	r0, 8009f02 <floorf+0x32>
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	da23      	bge.n	8009f42 <floorf+0x72>
 8009efa:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <floorf+0x7c>)
 8009efc:	2e00      	cmp	r6, #0
 8009efe:	bf18      	it	ne
 8009f00:	461c      	movne	r4, r3
 8009f02:	4621      	mov	r1, r4
 8009f04:	e01b      	b.n	8009f3e <floorf+0x6e>
 8009f06:	4e12      	ldr	r6, [pc, #72]	; (8009f50 <floorf+0x80>)
 8009f08:	412e      	asrs	r6, r5
 8009f0a:	4230      	tst	r0, r6
 8009f0c:	d017      	beq.n	8009f3e <floorf+0x6e>
 8009f0e:	490e      	ldr	r1, [pc, #56]	; (8009f48 <floorf+0x78>)
 8009f10:	f7f6 fbb8 	bl	8000684 <__addsf3>
 8009f14:	2100      	movs	r1, #0
 8009f16:	f7f6 fe79 	bl	8000c0c <__aeabi_fcmpgt>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0f1      	beq.n	8009f02 <floorf+0x32>
 8009f1e:	2c00      	cmp	r4, #0
 8009f20:	bfbe      	ittt	lt
 8009f22:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009f26:	fa43 f505 	asrlt.w	r5, r3, r5
 8009f2a:	1964      	addlt	r4, r4, r5
 8009f2c:	ea24 0406 	bic.w	r4, r4, r6
 8009f30:	e7e7      	b.n	8009f02 <floorf+0x32>
 8009f32:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009f36:	d302      	bcc.n	8009f3e <floorf+0x6e>
 8009f38:	f7f6 fba4 	bl	8000684 <__addsf3>
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4608      	mov	r0, r1
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	2400      	movs	r4, #0
 8009f44:	e7dd      	b.n	8009f02 <floorf+0x32>
 8009f46:	bf00      	nop
 8009f48:	7149f2ca 	.word	0x7149f2ca
 8009f4c:	bf800000 	.word	0xbf800000
 8009f50:	007fffff 	.word	0x007fffff

08009f54 <lroundf>:
 8009f54:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	f1a3 047f 	sub.w	r4, r3, #127	; 0x7f
 8009f60:	bfb4      	ite	lt
 8009f62:	f04f 31ff 	movlt.w	r1, #4294967295
 8009f66:	2101      	movge	r1, #1
 8009f68:	2c1e      	cmp	r4, #30
 8009f6a:	dc1b      	bgt.n	8009fa4 <lroundf+0x50>
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	da04      	bge.n	8009f7a <lroundf+0x26>
 8009f70:	3401      	adds	r4, #1
 8009f72:	bf18      	it	ne
 8009f74:	2100      	movne	r1, #0
 8009f76:	4608      	mov	r0, r1
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	2c16      	cmp	r4, #22
 8009f7c:	bfd8      	it	le
 8009f7e:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8009f82:	f3c0 0216 	ubfx	r2, r0, #0, #23
 8009f86:	bfd8      	it	le
 8009f88:	4123      	asrle	r3, r4
 8009f8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009f8e:	bfcd      	iteet	gt
 8009f90:	3b96      	subgt	r3, #150	; 0x96
 8009f92:	189b      	addle	r3, r3, r2
 8009f94:	f1c4 0417 	rsble	r4, r4, #23
 8009f98:	fa02 f303 	lslgt.w	r3, r2, r3
 8009f9c:	bfd8      	it	le
 8009f9e:	40e3      	lsrle	r3, r4
 8009fa0:	4359      	muls	r1, r3
 8009fa2:	e7e8      	b.n	8009f76 <lroundf+0x22>
 8009fa4:	f7f6 fe52 	bl	8000c4c <__aeabi_f2iz>
 8009fa8:	4601      	mov	r1, r0
 8009faa:	e7e4      	b.n	8009f76 <lroundf+0x22>

08009fac <sinf>:
 8009fac:	b507      	push	{r0, r1, r2, lr}
 8009fae:	4a19      	ldr	r2, [pc, #100]	; (800a014 <sinf+0x68>)
 8009fb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	dc04      	bgt.n	8009fc4 <sinf+0x18>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f000 fdbb 	bl	800ab38 <__kernel_sinf>
 8009fc2:	e004      	b.n	8009fce <sinf+0x22>
 8009fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009fc8:	db04      	blt.n	8009fd4 <sinf+0x28>
 8009fca:	f7f6 fb59 	bl	8000680 <__aeabi_fsub>
 8009fce:	b003      	add	sp, #12
 8009fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fd4:	4669      	mov	r1, sp
 8009fd6:	f000 f8c9 	bl	800a16c <__ieee754_rem_pio2f>
 8009fda:	f000 0003 	and.w	r0, r0, #3
 8009fde:	2801      	cmp	r0, #1
 8009fe0:	d006      	beq.n	8009ff0 <sinf+0x44>
 8009fe2:	2802      	cmp	r0, #2
 8009fe4:	d009      	beq.n	8009ffa <sinf+0x4e>
 8009fe6:	b980      	cbnz	r0, 800a00a <sinf+0x5e>
 8009fe8:	2201      	movs	r2, #1
 8009fea:	9901      	ldr	r1, [sp, #4]
 8009fec:	9800      	ldr	r0, [sp, #0]
 8009fee:	e7e6      	b.n	8009fbe <sinf+0x12>
 8009ff0:	9901      	ldr	r1, [sp, #4]
 8009ff2:	9800      	ldr	r0, [sp, #0]
 8009ff4:	f000 fa6a 	bl	800a4cc <__kernel_cosf>
 8009ff8:	e7e9      	b.n	8009fce <sinf+0x22>
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	9901      	ldr	r1, [sp, #4]
 8009ffe:	9800      	ldr	r0, [sp, #0]
 800a000:	f000 fd9a 	bl	800ab38 <__kernel_sinf>
 800a004:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a008:	e7e1      	b.n	8009fce <sinf+0x22>
 800a00a:	9901      	ldr	r1, [sp, #4]
 800a00c:	9800      	ldr	r0, [sp, #0]
 800a00e:	f000 fa5d 	bl	800a4cc <__kernel_cosf>
 800a012:	e7f7      	b.n	800a004 <sinf+0x58>
 800a014:	3f490fd8 	.word	0x3f490fd8

0800a018 <atan2f>:
 800a018:	f000 b822 	b.w	800a060 <__ieee754_atan2f>

0800a01c <sqrtf>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4605      	mov	r5, r0
 800a020:	f000 fa02 	bl	800a428 <__ieee754_sqrtf>
 800a024:	4b0d      	ldr	r3, [pc, #52]	; (800a05c <sqrtf+0x40>)
 800a026:	4604      	mov	r4, r0
 800a028:	f993 3000 	ldrsb.w	r3, [r3]
 800a02c:	3301      	adds	r3, #1
 800a02e:	d012      	beq.n	800a056 <sqrtf+0x3a>
 800a030:	4629      	mov	r1, r5
 800a032:	4628      	mov	r0, r5
 800a034:	f7f6 fdf4 	bl	8000c20 <__aeabi_fcmpun>
 800a038:	b968      	cbnz	r0, 800a056 <sqrtf+0x3a>
 800a03a:	2100      	movs	r1, #0
 800a03c:	4628      	mov	r0, r5
 800a03e:	f7f6 fdc7 	bl	8000bd0 <__aeabi_fcmplt>
 800a042:	b140      	cbz	r0, 800a056 <sqrtf+0x3a>
 800a044:	f000 ff4a 	bl	800aedc <__errno>
 800a048:	2321      	movs	r3, #33	; 0x21
 800a04a:	2100      	movs	r1, #0
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	4608      	mov	r0, r1
 800a050:	f7f6 fcd4 	bl	80009fc <__aeabi_fdiv>
 800a054:	4604      	mov	r4, r0
 800a056:	4620      	mov	r0, r4
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	bf00      	nop
 800a05c:	2000050c 	.word	0x2000050c

0800a060 <__ieee754_atan2f>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a066:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a06a:	4603      	mov	r3, r0
 800a06c:	dc05      	bgt.n	800a07a <__ieee754_atan2f+0x1a>
 800a06e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a072:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a076:	4607      	mov	r7, r0
 800a078:	dd04      	ble.n	800a084 <__ieee754_atan2f+0x24>
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f6 fb02 	bl	8000684 <__addsf3>
 800a080:	4603      	mov	r3, r0
 800a082:	e011      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a084:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a088:	d103      	bne.n	800a092 <__ieee754_atan2f+0x32>
 800a08a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a08e:	f000 bdc9 	b.w	800ac24 <atanf>
 800a092:	178c      	asrs	r4, r1, #30
 800a094:	f004 0402 	and.w	r4, r4, #2
 800a098:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a09c:	b932      	cbnz	r2, 800a0ac <__ieee754_atan2f+0x4c>
 800a09e:	2c02      	cmp	r4, #2
 800a0a0:	d04c      	beq.n	800a13c <__ieee754_atan2f+0xdc>
 800a0a2:	2c03      	cmp	r4, #3
 800a0a4:	d100      	bne.n	800a0a8 <__ieee754_atan2f+0x48>
 800a0a6:	4b29      	ldr	r3, [pc, #164]	; (800a14c <__ieee754_atan2f+0xec>)
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ac:	b91e      	cbnz	r6, 800a0b6 <__ieee754_atan2f+0x56>
 800a0ae:	2f00      	cmp	r7, #0
 800a0b0:	da4a      	bge.n	800a148 <__ieee754_atan2f+0xe8>
 800a0b2:	4b27      	ldr	r3, [pc, #156]	; (800a150 <__ieee754_atan2f+0xf0>)
 800a0b4:	e7f8      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a0b6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a0ba:	d10e      	bne.n	800a0da <__ieee754_atan2f+0x7a>
 800a0bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a0c0:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0c4:	d105      	bne.n	800a0d2 <__ieee754_atan2f+0x72>
 800a0c6:	2c02      	cmp	r4, #2
 800a0c8:	d83a      	bhi.n	800a140 <__ieee754_atan2f+0xe0>
 800a0ca:	4b22      	ldr	r3, [pc, #136]	; (800a154 <__ieee754_atan2f+0xf4>)
 800a0cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a0d0:	e7ea      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a0d2:	2c02      	cmp	r4, #2
 800a0d4:	d836      	bhi.n	800a144 <__ieee754_atan2f+0xe4>
 800a0d6:	4b20      	ldr	r3, [pc, #128]	; (800a158 <__ieee754_atan2f+0xf8>)
 800a0d8:	e7f8      	b.n	800a0cc <__ieee754_atan2f+0x6c>
 800a0da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a0de:	d0e6      	beq.n	800a0ae <__ieee754_atan2f+0x4e>
 800a0e0:	1b92      	subs	r2, r2, r6
 800a0e2:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800a0e6:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800a0ea:	da17      	bge.n	800a11c <__ieee754_atan2f+0xbc>
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	da01      	bge.n	800a0f4 <__ieee754_atan2f+0x94>
 800a0f0:	303c      	adds	r0, #60	; 0x3c
 800a0f2:	db15      	blt.n	800a120 <__ieee754_atan2f+0xc0>
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f6 fc81 	bl	80009fc <__aeabi_fdiv>
 800a0fa:	f000 fe9f 	bl	800ae3c <fabsf>
 800a0fe:	f000 fd91 	bl	800ac24 <atanf>
 800a102:	4603      	mov	r3, r0
 800a104:	2c01      	cmp	r4, #1
 800a106:	d00d      	beq.n	800a124 <__ieee754_atan2f+0xc4>
 800a108:	2c02      	cmp	r4, #2
 800a10a:	d00e      	beq.n	800a12a <__ieee754_atan2f+0xca>
 800a10c:	2c00      	cmp	r4, #0
 800a10e:	d0cb      	beq.n	800a0a8 <__ieee754_atan2f+0x48>
 800a110:	4912      	ldr	r1, [pc, #72]	; (800a15c <__ieee754_atan2f+0xfc>)
 800a112:	4618      	mov	r0, r3
 800a114:	f7f6 fab6 	bl	8000684 <__addsf3>
 800a118:	4911      	ldr	r1, [pc, #68]	; (800a160 <__ieee754_atan2f+0x100>)
 800a11a:	e00c      	b.n	800a136 <__ieee754_atan2f+0xd6>
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <__ieee754_atan2f+0x104>)
 800a11e:	e7f1      	b.n	800a104 <__ieee754_atan2f+0xa4>
 800a120:	2300      	movs	r3, #0
 800a122:	e7ef      	b.n	800a104 <__ieee754_atan2f+0xa4>
 800a124:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a128:	e7be      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a12a:	490c      	ldr	r1, [pc, #48]	; (800a15c <__ieee754_atan2f+0xfc>)
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f6 faa9 	bl	8000684 <__addsf3>
 800a132:	4601      	mov	r1, r0
 800a134:	480a      	ldr	r0, [pc, #40]	; (800a160 <__ieee754_atan2f+0x100>)
 800a136:	f7f6 faa3 	bl	8000680 <__aeabi_fsub>
 800a13a:	e7a1      	b.n	800a080 <__ieee754_atan2f+0x20>
 800a13c:	4b08      	ldr	r3, [pc, #32]	; (800a160 <__ieee754_atan2f+0x100>)
 800a13e:	e7b3      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <__ieee754_atan2f+0x108>)
 800a142:	e7b1      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a144:	2300      	movs	r3, #0
 800a146:	e7af      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <__ieee754_atan2f+0x104>)
 800a14a:	e7ad      	b.n	800a0a8 <__ieee754_atan2f+0x48>
 800a14c:	c0490fdb 	.word	0xc0490fdb
 800a150:	bfc90fdb 	.word	0xbfc90fdb
 800a154:	0800b1c8 	.word	0x0800b1c8
 800a158:	0800b1d4 	.word	0x0800b1d4
 800a15c:	33bbbd2e 	.word	0x33bbbd2e
 800a160:	40490fdb 	.word	0x40490fdb
 800a164:	3fc90fdb 	.word	0x3fc90fdb
 800a168:	3f490fdb 	.word	0x3f490fdb

0800a16c <__ieee754_rem_pio2f>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	4aa0      	ldr	r2, [pc, #640]	; (800a3f4 <__ieee754_rem_pio2f+0x288>)
 800a172:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a176:	4296      	cmp	r6, r2
 800a178:	460c      	mov	r4, r1
 800a17a:	4682      	mov	sl, r0
 800a17c:	b087      	sub	sp, #28
 800a17e:	dc04      	bgt.n	800a18a <__ieee754_rem_pio2f+0x1e>
 800a180:	2300      	movs	r3, #0
 800a182:	6008      	str	r0, [r1, #0]
 800a184:	604b      	str	r3, [r1, #4]
 800a186:	2500      	movs	r5, #0
 800a188:	e01a      	b.n	800a1c0 <__ieee754_rem_pio2f+0x54>
 800a18a:	4a9b      	ldr	r2, [pc, #620]	; (800a3f8 <__ieee754_rem_pio2f+0x28c>)
 800a18c:	4296      	cmp	r6, r2
 800a18e:	dc4b      	bgt.n	800a228 <__ieee754_rem_pio2f+0xbc>
 800a190:	2800      	cmp	r0, #0
 800a192:	499a      	ldr	r1, [pc, #616]	; (800a3fc <__ieee754_rem_pio2f+0x290>)
 800a194:	4f9a      	ldr	r7, [pc, #616]	; (800a400 <__ieee754_rem_pio2f+0x294>)
 800a196:	f026 060f 	bic.w	r6, r6, #15
 800a19a:	dd23      	ble.n	800a1e4 <__ieee754_rem_pio2f+0x78>
 800a19c:	f7f6 fa70 	bl	8000680 <__aeabi_fsub>
 800a1a0:	42be      	cmp	r6, r7
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d010      	beq.n	800a1c8 <__ieee754_rem_pio2f+0x5c>
 800a1a6:	4997      	ldr	r1, [pc, #604]	; (800a404 <__ieee754_rem_pio2f+0x298>)
 800a1a8:	f7f6 fa6a 	bl	8000680 <__aeabi_fsub>
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	6020      	str	r0, [r4, #0]
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f7f6 fa65 	bl	8000680 <__aeabi_fsub>
 800a1b6:	4993      	ldr	r1, [pc, #588]	; (800a404 <__ieee754_rem_pio2f+0x298>)
 800a1b8:	f7f6 fa62 	bl	8000680 <__aeabi_fsub>
 800a1bc:	2501      	movs	r5, #1
 800a1be:	6060      	str	r0, [r4, #4]
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	b007      	add	sp, #28
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	498f      	ldr	r1, [pc, #572]	; (800a408 <__ieee754_rem_pio2f+0x29c>)
 800a1ca:	f7f6 fa59 	bl	8000680 <__aeabi_fsub>
 800a1ce:	498f      	ldr	r1, [pc, #572]	; (800a40c <__ieee754_rem_pio2f+0x2a0>)
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	f7f6 fa55 	bl	8000680 <__aeabi_fsub>
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	6020      	str	r0, [r4, #0]
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f7f6 fa50 	bl	8000680 <__aeabi_fsub>
 800a1e0:	498a      	ldr	r1, [pc, #552]	; (800a40c <__ieee754_rem_pio2f+0x2a0>)
 800a1e2:	e7e9      	b.n	800a1b8 <__ieee754_rem_pio2f+0x4c>
 800a1e4:	f7f6 fa4e 	bl	8000684 <__addsf3>
 800a1e8:	42be      	cmp	r6, r7
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	d00e      	beq.n	800a20c <__ieee754_rem_pio2f+0xa0>
 800a1ee:	4985      	ldr	r1, [pc, #532]	; (800a404 <__ieee754_rem_pio2f+0x298>)
 800a1f0:	f7f6 fa48 	bl	8000684 <__addsf3>
 800a1f4:	4601      	mov	r1, r0
 800a1f6:	6020      	str	r0, [r4, #0]
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7f6 fa41 	bl	8000680 <__aeabi_fsub>
 800a1fe:	4981      	ldr	r1, [pc, #516]	; (800a404 <__ieee754_rem_pio2f+0x298>)
 800a200:	f7f6 fa40 	bl	8000684 <__addsf3>
 800a204:	f04f 35ff 	mov.w	r5, #4294967295
 800a208:	6060      	str	r0, [r4, #4]
 800a20a:	e7d9      	b.n	800a1c0 <__ieee754_rem_pio2f+0x54>
 800a20c:	497e      	ldr	r1, [pc, #504]	; (800a408 <__ieee754_rem_pio2f+0x29c>)
 800a20e:	f7f6 fa39 	bl	8000684 <__addsf3>
 800a212:	497e      	ldr	r1, [pc, #504]	; (800a40c <__ieee754_rem_pio2f+0x2a0>)
 800a214:	4605      	mov	r5, r0
 800a216:	f7f6 fa35 	bl	8000684 <__addsf3>
 800a21a:	4601      	mov	r1, r0
 800a21c:	6020      	str	r0, [r4, #0]
 800a21e:	4628      	mov	r0, r5
 800a220:	f7f6 fa2e 	bl	8000680 <__aeabi_fsub>
 800a224:	4979      	ldr	r1, [pc, #484]	; (800a40c <__ieee754_rem_pio2f+0x2a0>)
 800a226:	e7eb      	b.n	800a200 <__ieee754_rem_pio2f+0x94>
 800a228:	4a79      	ldr	r2, [pc, #484]	; (800a410 <__ieee754_rem_pio2f+0x2a4>)
 800a22a:	4296      	cmp	r6, r2
 800a22c:	f300 8091 	bgt.w	800a352 <__ieee754_rem_pio2f+0x1e6>
 800a230:	f000 fe04 	bl	800ae3c <fabsf>
 800a234:	4977      	ldr	r1, [pc, #476]	; (800a414 <__ieee754_rem_pio2f+0x2a8>)
 800a236:	4607      	mov	r7, r0
 800a238:	f7f6 fb2c 	bl	8000894 <__aeabi_fmul>
 800a23c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a240:	f7f6 fa20 	bl	8000684 <__addsf3>
 800a244:	f7f6 fd02 	bl	8000c4c <__aeabi_f2iz>
 800a248:	4605      	mov	r5, r0
 800a24a:	f7f6 facf 	bl	80007ec <__aeabi_i2f>
 800a24e:	496b      	ldr	r1, [pc, #428]	; (800a3fc <__ieee754_rem_pio2f+0x290>)
 800a250:	4681      	mov	r9, r0
 800a252:	f7f6 fb1f 	bl	8000894 <__aeabi_fmul>
 800a256:	4601      	mov	r1, r0
 800a258:	4638      	mov	r0, r7
 800a25a:	f7f6 fa11 	bl	8000680 <__aeabi_fsub>
 800a25e:	4969      	ldr	r1, [pc, #420]	; (800a404 <__ieee754_rem_pio2f+0x298>)
 800a260:	4680      	mov	r8, r0
 800a262:	4648      	mov	r0, r9
 800a264:	f7f6 fb16 	bl	8000894 <__aeabi_fmul>
 800a268:	2d1f      	cmp	r5, #31
 800a26a:	4607      	mov	r7, r0
 800a26c:	dc0c      	bgt.n	800a288 <__ieee754_rem_pio2f+0x11c>
 800a26e:	4a6a      	ldr	r2, [pc, #424]	; (800a418 <__ieee754_rem_pio2f+0x2ac>)
 800a270:	1e69      	subs	r1, r5, #1
 800a272:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a276:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <__ieee754_rem_pio2f+0x11c>
 800a27e:	4639      	mov	r1, r7
 800a280:	4640      	mov	r0, r8
 800a282:	f7f6 f9fd 	bl	8000680 <__aeabi_fsub>
 800a286:	e00b      	b.n	800a2a0 <__ieee754_rem_pio2f+0x134>
 800a288:	4639      	mov	r1, r7
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7f6 f9f8 	bl	8000680 <__aeabi_fsub>
 800a290:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a294:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800a298:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800a29c:	2e08      	cmp	r6, #8
 800a29e:	dc01      	bgt.n	800a2a4 <__ieee754_rem_pio2f+0x138>
 800a2a0:	6020      	str	r0, [r4, #0]
 800a2a2:	e026      	b.n	800a2f2 <__ieee754_rem_pio2f+0x186>
 800a2a4:	4958      	ldr	r1, [pc, #352]	; (800a408 <__ieee754_rem_pio2f+0x29c>)
 800a2a6:	4648      	mov	r0, r9
 800a2a8:	f7f6 faf4 	bl	8000894 <__aeabi_fmul>
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	f7f6 f9e5 	bl	8000680 <__aeabi_fsub>
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f7f6 f9e0 	bl	8000680 <__aeabi_fsub>
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 f9dd 	bl	8000680 <__aeabi_fsub>
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	4950      	ldr	r1, [pc, #320]	; (800a40c <__ieee754_rem_pio2f+0x2a0>)
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	f7f6 fae2 	bl	8000894 <__aeabi_fmul>
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	f7f6 f9d5 	bl	8000680 <__aeabi_fsub>
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	4607      	mov	r7, r0
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7f6 f9d0 	bl	8000680 <__aeabi_fsub>
 800a2e0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a2e4:	ebab 0b03 	sub.w	fp, fp, r3
 800a2e8:	f1bb 0f19 	cmp.w	fp, #25
 800a2ec:	dc16      	bgt.n	800a31c <__ieee754_rem_pio2f+0x1b0>
 800a2ee:	46b0      	mov	r8, r6
 800a2f0:	6020      	str	r0, [r4, #0]
 800a2f2:	6826      	ldr	r6, [r4, #0]
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	f7f6 f9c2 	bl	8000680 <__aeabi_fsub>
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f6 f9bf 	bl	8000680 <__aeabi_fsub>
 800a302:	f1ba 0f00 	cmp.w	sl, #0
 800a306:	6060      	str	r0, [r4, #4]
 800a308:	f6bf af5a 	bge.w	800a1c0 <__ieee754_rem_pio2f+0x54>
 800a30c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a310:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a314:	6026      	str	r6, [r4, #0]
 800a316:	6060      	str	r0, [r4, #4]
 800a318:	426d      	negs	r5, r5
 800a31a:	e751      	b.n	800a1c0 <__ieee754_rem_pio2f+0x54>
 800a31c:	493f      	ldr	r1, [pc, #252]	; (800a41c <__ieee754_rem_pio2f+0x2b0>)
 800a31e:	4648      	mov	r0, r9
 800a320:	f7f6 fab8 	bl	8000894 <__aeabi_fmul>
 800a324:	4607      	mov	r7, r0
 800a326:	4601      	mov	r1, r0
 800a328:	4630      	mov	r0, r6
 800a32a:	f7f6 f9a9 	bl	8000680 <__aeabi_fsub>
 800a32e:	4601      	mov	r1, r0
 800a330:	4680      	mov	r8, r0
 800a332:	4630      	mov	r0, r6
 800a334:	f7f6 f9a4 	bl	8000680 <__aeabi_fsub>
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f6 f9a1 	bl	8000680 <__aeabi_fsub>
 800a33e:	4606      	mov	r6, r0
 800a340:	4937      	ldr	r1, [pc, #220]	; (800a420 <__ieee754_rem_pio2f+0x2b4>)
 800a342:	4648      	mov	r0, r9
 800a344:	f7f6 faa6 	bl	8000894 <__aeabi_fmul>
 800a348:	4631      	mov	r1, r6
 800a34a:	f7f6 f999 	bl	8000680 <__aeabi_fsub>
 800a34e:	4607      	mov	r7, r0
 800a350:	e795      	b.n	800a27e <__ieee754_rem_pio2f+0x112>
 800a352:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a356:	db05      	blt.n	800a364 <__ieee754_rem_pio2f+0x1f8>
 800a358:	4601      	mov	r1, r0
 800a35a:	f7f6 f991 	bl	8000680 <__aeabi_fsub>
 800a35e:	6060      	str	r0, [r4, #4]
 800a360:	6020      	str	r0, [r4, #0]
 800a362:	e710      	b.n	800a186 <__ieee754_rem_pio2f+0x1a>
 800a364:	15f7      	asrs	r7, r6, #23
 800a366:	3f86      	subs	r7, #134	; 0x86
 800a368:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7f6 fc6d 	bl	8000c4c <__aeabi_f2iz>
 800a372:	f7f6 fa3b 	bl	80007ec <__aeabi_i2f>
 800a376:	4601      	mov	r1, r0
 800a378:	9003      	str	r0, [sp, #12]
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7f6 f980 	bl	8000680 <__aeabi_fsub>
 800a380:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a384:	f7f6 fa86 	bl	8000894 <__aeabi_fmul>
 800a388:	4606      	mov	r6, r0
 800a38a:	f7f6 fc5f 	bl	8000c4c <__aeabi_f2iz>
 800a38e:	f7f6 fa2d 	bl	80007ec <__aeabi_i2f>
 800a392:	4601      	mov	r1, r0
 800a394:	9004      	str	r0, [sp, #16]
 800a396:	4605      	mov	r5, r0
 800a398:	4630      	mov	r0, r6
 800a39a:	f7f6 f971 	bl	8000680 <__aeabi_fsub>
 800a39e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a3a2:	f7f6 fa77 	bl	8000894 <__aeabi_fmul>
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	9005      	str	r0, [sp, #20]
 800a3aa:	f7f6 fc07 	bl	8000bbc <__aeabi_fcmpeq>
 800a3ae:	b1f0      	cbz	r0, 800a3ee <__ieee754_rem_pio2f+0x282>
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7f6 fc02 	bl	8000bbc <__aeabi_fcmpeq>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	bf14      	ite	ne
 800a3bc:	2301      	movne	r3, #1
 800a3be:	2302      	moveq	r3, #2
 800a3c0:	4a18      	ldr	r2, [pc, #96]	; (800a424 <__ieee754_rem_pio2f+0x2b8>)
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	9201      	str	r2, [sp, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	a803      	add	r0, sp, #12
 800a3ca:	9200      	str	r2, [sp, #0]
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	f000 f8fd 	bl	800a5cc <__kernel_rem_pio2f>
 800a3d2:	f1ba 0f00 	cmp.w	sl, #0
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	f6bf aef2 	bge.w	800a1c0 <__ieee754_rem_pio2f+0x54>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	6863      	ldr	r3, [r4, #4]
 800a3e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3ea:	6063      	str	r3, [r4, #4]
 800a3ec:	e794      	b.n	800a318 <__ieee754_rem_pio2f+0x1ac>
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e7e6      	b.n	800a3c0 <__ieee754_rem_pio2f+0x254>
 800a3f2:	bf00      	nop
 800a3f4:	3f490fd8 	.word	0x3f490fd8
 800a3f8:	4016cbe3 	.word	0x4016cbe3
 800a3fc:	3fc90f80 	.word	0x3fc90f80
 800a400:	3fc90fd0 	.word	0x3fc90fd0
 800a404:	37354443 	.word	0x37354443
 800a408:	37354400 	.word	0x37354400
 800a40c:	2e85a308 	.word	0x2e85a308
 800a410:	43490f80 	.word	0x43490f80
 800a414:	3f22f984 	.word	0x3f22f984
 800a418:	0800b1e0 	.word	0x0800b1e0
 800a41c:	2e85a300 	.word	0x2e85a300
 800a420:	248d3132 	.word	0x248d3132
 800a424:	0800b260 	.word	0x0800b260

0800a428 <__ieee754_sqrtf>:
 800a428:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a42c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	4603      	mov	r3, r0
 800a434:	4604      	mov	r4, r0
 800a436:	d309      	bcc.n	800a44c <__ieee754_sqrtf+0x24>
 800a438:	4601      	mov	r1, r0
 800a43a:	f7f6 fa2b 	bl	8000894 <__aeabi_fmul>
 800a43e:	4601      	mov	r1, r0
 800a440:	4620      	mov	r0, r4
 800a442:	f7f6 f91f 	bl	8000684 <__addsf3>
 800a446:	4604      	mov	r4, r0
 800a448:	4620      	mov	r0, r4
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	d0fb      	beq.n	800a448 <__ieee754_sqrtf+0x20>
 800a450:	2800      	cmp	r0, #0
 800a452:	da06      	bge.n	800a462 <__ieee754_sqrtf+0x3a>
 800a454:	4601      	mov	r1, r0
 800a456:	f7f6 f913 	bl	8000680 <__aeabi_fsub>
 800a45a:	4601      	mov	r1, r0
 800a45c:	f7f6 face 	bl	80009fc <__aeabi_fdiv>
 800a460:	e7f1      	b.n	800a446 <__ieee754_sqrtf+0x1e>
 800a462:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a466:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a46a:	d029      	beq.n	800a4c0 <__ieee754_sqrtf+0x98>
 800a46c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800a470:	07cb      	lsls	r3, r1, #31
 800a472:	f04f 0300 	mov.w	r3, #0
 800a476:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800a47a:	f04f 0419 	mov.w	r4, #25
 800a47e:	461e      	mov	r6, r3
 800a480:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a484:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a488:	bf58      	it	pl
 800a48a:	0052      	lslpl	r2, r2, #1
 800a48c:	1040      	asrs	r0, r0, #1
 800a48e:	0052      	lsls	r2, r2, #1
 800a490:	1875      	adds	r5, r6, r1
 800a492:	4295      	cmp	r5, r2
 800a494:	bfde      	ittt	le
 800a496:	186e      	addle	r6, r5, r1
 800a498:	1b52      	suble	r2, r2, r5
 800a49a:	185b      	addle	r3, r3, r1
 800a49c:	3c01      	subs	r4, #1
 800a49e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a4a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a4a6:	d1f3      	bne.n	800a490 <__ieee754_sqrtf+0x68>
 800a4a8:	b112      	cbz	r2, 800a4b0 <__ieee754_sqrtf+0x88>
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	f023 0301 	bic.w	r3, r3, #1
 800a4b0:	105c      	asrs	r4, r3, #1
 800a4b2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a4b6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800a4ba:	e7c5      	b.n	800a448 <__ieee754_sqrtf+0x20>
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	3201      	adds	r2, #1
 800a4c0:	0218      	lsls	r0, r3, #8
 800a4c2:	d5fb      	bpl.n	800a4bc <__ieee754_sqrtf+0x94>
 800a4c4:	3a01      	subs	r2, #1
 800a4c6:	1a89      	subs	r1, r1, r2
 800a4c8:	e7d0      	b.n	800a46c <__ieee754_sqrtf+0x44>
	...

0800a4cc <__kernel_cosf>:
 800a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a4d4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a4d8:	4606      	mov	r6, r0
 800a4da:	4688      	mov	r8, r1
 800a4dc:	da03      	bge.n	800a4e6 <__kernel_cosf+0x1a>
 800a4de:	f7f6 fbb5 	bl	8000c4c <__aeabi_f2iz>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d05c      	beq.n	800a5a0 <__kernel_cosf+0xd4>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7f6 f9d3 	bl	8000894 <__aeabi_fmul>
 800a4ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	f7f6 f9ce 	bl	8000894 <__aeabi_fmul>
 800a4f8:	492b      	ldr	r1, [pc, #172]	; (800a5a8 <__kernel_cosf+0xdc>)
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f7f6 f9c9 	bl	8000894 <__aeabi_fmul>
 800a502:	492a      	ldr	r1, [pc, #168]	; (800a5ac <__kernel_cosf+0xe0>)
 800a504:	f7f6 f8be 	bl	8000684 <__addsf3>
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f6 f9c3 	bl	8000894 <__aeabi_fmul>
 800a50e:	4928      	ldr	r1, [pc, #160]	; (800a5b0 <__kernel_cosf+0xe4>)
 800a510:	f7f6 f8b6 	bl	8000680 <__aeabi_fsub>
 800a514:	4629      	mov	r1, r5
 800a516:	f7f6 f9bd 	bl	8000894 <__aeabi_fmul>
 800a51a:	4926      	ldr	r1, [pc, #152]	; (800a5b4 <__kernel_cosf+0xe8>)
 800a51c:	f7f6 f8b2 	bl	8000684 <__addsf3>
 800a520:	4629      	mov	r1, r5
 800a522:	f7f6 f9b7 	bl	8000894 <__aeabi_fmul>
 800a526:	4924      	ldr	r1, [pc, #144]	; (800a5b8 <__kernel_cosf+0xec>)
 800a528:	f7f6 f8aa 	bl	8000680 <__aeabi_fsub>
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f6 f9b1 	bl	8000894 <__aeabi_fmul>
 800a532:	4922      	ldr	r1, [pc, #136]	; (800a5bc <__kernel_cosf+0xf0>)
 800a534:	f7f6 f8a6 	bl	8000684 <__addsf3>
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f6 f9ab 	bl	8000894 <__aeabi_fmul>
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f6 f9a8 	bl	8000894 <__aeabi_fmul>
 800a544:	4641      	mov	r1, r8
 800a546:	4605      	mov	r5, r0
 800a548:	4630      	mov	r0, r6
 800a54a:	f7f6 f9a3 	bl	8000894 <__aeabi_fmul>
 800a54e:	4601      	mov	r1, r0
 800a550:	4628      	mov	r0, r5
 800a552:	f7f6 f895 	bl	8000680 <__aeabi_fsub>
 800a556:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <__kernel_cosf+0xf4>)
 800a558:	4605      	mov	r5, r0
 800a55a:	429c      	cmp	r4, r3
 800a55c:	dc0a      	bgt.n	800a574 <__kernel_cosf+0xa8>
 800a55e:	4601      	mov	r1, r0
 800a560:	4638      	mov	r0, r7
 800a562:	f7f6 f88d 	bl	8000680 <__aeabi_fsub>
 800a566:	4601      	mov	r1, r0
 800a568:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a56c:	f7f6 f888 	bl	8000680 <__aeabi_fsub>
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a574:	4b13      	ldr	r3, [pc, #76]	; (800a5c4 <__kernel_cosf+0xf8>)
 800a576:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a57a:	429c      	cmp	r4, r3
 800a57c:	bfcc      	ite	gt
 800a57e:	4c12      	ldrgt	r4, [pc, #72]	; (800a5c8 <__kernel_cosf+0xfc>)
 800a580:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800a584:	4621      	mov	r1, r4
 800a586:	f7f6 f87b 	bl	8000680 <__aeabi_fsub>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4606      	mov	r6, r0
 800a58e:	4638      	mov	r0, r7
 800a590:	f7f6 f876 	bl	8000680 <__aeabi_fsub>
 800a594:	4629      	mov	r1, r5
 800a596:	f7f6 f873 	bl	8000680 <__aeabi_fsub>
 800a59a:	4601      	mov	r1, r0
 800a59c:	4630      	mov	r0, r6
 800a59e:	e7e5      	b.n	800a56c <__kernel_cosf+0xa0>
 800a5a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a5a4:	e7e4      	b.n	800a570 <__kernel_cosf+0xa4>
 800a5a6:	bf00      	nop
 800a5a8:	ad47d74e 	.word	0xad47d74e
 800a5ac:	310f74f6 	.word	0x310f74f6
 800a5b0:	3493f27c 	.word	0x3493f27c
 800a5b4:	37d00d01 	.word	0x37d00d01
 800a5b8:	3ab60b61 	.word	0x3ab60b61
 800a5bc:	3d2aaaab 	.word	0x3d2aaaab
 800a5c0:	3e999999 	.word	0x3e999999
 800a5c4:	3f480000 	.word	0x3f480000
 800a5c8:	3e900000 	.word	0x3e900000

0800a5cc <__kernel_rem_pio2f>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	b0db      	sub	sp, #364	; 0x16c
 800a5d2:	9202      	str	r2, [sp, #8]
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a5d8:	4bc5      	ldr	r3, [pc, #788]	; (800a8f0 <__kernel_rem_pio2f+0x324>)
 800a5da:	9005      	str	r0, [sp, #20]
 800a5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e0:	9100      	str	r1, [sp, #0]
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	9b04      	ldr	r3, [sp, #16]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	9b02      	ldr	r3, [sp, #8]
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	f2c0 809b 	blt.w	800a728 <__kernel_rem_pio2f+0x15c>
 800a5f2:	1edc      	subs	r4, r3, #3
 800a5f4:	bf48      	it	mi
 800a5f6:	1d1c      	addmi	r4, r3, #4
 800a5f8:	10e4      	asrs	r4, r4, #3
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	f04f 0a00 	mov.w	sl, #0
 800a600:	1c67      	adds	r7, r4, #1
 800a602:	00fb      	lsls	r3, r7, #3
 800a604:	9306      	str	r3, [sp, #24]
 800a606:	9b02      	ldr	r3, [sp, #8]
 800a608:	9a03      	ldr	r2, [sp, #12]
 800a60a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	1aa6      	subs	r6, r4, r2
 800a612:	eb03 0802 	add.w	r8, r3, r2
 800a616:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a618:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800a61c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800a620:	4545      	cmp	r5, r8
 800a622:	f340 8083 	ble.w	800a72c <__kernel_rem_pio2f+0x160>
 800a626:	f04f 0800 	mov.w	r8, #0
 800a62a:	f04f 0b00 	mov.w	fp, #0
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	aa1e      	add	r2, sp, #120	; 0x78
 800a632:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a636:	ab46      	add	r3, sp, #280	; 0x118
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	4590      	cmp	r8, r2
 800a63c:	f340 809c 	ble.w	800a778 <__kernel_rem_pio2f+0x1ac>
 800a640:	4613      	mov	r3, r2
 800a642:	aa0a      	add	r2, sp, #40	; 0x28
 800a644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a648:	9308      	str	r3, [sp, #32]
 800a64a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a64c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a650:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	ad0a      	add	r5, sp, #40	; 0x28
 800a658:	462e      	mov	r6, r5
 800a65a:	46c3      	mov	fp, r8
 800a65c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800a660:	ab5a      	add	r3, sp, #360	; 0x168
 800a662:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800a666:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800a66a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800a66e:	f1bb 0f00 	cmp.w	fp, #0
 800a672:	f300 8086 	bgt.w	800a782 <__kernel_rem_pio2f+0x1b6>
 800a676:	4639      	mov	r1, r7
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fbe3 	bl	800ae44 <scalbnf>
 800a67e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800a682:	4604      	mov	r4, r0
 800a684:	f7f6 f906 	bl	8000894 <__aeabi_fmul>
 800a688:	f7ff fc22 	bl	8009ed0 <floorf>
 800a68c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800a690:	f7f6 f900 	bl	8000894 <__aeabi_fmul>
 800a694:	4601      	mov	r1, r0
 800a696:	4620      	mov	r0, r4
 800a698:	f7f5 fff2 	bl	8000680 <__aeabi_fsub>
 800a69c:	4604      	mov	r4, r0
 800a69e:	f7f6 fad5 	bl	8000c4c <__aeabi_f2iz>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	f7f6 f8a2 	bl	80007ec <__aeabi_i2f>
 800a6a8:	4601      	mov	r1, r0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7f5 ffe8 	bl	8000680 <__aeabi_fsub>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	4681      	mov	r9, r0
 800a6b4:	f340 8084 	ble.w	800a7c0 <__kernel_rem_pio2f+0x1f4>
 800a6b8:	f108 32ff 	add.w	r2, r8, #4294967295
 800a6bc:	ab0a      	add	r3, sp, #40	; 0x28
 800a6be:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800a6c2:	f1c7 0108 	rsb	r1, r7, #8
 800a6c6:	fa44 f301 	asr.w	r3, r4, r1
 800a6ca:	441e      	add	r6, r3
 800a6cc:	408b      	lsls	r3, r1
 800a6ce:	1ae4      	subs	r4, r4, r3
 800a6d0:	f1c7 0007 	rsb	r0, r7, #7
 800a6d4:	ab0a      	add	r3, sp, #40	; 0x28
 800a6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6da:	4104      	asrs	r4, r0
 800a6dc:	2c00      	cmp	r4, #0
 800a6de:	dd7e      	ble.n	800a7de <__kernel_rem_pio2f+0x212>
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	4692      	mov	sl, r2
 800a6e4:	3601      	adds	r6, #1
 800a6e6:	4590      	cmp	r8, r2
 800a6e8:	f300 80b0 	bgt.w	800a84c <__kernel_rem_pio2f+0x280>
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	dd05      	ble.n	800a6fc <__kernel_rem_pio2f+0x130>
 800a6f0:	2f01      	cmp	r7, #1
 800a6f2:	f000 80bd 	beq.w	800a870 <__kernel_rem_pio2f+0x2a4>
 800a6f6:	2f02      	cmp	r7, #2
 800a6f8:	f000 80c5 	beq.w	800a886 <__kernel_rem_pio2f+0x2ba>
 800a6fc:	2c02      	cmp	r4, #2
 800a6fe:	d16e      	bne.n	800a7de <__kernel_rem_pio2f+0x212>
 800a700:	4649      	mov	r1, r9
 800a702:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a706:	f7f5 ffbb 	bl	8000680 <__aeabi_fsub>
 800a70a:	4681      	mov	r9, r0
 800a70c:	f1ba 0f00 	cmp.w	sl, #0
 800a710:	d065      	beq.n	800a7de <__kernel_rem_pio2f+0x212>
 800a712:	4639      	mov	r1, r7
 800a714:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a718:	f000 fb94 	bl	800ae44 <scalbnf>
 800a71c:	4601      	mov	r1, r0
 800a71e:	4648      	mov	r0, r9
 800a720:	f7f5 ffae 	bl	8000680 <__aeabi_fsub>
 800a724:	4681      	mov	r9, r0
 800a726:	e05a      	b.n	800a7de <__kernel_rem_pio2f+0x212>
 800a728:	2400      	movs	r4, #0
 800a72a:	e766      	b.n	800a5fa <__kernel_rem_pio2f+0x2e>
 800a72c:	42ee      	cmn	r6, r5
 800a72e:	d407      	bmi.n	800a740 <__kernel_rem_pio2f+0x174>
 800a730:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a734:	f7f6 f85a 	bl	80007ec <__aeabi_i2f>
 800a738:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800a73c:	3501      	adds	r5, #1
 800a73e:	e76f      	b.n	800a620 <__kernel_rem_pio2f+0x54>
 800a740:	4650      	mov	r0, sl
 800a742:	e7f9      	b.n	800a738 <__kernel_rem_pio2f+0x16c>
 800a744:	9b05      	ldr	r3, [sp, #20]
 800a746:	f8da 1000 	ldr.w	r1, [sl]
 800a74a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800a74e:	f7f6 f8a1 	bl	8000894 <__aeabi_fmul>
 800a752:	4601      	mov	r1, r0
 800a754:	4630      	mov	r0, r6
 800a756:	f7f5 ff95 	bl	8000684 <__addsf3>
 800a75a:	4606      	mov	r6, r0
 800a75c:	f109 0901 	add.w	r9, r9, #1
 800a760:	ab46      	add	r3, sp, #280	; 0x118
 800a762:	9a03      	ldr	r2, [sp, #12]
 800a764:	f1aa 0a04 	sub.w	sl, sl, #4
 800a768:	4591      	cmp	r9, r2
 800a76a:	ddeb      	ble.n	800a744 <__kernel_rem_pio2f+0x178>
 800a76c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a770:	3504      	adds	r5, #4
 800a772:	f108 0801 	add.w	r8, r8, #1
 800a776:	e75f      	b.n	800a638 <__kernel_rem_pio2f+0x6c>
 800a778:	46aa      	mov	sl, r5
 800a77a:	465e      	mov	r6, fp
 800a77c:	f04f 0900 	mov.w	r9, #0
 800a780:	e7ef      	b.n	800a762 <__kernel_rem_pio2f+0x196>
 800a782:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a786:	4620      	mov	r0, r4
 800a788:	f7f6 f884 	bl	8000894 <__aeabi_fmul>
 800a78c:	f7f6 fa5e 	bl	8000c4c <__aeabi_f2iz>
 800a790:	f7f6 f82c 	bl	80007ec <__aeabi_i2f>
 800a794:	4649      	mov	r1, r9
 800a796:	9009      	str	r0, [sp, #36]	; 0x24
 800a798:	f7f6 f87c 	bl	8000894 <__aeabi_fmul>
 800a79c:	4601      	mov	r1, r0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7f5 ff6e 	bl	8000680 <__aeabi_fsub>
 800a7a4:	f7f6 fa52 	bl	8000c4c <__aeabi_f2iz>
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7ae:	f846 0b04 	str.w	r0, [r6], #4
 800a7b2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7f5 ff64 	bl	8000684 <__addsf3>
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e756      	b.n	800a66e <__kernel_rem_pio2f+0xa2>
 800a7c0:	d106      	bne.n	800a7d0 <__kernel_rem_pio2f+0x204>
 800a7c2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7c6:	aa0a      	add	r2, sp, #40	; 0x28
 800a7c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7cc:	1224      	asrs	r4, r4, #8
 800a7ce:	e785      	b.n	800a6dc <__kernel_rem_pio2f+0x110>
 800a7d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a7d4:	f7f6 fa10 	bl	8000bf8 <__aeabi_fcmpge>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d134      	bne.n	800a848 <__kernel_rem_pio2f+0x27c>
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f7f6 f9eb 	bl	8000bbc <__aeabi_fcmpeq>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f000 809a 	beq.w	800a920 <__kernel_rem_pio2f+0x354>
 800a7ec:	f108 35ff 	add.w	r5, r8, #4294967295
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	9901      	ldr	r1, [sp, #4]
 800a7f6:	428b      	cmp	r3, r1
 800a7f8:	da4d      	bge.n	800a896 <__kernel_rem_pio2f+0x2ca>
 800a7fa:	2a00      	cmp	r2, #0
 800a7fc:	d07c      	beq.n	800a8f8 <__kernel_rem_pio2f+0x32c>
 800a7fe:	ab0a      	add	r3, sp, #40	; 0x28
 800a800:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a804:	3f08      	subs	r7, #8
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8088 	beq.w	800a91c <__kernel_rem_pio2f+0x350>
 800a80c:	4639      	mov	r1, r7
 800a80e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a812:	f000 fb17 	bl	800ae44 <scalbnf>
 800a816:	46aa      	mov	sl, r5
 800a818:	4681      	mov	r9, r0
 800a81a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800a81e:	af46      	add	r7, sp, #280	; 0x118
 800a820:	f1ba 0f00 	cmp.w	sl, #0
 800a824:	f280 80b1 	bge.w	800a98a <__kernel_rem_pio2f+0x3be>
 800a828:	46a9      	mov	r9, r5
 800a82a:	f04f 0a00 	mov.w	sl, #0
 800a82e:	2200      	movs	r2, #0
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	f2c0 80db 	blt.w	800a9ee <__kernel_rem_pio2f+0x422>
 800a838:	a946      	add	r1, sp, #280	; 0x118
 800a83a:	4617      	mov	r7, r2
 800a83c:	f04f 0800 	mov.w	r8, #0
 800a840:	4b2c      	ldr	r3, [pc, #176]	; (800a8f4 <__kernel_rem_pio2f+0x328>)
 800a842:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800a846:	e0c3      	b.n	800a9d0 <__kernel_rem_pio2f+0x404>
 800a848:	2402      	movs	r4, #2
 800a84a:	e749      	b.n	800a6e0 <__kernel_rem_pio2f+0x114>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	f1ba 0f00 	cmp.w	sl, #0
 800a852:	d108      	bne.n	800a866 <__kernel_rem_pio2f+0x29a>
 800a854:	b11b      	cbz	r3, 800a85e <__kernel_rem_pio2f+0x292>
 800a856:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	2301      	movs	r3, #1
 800a85e:	469a      	mov	sl, r3
 800a860:	3201      	adds	r2, #1
 800a862:	3504      	adds	r5, #4
 800a864:	e73f      	b.n	800a6e6 <__kernel_rem_pio2f+0x11a>
 800a866:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	4653      	mov	r3, sl
 800a86e:	e7f6      	b.n	800a85e <__kernel_rem_pio2f+0x292>
 800a870:	f108 32ff 	add.w	r2, r8, #4294967295
 800a874:	ab0a      	add	r3, sp, #40	; 0x28
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a87e:	a90a      	add	r1, sp, #40	; 0x28
 800a880:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a884:	e73a      	b.n	800a6fc <__kernel_rem_pio2f+0x130>
 800a886:	f108 32ff 	add.w	r2, r8, #4294967295
 800a88a:	ab0a      	add	r3, sp, #40	; 0x28
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a894:	e7f3      	b.n	800a87e <__kernel_rem_pio2f+0x2b2>
 800a896:	a90a      	add	r1, sp, #40	; 0x28
 800a898:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	e7a8      	b.n	800a7f4 <__kernel_rem_pio2f+0x228>
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	d0fa      	beq.n	800a8a2 <__kernel_rem_pio2f+0x2d6>
 800a8ac:	9a04      	ldr	r2, [sp, #16]
 800a8ae:	f108 0501 	add.w	r5, r8, #1
 800a8b2:	eb08 0402 	add.w	r4, r8, r2
 800a8b6:	aa1e      	add	r2, sp, #120	; 0x78
 800a8b8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a8bc:	4498      	add	r8, r3
 800a8be:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800a8c2:	45a8      	cmp	r8, r5
 800a8c4:	f6ff aec7 	blt.w	800a656 <__kernel_rem_pio2f+0x8a>
 800a8c8:	9b07      	ldr	r3, [sp, #28]
 800a8ca:	46a3      	mov	fp, r4
 800a8cc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8d0:	f7f5 ff8c 	bl	80007ec <__aeabi_i2f>
 800a8d4:	f04f 0a00 	mov.w	sl, #0
 800a8d8:	2600      	movs	r6, #0
 800a8da:	f84b 0b04 	str.w	r0, [fp], #4
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	459a      	cmp	sl, r3
 800a8e2:	dd0c      	ble.n	800a8fe <__kernel_rem_pio2f+0x332>
 800a8e4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800a8e8:	465c      	mov	r4, fp
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	e7e9      	b.n	800a8c2 <__kernel_rem_pio2f+0x2f6>
 800a8ee:	bf00      	nop
 800a8f0:	0800b5a4 	.word	0x0800b5a4
 800a8f4:	0800b578 	.word	0x0800b578
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	9a08      	ldr	r2, [sp, #32]
 800a8fc:	e7d2      	b.n	800a8a4 <__kernel_rem_pio2f+0x2d8>
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	f854 0904 	ldr.w	r0, [r4], #-4
 800a904:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a908:	f7f5 ffc4 	bl	8000894 <__aeabi_fmul>
 800a90c:	4601      	mov	r1, r0
 800a90e:	4630      	mov	r0, r6
 800a910:	f7f5 feb8 	bl	8000684 <__addsf3>
 800a914:	f10a 0a01 	add.w	sl, sl, #1
 800a918:	4606      	mov	r6, r0
 800a91a:	e7e0      	b.n	800a8de <__kernel_rem_pio2f+0x312>
 800a91c:	3d01      	subs	r5, #1
 800a91e:	e76e      	b.n	800a7fe <__kernel_rem_pio2f+0x232>
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	9a02      	ldr	r2, [sp, #8]
 800a924:	4648      	mov	r0, r9
 800a926:	1a99      	subs	r1, r3, r2
 800a928:	f000 fa8c 	bl	800ae44 <scalbnf>
 800a92c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a930:	4605      	mov	r5, r0
 800a932:	f7f6 f961 	bl	8000bf8 <__aeabi_fcmpge>
 800a936:	b300      	cbz	r0, 800a97a <__kernel_rem_pio2f+0x3ae>
 800a938:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7f5 ffa9 	bl	8000894 <__aeabi_fmul>
 800a942:	f7f6 f983 	bl	8000c4c <__aeabi_f2iz>
 800a946:	f7f5 ff51 	bl	80007ec <__aeabi_i2f>
 800a94a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a94e:	4681      	mov	r9, r0
 800a950:	f7f5 ffa0 	bl	8000894 <__aeabi_fmul>
 800a954:	4601      	mov	r1, r0
 800a956:	4628      	mov	r0, r5
 800a958:	f7f5 fe92 	bl	8000680 <__aeabi_fsub>
 800a95c:	f7f6 f976 	bl	8000c4c <__aeabi_f2iz>
 800a960:	ab0a      	add	r3, sp, #40	; 0x28
 800a962:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a966:	4648      	mov	r0, r9
 800a968:	f7f6 f970 	bl	8000c4c <__aeabi_f2iz>
 800a96c:	f108 0501 	add.w	r5, r8, #1
 800a970:	ab0a      	add	r3, sp, #40	; 0x28
 800a972:	3708      	adds	r7, #8
 800a974:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a978:	e748      	b.n	800a80c <__kernel_rem_pio2f+0x240>
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7f6 f966 	bl	8000c4c <__aeabi_f2iz>
 800a980:	ab0a      	add	r3, sp, #40	; 0x28
 800a982:	4645      	mov	r5, r8
 800a984:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a988:	e740      	b.n	800a80c <__kernel_rem_pio2f+0x240>
 800a98a:	ab0a      	add	r3, sp, #40	; 0x28
 800a98c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a990:	f7f5 ff2c 	bl	80007ec <__aeabi_i2f>
 800a994:	4649      	mov	r1, r9
 800a996:	f7f5 ff7d 	bl	8000894 <__aeabi_fmul>
 800a99a:	4641      	mov	r1, r8
 800a99c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f7f5 ff77 	bl	8000894 <__aeabi_fmul>
 800a9a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9aa:	4681      	mov	r9, r0
 800a9ac:	e738      	b.n	800a820 <__kernel_rem_pio2f+0x254>
 800a9ae:	f853 0b04 	ldr.w	r0, [r3], #4
 800a9b2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a9b6:	9203      	str	r2, [sp, #12]
 800a9b8:	9302      	str	r3, [sp, #8]
 800a9ba:	f7f5 ff6b 	bl	8000894 <__aeabi_fmul>
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7f5 fe5f 	bl	8000684 <__addsf3>
 800a9c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	f108 0801 	add.w	r8, r8, #1
 800a9d0:	9901      	ldr	r1, [sp, #4]
 800a9d2:	4588      	cmp	r8, r1
 800a9d4:	dc01      	bgt.n	800a9da <__kernel_rem_pio2f+0x40e>
 800a9d6:	45c2      	cmp	sl, r8
 800a9d8:	dae9      	bge.n	800a9ae <__kernel_rem_pio2f+0x3e2>
 800a9da:	ab5a      	add	r3, sp, #360	; 0x168
 800a9dc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a9e0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800a9e4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	e720      	b.n	800a830 <__kernel_rem_pio2f+0x264>
 800a9ee:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	dc07      	bgt.n	800aa04 <__kernel_rem_pio2f+0x438>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc4d      	bgt.n	800aa94 <__kernel_rem_pio2f+0x4c8>
 800a9f8:	d02e      	beq.n	800aa58 <__kernel_rem_pio2f+0x48c>
 800a9fa:	f006 0007 	and.w	r0, r6, #7
 800a9fe:	b05b      	add	sp, #364	; 0x16c
 800aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa04:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d1f7      	bne.n	800a9fa <__kernel_rem_pio2f+0x42e>
 800aa0a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800aa0e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800aa12:	46b8      	mov	r8, r7
 800aa14:	46aa      	mov	sl, r5
 800aa16:	f1ba 0f00 	cmp.w	sl, #0
 800aa1a:	dc48      	bgt.n	800aaae <__kernel_rem_pio2f+0x4e2>
 800aa1c:	46a9      	mov	r9, r5
 800aa1e:	f1b9 0f01 	cmp.w	r9, #1
 800aa22:	dc5f      	bgt.n	800aae4 <__kernel_rem_pio2f+0x518>
 800aa24:	2000      	movs	r0, #0
 800aa26:	2d01      	cmp	r5, #1
 800aa28:	dc75      	bgt.n	800ab16 <__kernel_rem_pio2f+0x54a>
 800aa2a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800aa2c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d177      	bne.n	800ab22 <__kernel_rem_pio2f+0x556>
 800aa32:	9900      	ldr	r1, [sp, #0]
 800aa34:	600a      	str	r2, [r1, #0]
 800aa36:	460a      	mov	r2, r1
 800aa38:	604b      	str	r3, [r1, #4]
 800aa3a:	6090      	str	r0, [r2, #8]
 800aa3c:	e7dd      	b.n	800a9fa <__kernel_rem_pio2f+0x42e>
 800aa3e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800aa42:	f7f5 fe1f 	bl	8000684 <__addsf3>
 800aa46:	3d01      	subs	r5, #1
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	daf8      	bge.n	800aa3e <__kernel_rem_pio2f+0x472>
 800aa4c:	b10c      	cbz	r4, 800aa52 <__kernel_rem_pio2f+0x486>
 800aa4e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aa52:	9b00      	ldr	r3, [sp, #0]
 800aa54:	6018      	str	r0, [r3, #0]
 800aa56:	e7d0      	b.n	800a9fa <__kernel_rem_pio2f+0x42e>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	af32      	add	r7, sp, #200	; 0xc8
 800aa5c:	e7f4      	b.n	800aa48 <__kernel_rem_pio2f+0x47c>
 800aa5e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800aa62:	f7f5 fe0f 	bl	8000684 <__addsf3>
 800aa66:	3f01      	subs	r7, #1
 800aa68:	2f00      	cmp	r7, #0
 800aa6a:	daf8      	bge.n	800aa5e <__kernel_rem_pio2f+0x492>
 800aa6c:	b1bc      	cbz	r4, 800aa9e <__kernel_rem_pio2f+0x4d2>
 800aa6e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800aa72:	9a00      	ldr	r2, [sp, #0]
 800aa74:	4601      	mov	r1, r0
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800aa7a:	f7f5 fe01 	bl	8000680 <__aeabi_fsub>
 800aa7e:	2701      	movs	r7, #1
 800aa80:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800aa84:	42bd      	cmp	r5, r7
 800aa86:	da0c      	bge.n	800aaa2 <__kernel_rem_pio2f+0x4d6>
 800aa88:	b10c      	cbz	r4, 800aa8e <__kernel_rem_pio2f+0x4c2>
 800aa8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	6058      	str	r0, [r3, #4]
 800aa92:	e7b2      	b.n	800a9fa <__kernel_rem_pio2f+0x42e>
 800aa94:	462f      	mov	r7, r5
 800aa96:	2000      	movs	r0, #0
 800aa98:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800aa9c:	e7e4      	b.n	800aa68 <__kernel_rem_pio2f+0x49c>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	e7e7      	b.n	800aa72 <__kernel_rem_pio2f+0x4a6>
 800aaa2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800aaa6:	f7f5 fded 	bl	8000684 <__addsf3>
 800aaaa:	3701      	adds	r7, #1
 800aaac:	e7ea      	b.n	800aa84 <__kernel_rem_pio2f+0x4b8>
 800aaae:	f8d8 3000 	ldr.w	r3, [r8]
 800aab2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	9302      	str	r3, [sp, #8]
 800aabc:	9201      	str	r2, [sp, #4]
 800aabe:	f7f5 fde1 	bl	8000684 <__addsf3>
 800aac2:	9a01      	ldr	r2, [sp, #4]
 800aac4:	4601      	mov	r1, r0
 800aac6:	4681      	mov	r9, r0
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7f5 fdd9 	bl	8000680 <__aeabi_fsub>
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aad4:	4619      	mov	r1, r3
 800aad6:	f7f5 fdd5 	bl	8000684 <__addsf3>
 800aada:	f848 0904 	str.w	r0, [r8], #-4
 800aade:	f8c8 9000 	str.w	r9, [r8]
 800aae2:	e798      	b.n	800aa16 <__kernel_rem_pio2f+0x44a>
 800aae4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800aae8:	f8d7 a000 	ldr.w	sl, [r7]
 800aaec:	4618      	mov	r0, r3
 800aaee:	4651      	mov	r1, sl
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	f7f5 fdc7 	bl	8000684 <__addsf3>
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	4601      	mov	r1, r0
 800aafa:	4680      	mov	r8, r0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f5 fdbf 	bl	8000680 <__aeabi_fsub>
 800ab02:	4651      	mov	r1, sl
 800ab04:	f7f5 fdbe 	bl	8000684 <__addsf3>
 800ab08:	f847 0904 	str.w	r0, [r7], #-4
 800ab0c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab10:	f8c7 8000 	str.w	r8, [r7]
 800ab14:	e783      	b.n	800aa1e <__kernel_rem_pio2f+0x452>
 800ab16:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800ab1a:	f7f5 fdb3 	bl	8000684 <__addsf3>
 800ab1e:	3d01      	subs	r5, #1
 800ab20:	e781      	b.n	800aa26 <__kernel_rem_pio2f+0x45a>
 800ab22:	9900      	ldr	r1, [sp, #0]
 800ab24:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800ab28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	600a      	str	r2, [r1, #0]
 800ab2e:	604b      	str	r3, [r1, #4]
 800ab30:	460a      	mov	r2, r1
 800ab32:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ab36:	e780      	b.n	800aa3a <__kernel_rem_pio2f+0x46e>

0800ab38 <__kernel_sinf>:
 800ab38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ab40:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ab44:	4604      	mov	r4, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	4691      	mov	r9, r2
 800ab4a:	da03      	bge.n	800ab54 <__kernel_sinf+0x1c>
 800ab4c:	f7f6 f87e 	bl	8000c4c <__aeabi_f2iz>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d035      	beq.n	800abc0 <__kernel_sinf+0x88>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7f5 fe9c 	bl	8000894 <__aeabi_fmul>
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	4601      	mov	r1, r0
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7f5 fe97 	bl	8000894 <__aeabi_fmul>
 800ab66:	4929      	ldr	r1, [pc, #164]	; (800ac0c <__kernel_sinf+0xd4>)
 800ab68:	4606      	mov	r6, r0
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f7f5 fe92 	bl	8000894 <__aeabi_fmul>
 800ab70:	4927      	ldr	r1, [pc, #156]	; (800ac10 <__kernel_sinf+0xd8>)
 800ab72:	f7f5 fd85 	bl	8000680 <__aeabi_fsub>
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fe8c 	bl	8000894 <__aeabi_fmul>
 800ab7c:	4925      	ldr	r1, [pc, #148]	; (800ac14 <__kernel_sinf+0xdc>)
 800ab7e:	f7f5 fd81 	bl	8000684 <__addsf3>
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fe86 	bl	8000894 <__aeabi_fmul>
 800ab88:	4923      	ldr	r1, [pc, #140]	; (800ac18 <__kernel_sinf+0xe0>)
 800ab8a:	f7f5 fd79 	bl	8000680 <__aeabi_fsub>
 800ab8e:	4629      	mov	r1, r5
 800ab90:	f7f5 fe80 	bl	8000894 <__aeabi_fmul>
 800ab94:	4921      	ldr	r1, [pc, #132]	; (800ac1c <__kernel_sinf+0xe4>)
 800ab96:	f7f5 fd75 	bl	8000684 <__addsf3>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	d111      	bne.n	800abc6 <__kernel_sinf+0x8e>
 800aba2:	4601      	mov	r1, r0
 800aba4:	4628      	mov	r0, r5
 800aba6:	f7f5 fe75 	bl	8000894 <__aeabi_fmul>
 800abaa:	491d      	ldr	r1, [pc, #116]	; (800ac20 <__kernel_sinf+0xe8>)
 800abac:	f7f5 fd68 	bl	8000680 <__aeabi_fsub>
 800abb0:	4631      	mov	r1, r6
 800abb2:	f7f5 fe6f 	bl	8000894 <__aeabi_fmul>
 800abb6:	4601      	mov	r1, r0
 800abb8:	4620      	mov	r0, r4
 800abba:	f7f5 fd63 	bl	8000684 <__addsf3>
 800abbe:	4604      	mov	r4, r0
 800abc0:	4620      	mov	r0, r4
 800abc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800abca:	4638      	mov	r0, r7
 800abcc:	f7f5 fe62 	bl	8000894 <__aeabi_fmul>
 800abd0:	4641      	mov	r1, r8
 800abd2:	4681      	mov	r9, r0
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7f5 fe5d 	bl	8000894 <__aeabi_fmul>
 800abda:	4601      	mov	r1, r0
 800abdc:	4648      	mov	r0, r9
 800abde:	f7f5 fd4f 	bl	8000680 <__aeabi_fsub>
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fe56 	bl	8000894 <__aeabi_fmul>
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fd49 	bl	8000680 <__aeabi_fsub>
 800abee:	490c      	ldr	r1, [pc, #48]	; (800ac20 <__kernel_sinf+0xe8>)
 800abf0:	4605      	mov	r5, r0
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7f5 fe4e 	bl	8000894 <__aeabi_fmul>
 800abf8:	4601      	mov	r1, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7f5 fd42 	bl	8000684 <__addsf3>
 800ac00:	4601      	mov	r1, r0
 800ac02:	4620      	mov	r0, r4
 800ac04:	f7f5 fd3c 	bl	8000680 <__aeabi_fsub>
 800ac08:	e7d9      	b.n	800abbe <__kernel_sinf+0x86>
 800ac0a:	bf00      	nop
 800ac0c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ac10:	32d72f34 	.word	0x32d72f34
 800ac14:	3638ef1b 	.word	0x3638ef1b
 800ac18:	39500d01 	.word	0x39500d01
 800ac1c:	3c088889 	.word	0x3c088889
 800ac20:	3e2aaaab 	.word	0x3e2aaaab

0800ac24 <atanf>:
 800ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac28:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ac2c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800ac30:	4604      	mov	r4, r0
 800ac32:	4680      	mov	r8, r0
 800ac34:	db0e      	blt.n	800ac54 <atanf+0x30>
 800ac36:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ac3a:	dd04      	ble.n	800ac46 <atanf+0x22>
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	f7f5 fd21 	bl	8000684 <__addsf3>
 800ac42:	4604      	mov	r4, r0
 800ac44:	e003      	b.n	800ac4e <atanf+0x2a>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f300 80ce 	bgt.w	800ade8 <atanf+0x1c4>
 800ac4c:	4c67      	ldr	r4, [pc, #412]	; (800adec <atanf+0x1c8>)
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	4b66      	ldr	r3, [pc, #408]	; (800adf0 <atanf+0x1cc>)
 800ac56:	429d      	cmp	r5, r3
 800ac58:	dc0e      	bgt.n	800ac78 <atanf+0x54>
 800ac5a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800ac5e:	da08      	bge.n	800ac72 <atanf+0x4e>
 800ac60:	4964      	ldr	r1, [pc, #400]	; (800adf4 <atanf+0x1d0>)
 800ac62:	f7f5 fd0f 	bl	8000684 <__addsf3>
 800ac66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac6a:	f7f5 ffcf 	bl	8000c0c <__aeabi_fcmpgt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d1ed      	bne.n	800ac4e <atanf+0x2a>
 800ac72:	f04f 36ff 	mov.w	r6, #4294967295
 800ac76:	e01c      	b.n	800acb2 <atanf+0x8e>
 800ac78:	f000 f8e0 	bl	800ae3c <fabsf>
 800ac7c:	4b5e      	ldr	r3, [pc, #376]	; (800adf8 <atanf+0x1d4>)
 800ac7e:	4604      	mov	r4, r0
 800ac80:	429d      	cmp	r5, r3
 800ac82:	dc7c      	bgt.n	800ad7e <atanf+0x15a>
 800ac84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ac88:	429d      	cmp	r5, r3
 800ac8a:	dc67      	bgt.n	800ad5c <atanf+0x138>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	f7f5 fcf9 	bl	8000684 <__addsf3>
 800ac92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac96:	f7f5 fcf3 	bl	8000680 <__aeabi_fsub>
 800ac9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ac9e:	4605      	mov	r5, r0
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7f5 fcef 	bl	8000684 <__addsf3>
 800aca6:	4601      	mov	r1, r0
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7f5 fea7 	bl	80009fc <__aeabi_fdiv>
 800acae:	2600      	movs	r6, #0
 800acb0:	4604      	mov	r4, r0
 800acb2:	4621      	mov	r1, r4
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7f5 fded 	bl	8000894 <__aeabi_fmul>
 800acba:	4601      	mov	r1, r0
 800acbc:	4607      	mov	r7, r0
 800acbe:	f7f5 fde9 	bl	8000894 <__aeabi_fmul>
 800acc2:	4605      	mov	r5, r0
 800acc4:	494d      	ldr	r1, [pc, #308]	; (800adfc <atanf+0x1d8>)
 800acc6:	f7f5 fde5 	bl	8000894 <__aeabi_fmul>
 800acca:	494d      	ldr	r1, [pc, #308]	; (800ae00 <atanf+0x1dc>)
 800accc:	f7f5 fcda 	bl	8000684 <__addsf3>
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 fddf 	bl	8000894 <__aeabi_fmul>
 800acd6:	494b      	ldr	r1, [pc, #300]	; (800ae04 <atanf+0x1e0>)
 800acd8:	f7f5 fcd4 	bl	8000684 <__addsf3>
 800acdc:	4629      	mov	r1, r5
 800acde:	f7f5 fdd9 	bl	8000894 <__aeabi_fmul>
 800ace2:	4949      	ldr	r1, [pc, #292]	; (800ae08 <atanf+0x1e4>)
 800ace4:	f7f5 fcce 	bl	8000684 <__addsf3>
 800ace8:	4629      	mov	r1, r5
 800acea:	f7f5 fdd3 	bl	8000894 <__aeabi_fmul>
 800acee:	4947      	ldr	r1, [pc, #284]	; (800ae0c <atanf+0x1e8>)
 800acf0:	f7f5 fcc8 	bl	8000684 <__addsf3>
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7f5 fdcd 	bl	8000894 <__aeabi_fmul>
 800acfa:	4945      	ldr	r1, [pc, #276]	; (800ae10 <atanf+0x1ec>)
 800acfc:	f7f5 fcc2 	bl	8000684 <__addsf3>
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 fdc7 	bl	8000894 <__aeabi_fmul>
 800ad06:	4943      	ldr	r1, [pc, #268]	; (800ae14 <atanf+0x1f0>)
 800ad08:	4607      	mov	r7, r0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f7f5 fdc2 	bl	8000894 <__aeabi_fmul>
 800ad10:	4941      	ldr	r1, [pc, #260]	; (800ae18 <atanf+0x1f4>)
 800ad12:	f7f5 fcb5 	bl	8000680 <__aeabi_fsub>
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fdbc 	bl	8000894 <__aeabi_fmul>
 800ad1c:	493f      	ldr	r1, [pc, #252]	; (800ae1c <atanf+0x1f8>)
 800ad1e:	f7f5 fcaf 	bl	8000680 <__aeabi_fsub>
 800ad22:	4629      	mov	r1, r5
 800ad24:	f7f5 fdb6 	bl	8000894 <__aeabi_fmul>
 800ad28:	493d      	ldr	r1, [pc, #244]	; (800ae20 <atanf+0x1fc>)
 800ad2a:	f7f5 fca9 	bl	8000680 <__aeabi_fsub>
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fdb0 	bl	8000894 <__aeabi_fmul>
 800ad34:	493b      	ldr	r1, [pc, #236]	; (800ae24 <atanf+0x200>)
 800ad36:	f7f5 fca3 	bl	8000680 <__aeabi_fsub>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	f7f5 fdaa 	bl	8000894 <__aeabi_fmul>
 800ad40:	4601      	mov	r1, r0
 800ad42:	4638      	mov	r0, r7
 800ad44:	f7f5 fc9e 	bl	8000684 <__addsf3>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	f7f5 fda3 	bl	8000894 <__aeabi_fmul>
 800ad4e:	1c73      	adds	r3, r6, #1
 800ad50:	4601      	mov	r1, r0
 800ad52:	d133      	bne.n	800adbc <atanf+0x198>
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7f5 fc93 	bl	8000680 <__aeabi_fsub>
 800ad5a:	e772      	b.n	800ac42 <atanf+0x1e>
 800ad5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad60:	f7f5 fc8e 	bl	8000680 <__aeabi_fsub>
 800ad64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad68:	4605      	mov	r5, r0
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7f5 fc8a 	bl	8000684 <__addsf3>
 800ad70:	4601      	mov	r1, r0
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7f5 fe42 	bl	80009fc <__aeabi_fdiv>
 800ad78:	2601      	movs	r6, #1
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	e799      	b.n	800acb2 <atanf+0x8e>
 800ad7e:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <atanf+0x204>)
 800ad80:	429d      	cmp	r5, r3
 800ad82:	dc14      	bgt.n	800adae <atanf+0x18a>
 800ad84:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ad88:	f7f5 fc7a 	bl	8000680 <__aeabi_fsub>
 800ad8c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ad90:	4605      	mov	r5, r0
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7f5 fd7e 	bl	8000894 <__aeabi_fmul>
 800ad98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad9c:	f7f5 fc72 	bl	8000684 <__addsf3>
 800ada0:	4601      	mov	r1, r0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7f5 fe2a 	bl	80009fc <__aeabi_fdiv>
 800ada8:	2602      	movs	r6, #2
 800adaa:	4604      	mov	r4, r0
 800adac:	e781      	b.n	800acb2 <atanf+0x8e>
 800adae:	4601      	mov	r1, r0
 800adb0:	481e      	ldr	r0, [pc, #120]	; (800ae2c <atanf+0x208>)
 800adb2:	f7f5 fe23 	bl	80009fc <__aeabi_fdiv>
 800adb6:	2603      	movs	r6, #3
 800adb8:	4604      	mov	r4, r0
 800adba:	e77a      	b.n	800acb2 <atanf+0x8e>
 800adbc:	4b1c      	ldr	r3, [pc, #112]	; (800ae30 <atanf+0x20c>)
 800adbe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800adc2:	f7f5 fc5d 	bl	8000680 <__aeabi_fsub>
 800adc6:	4621      	mov	r1, r4
 800adc8:	f7f5 fc5a 	bl	8000680 <__aeabi_fsub>
 800adcc:	4b19      	ldr	r3, [pc, #100]	; (800ae34 <atanf+0x210>)
 800adce:	4601      	mov	r1, r0
 800add0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800add4:	f7f5 fc54 	bl	8000680 <__aeabi_fsub>
 800add8:	f1b8 0f00 	cmp.w	r8, #0
 800addc:	4604      	mov	r4, r0
 800adde:	f6bf af36 	bge.w	800ac4e <atanf+0x2a>
 800ade2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ade6:	e72c      	b.n	800ac42 <atanf+0x1e>
 800ade8:	4c13      	ldr	r4, [pc, #76]	; (800ae38 <atanf+0x214>)
 800adea:	e730      	b.n	800ac4e <atanf+0x2a>
 800adec:	bfc90fdb 	.word	0xbfc90fdb
 800adf0:	3edfffff 	.word	0x3edfffff
 800adf4:	7149f2ca 	.word	0x7149f2ca
 800adf8:	3f97ffff 	.word	0x3f97ffff
 800adfc:	3c8569d7 	.word	0x3c8569d7
 800ae00:	3d4bda59 	.word	0x3d4bda59
 800ae04:	3d886b35 	.word	0x3d886b35
 800ae08:	3dba2e6e 	.word	0x3dba2e6e
 800ae0c:	3e124925 	.word	0x3e124925
 800ae10:	3eaaaaab 	.word	0x3eaaaaab
 800ae14:	bd15a221 	.word	0xbd15a221
 800ae18:	3d6ef16b 	.word	0x3d6ef16b
 800ae1c:	3d9d8795 	.word	0x3d9d8795
 800ae20:	3de38e38 	.word	0x3de38e38
 800ae24:	3e4ccccd 	.word	0x3e4ccccd
 800ae28:	401bffff 	.word	0x401bffff
 800ae2c:	bf800000 	.word	0xbf800000
 800ae30:	0800b5c0 	.word	0x0800b5c0
 800ae34:	0800b5b0 	.word	0x0800b5b0
 800ae38:	3fc90fdb 	.word	0x3fc90fdb

0800ae3c <fabsf>:
 800ae3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ae40:	4770      	bx	lr
	...

0800ae44 <scalbnf>:
 800ae44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	4604      	mov	r4, r0
 800ae50:	d02a      	beq.n	800aea8 <scalbnf+0x64>
 800ae52:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae56:	d304      	bcc.n	800ae62 <scalbnf+0x1e>
 800ae58:	4601      	mov	r1, r0
 800ae5a:	f7f5 fc13 	bl	8000684 <__addsf3>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	e022      	b.n	800aea8 <scalbnf+0x64>
 800ae62:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800ae66:	d117      	bne.n	800ae98 <scalbnf+0x54>
 800ae68:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ae6c:	f7f5 fd12 	bl	8000894 <__aeabi_fmul>
 800ae70:	4a17      	ldr	r2, [pc, #92]	; (800aed0 <scalbnf+0x8c>)
 800ae72:	4603      	mov	r3, r0
 800ae74:	4295      	cmp	r5, r2
 800ae76:	db0b      	blt.n	800ae90 <scalbnf+0x4c>
 800ae78:	4604      	mov	r4, r0
 800ae7a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ae7e:	3a19      	subs	r2, #25
 800ae80:	442a      	add	r2, r5
 800ae82:	2afe      	cmp	r2, #254	; 0xfe
 800ae84:	dd0a      	ble.n	800ae9c <scalbnf+0x58>
 800ae86:	4913      	ldr	r1, [pc, #76]	; (800aed4 <scalbnf+0x90>)
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f361 001e 	bfi	r0, r1, #0, #31
 800ae8e:	e000      	b.n	800ae92 <scalbnf+0x4e>
 800ae90:	4911      	ldr	r1, [pc, #68]	; (800aed8 <scalbnf+0x94>)
 800ae92:	f7f5 fcff 	bl	8000894 <__aeabi_fmul>
 800ae96:	e7e2      	b.n	800ae5e <scalbnf+0x1a>
 800ae98:	0dd2      	lsrs	r2, r2, #23
 800ae9a:	e7f1      	b.n	800ae80 <scalbnf+0x3c>
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	dd05      	ble.n	800aeac <scalbnf+0x68>
 800aea0:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800aea4:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800aea8:	4618      	mov	r0, r3
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	f112 0f16 	cmn.w	r2, #22
 800aeb0:	da05      	bge.n	800aebe <scalbnf+0x7a>
 800aeb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aeb6:	4295      	cmp	r5, r2
 800aeb8:	dce5      	bgt.n	800ae86 <scalbnf+0x42>
 800aeba:	4907      	ldr	r1, [pc, #28]	; (800aed8 <scalbnf+0x94>)
 800aebc:	e7e4      	b.n	800ae88 <scalbnf+0x44>
 800aebe:	3219      	adds	r2, #25
 800aec0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800aec4:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800aec8:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800aecc:	e7e1      	b.n	800ae92 <scalbnf+0x4e>
 800aece:	bf00      	nop
 800aed0:	ffff3cb0 	.word	0xffff3cb0
 800aed4:	7149f2ca 	.word	0x7149f2ca
 800aed8:	0da24260 	.word	0x0da24260

0800aedc <__errno>:
 800aedc:	4b01      	ldr	r3, [pc, #4]	; (800aee4 <__errno+0x8>)
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	200000dc 	.word	0x200000dc

0800aee8 <_init>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr

0800aef4 <_fini>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr
